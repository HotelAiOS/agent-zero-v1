{
  "total_mock_files": 401,
  "mock_implementations": [
    {
      "file": "deployment_script.py",
      "line": 37,
      "type": "Simulation",
      "description": "dry_run: If True, only simulate deployment without making changes",
      "context": [
        "        Args:",
        "            project_root: Path to agent-zero-v1 project root",
        "            dry_run: If True, only simulate deployment without making changes",
        "        \"\"\"",
        "        self.project_root = Path(project_root).resolve()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "deployment_script.py",
      "line": 444,
      "type": "Mock Implementation",
      "description": "# Mock agent for testing",
      "context": [
        "            # Test method signature",
        "            try:",
        "                # Mock agent for testing",
        "                class MockAgent:",
        "                    def execute(self, task, context):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "deployment_script.py",
      "line": 445,
      "type": "Mock Class",
      "description": "class MockAgent:",
      "context": [
        "            try:",
        "                # Mock agent for testing",
        "                class MockAgent:",
        "                    def execute(self, task, context):",
        "                        return {'status': 'completed', 'message': 'Test successful'}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "deployment_script.py",
      "line": 599,
      "type": "Simulation",
      "description": "parser.add_argument('--dry-run', action='store_true', help='Simulate deployment without making changes')",
      "context": [
        "    parser = argparse.ArgumentParser(description='Deploy AgentExecutor Method Signature Fix')",
        "    parser.add_argument('project_root', help='Path to agent-zero-v1 project root')",
        "    parser.add_argument('--dry-run', action='store_true', help='Simulate deployment without making changes')",
        "    parser.add_argument('--rollback', help='Rollback using specified backup directory')",
        "    parser.add_argument('--verbose', '-v', action='store_true', help='Enable verbose logging')"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "performance_benchmark.py",
      "line": 361,
      "type": "Mock Implementation",
      "description": "# Mock AgentExecutor for performance testing",
      "context": [
        "        \"\"\"Test agent execution performance\"\"\"",
        "        try:",
        "            # Mock AgentExecutor for performance testing",
        "            class MockAgentExecutor:",
        "                def execute_task(self, agent, task, output_dir):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "performance_benchmark.py",
      "line": 362,
      "type": "Mock Class",
      "description": "class MockAgentExecutor:",
      "context": [
        "        try:",
        "            # Mock AgentExecutor for performance testing",
        "            class MockAgentExecutor:",
        "                def execute_task(self, agent, task, output_dir):",
        "                    # Simulate work"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "performance_benchmark.py",
      "line": 364,
      "type": "Simulation",
      "description": "# Simulate work",
      "context": [
        "            class MockAgentExecutor:",
        "                def execute_task(self, agent, task, output_dir):",
        "                    # Simulate work",
        "                    time.sleep(0.1)  # 100ms simulated work",
        "                    return {"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "performance_benchmark.py",
      "line": 365,
      "type": "Simulation",
      "description": "time.sleep(0.1)  # 100ms simulated work",
      "context": [
        "                def execute_task(self, agent, task, output_dir):",
        "                    # Simulate work",
        "                    time.sleep(0.1)  # 100ms simulated work",
        "                    return {",
        "                        'status': 'success',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "task_decomposer_fixed.py",
      "line": 223,
      "type": "Mock Implementation",
      "description": "# Return mock response for testing",
      "context": [
        "        \"\"\"",
        "        if not self.llm_client:",
        "            # Return mock response for testing",
        "            return self._generate_mock_llm_response(task_description)",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "task_decomposer_fixed.py",
      "line": 224,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        if not self.llm_client:",
        "            # Return mock response for testing",
        "            return self._generate_mock_llm_response(task_description)",
        "        ",
        "        # Enhanced prompt for better JSON output"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "task_decomposer_fixed.py",
      "line": 224,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        if not self.llm_client:",
        "            # Return mock response for testing",
        "            return self._generate_mock_llm_response(task_description)",
        "        ",
        "        # Enhanced prompt for better JSON output"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "task_decomposer_fixed.py",
      "line": 259,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        except Exception as e:",
        "            logger.error(f\"LLM call failed: {e}\")",
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "task_decomposer_fixed.py",
      "line": 259,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        except Exception as e:",
        "            logger.error(f\"LLM call failed: {e}\")",
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "task_decomposer_fixed.py",
      "line": 261,
      "type": "Mock Method",
      "description": "def _generate_mock_llm_response(self, task_description: str) -> str:",
      "context": [
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:",
        "        \"\"\"Generate mock response for testing purposes\"\"\"",
        "        return f\"\"\"{{"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "task_decomposer_fixed.py",
      "line": 261,
      "type": "Mock Method",
      "description": "def _generate_mock_llm_response(self, task_description: str) -> str:",
      "context": [
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:",
        "        \"\"\"Generate mock response for testing purposes\"\"\"",
        "        return f\"\"\"{{"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "test_integration_phase1_phase2.py",
      "line": 10,
      "type": "Mock Class",
      "description": "class MockProjectOrchestrator:",
      "context": [
        "from shared.monitoring.livemonitor import AgentUpdate, AgentStatus",
        "",
        "class MockProjectOrchestrator:",
        "    \"\"\"Mock orchestrator for integration testing\"\"\"",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "test_integration_phase1_phase2.py",
      "line": 17,
      "type": "Simulation",
      "description": "\"\"\"Simulate Phase 1 execution with Phase 2 monitoring\"\"\"",
      "context": [
        "        ",
        "    async def execute_with_monitoring(self, session, requirements: str):",
        "        \"\"\"Simulate Phase 1 execution with Phase 2 monitoring\"\"\"",
        "        from shared.monitoring.livemonitor import AgentUpdate, AgentStatus",
        "        import time"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "test_integration_phase1_phase2.py",
      "line": 32,
      "type": "Simulation",
      "description": "# Simulate 5 phases of development",
      "context": [
        "        ",
        "        try:",
        "            # Simulate 5 phases of development",
        "            phases = [",
        "                (\"Requirements Analysis\", \"orchestrator\", 15.0),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "test_integration_phase1_phase2.py",
      "line": 149,
      "type": "Mock Implementation",
      "description": "mock_orchestrator = MockProjectOrchestrator()",
      "context": [
        "    ",
        "    # Create mock orchestrator",
        "    mock_orchestrator = MockProjectOrchestrator()",
        "    ",
        "    # Start interactive session"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "test_integration_phase1_phase2.py",
      "line": 174,
      "type": "Mock Implementation",
      "description": "result = await mock_orchestrator.execute_with_monitoring(",
      "context": [
        "    try:",
        "        # Execute with monitoring",
        "        result = await mock_orchestrator.execute_with_monitoring(",
        "            session=session,",
        "            requirements=\"Build complete REST API project\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "test_neo4j_connection.py",
      "line": 274,
      "type": "Simulation",
      "description": "# Simulate error",
      "context": [
        "                with session.begin_transaction() as tx:",
        "                    tx.run(\"CREATE (t:TransactionTest {id: 'rollback_test'})\")",
        "                    # Simulate error",
        "                    raise Exception(\"Simulated error\")",
        "            except Exception:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "test_neo4j_connection.py",
      "line": 275,
      "type": "Simulation",
      "description": "raise Exception(\"Simulated error\")",
      "context": [
        "                    tx.run(\"CREATE (t:TransactionTest {id: 'rollback_test'})\")",
        "                    # Simulate error",
        "                    raise Exception(\"Simulated error\")",
        "            except Exception:",
        "                pass"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "test_neo4j_connection.py",
      "line": 302,
      "type": "Mock Implementation",
      "description": "# Mock implementation for retry testing",
      "context": [
        "    def test_connection_retry_mechanism(self):",
        "        \"\"\"Test connection retry logic\"\"\"",
        "        # Mock implementation for retry testing",
        "        retry_count = 0",
        "        max_retries = 3"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "test_neo4j_connection.py",
      "line": 306,
      "type": "Mock Method",
      "description": "def mock_connect():",
      "context": [
        "        max_retries = 3",
        "",
        "        def mock_connect():",
        "            nonlocal retry_count",
        "            retry_count += 1"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "test_neo4j_connection.py",
      "line": 306,
      "type": "Mock Method",
      "description": "def mock_connect():",
      "context": [
        "        max_retries = 3",
        "",
        "        def mock_connect():",
        "            nonlocal retry_count",
        "            retry_count += 1"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "test_neo4j_connection.py",
      "line": 311,
      "type": "Mock Implementation",
      "description": "return Mock()  # Successful connection",
      "context": [
        "            if retry_count < max_retries:",
        "                raise ServiceUnavailable(\"Connection failed\")",
        "            return Mock()  # Successful connection",
        "",
        "        # Simulate retry logic"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "test_neo4j_connection.py",
      "line": 313,
      "type": "Simulation",
      "description": "# Simulate retry logic",
      "context": [
        "            return Mock()  # Successful connection",
        "",
        "        # Simulate retry logic",
        "        for attempt in range(max_retries):",
        "            try:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "test_neo4j_connection.py",
      "line": 316,
      "type": "Mock Implementation",
      "description": "connection = mock_connect()",
      "context": [
        "        for attempt in range(max_retries):",
        "            try:",
        "                connection = mock_connect()",
        "                break",
        "            except ServiceUnavailable:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "websocket_monitor_fixed.py",
      "line": 513,
      "type": "Simulation",
      "description": "# Simulate agent status updates",
      "context": [
        "    while True:",
        "        try:",
        "            # Simulate agent status updates",
        "            for i, agent in enumerate(agents):",
        "                is_active = (counter + i) % 3 != 0  # Simulate some agents being inactive"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "websocket_monitor_fixed.py",
      "line": 515,
      "type": "Simulation",
      "description": "is_active = (counter + i) % 3 != 0  # Simulate some agents being inactive",
      "context": [
        "            # Simulate agent status updates",
        "            for i, agent in enumerate(agents):",
        "                is_active = (counter + i) % 3 != 0  # Simulate some agents being inactive",
        "                status_messages = [",
        "                    \"Idle - waiting for tasks\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "cli-main-enhanced.py",
      "line": 120,
      "type": "Mock Implementation",
      "description": "# MOCK IMPLEMENTATION - replace with actual logic",
      "context": [
        "    # response = orchestrator.process_question(question, provider)",
        "    ",
        "    # MOCK IMPLEMENTATION - replace with actual logic",
        "    model_used = provider or \"llama3.2-3b\"  # Default model",
        "    model_recommended = \"llama3.2-3b\"  # Would come from intelligent selector"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "cli-main-enhanced.py",
      "line": 124,
      "type": "Simulation",
      "description": "# Simulate processing",
      "context": [
        "    model_recommended = \"llama3.2-3b\"  # Would come from intelligent selector",
        "    ",
        "    # Simulate processing",
        "    import time",
        "    time.sleep(1)  # Simulate processing time"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "cli-main-enhanced.py",
      "line": 126,
      "type": "Simulation",
      "description": "time.sleep(1)  # Simulate processing time",
      "context": [
        "    # Simulate processing",
        "    import time",
        "    time.sleep(1)  # Simulate processing time",
        "    ",
        "    response = f\"Mock response to: {question} (using {model_used})\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "cli-main-enhanced.py",
      "line": 133,
      "type": "Mock Implementation",
      "description": "cost_usd = 0.001  # Mock cost - would be calculated from actual API usage",
      "context": [
        "    end_time = datetime.now()",
        "    latency_ms = int((end_time - start_time).total_seconds() * 1000)",
        "    cost_usd = 0.001  # Mock cost - would be calculated from actual API usage",
        "    ",
        "    # Track the task"
      ],
      "complexity": "Low",
      "priority": 5
    },
    {
      "file": "cli-main-enhanced.py",
      "line": 164,
      "type": "Mock Implementation",
      "description": "# Mock code generation",
      "context": [
        "    model_recommended = \"qwen2.5-coder:7b\"",
        "    ",
        "    # Mock code generation",
        "    import time",
        "    time.sleep(2)  # Simulate processing"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "cli-main-enhanced.py",
      "line": 166,
      "type": "Simulation",
      "description": "time.sleep(2)  # Simulate processing",
      "context": [
        "    # Mock code generation",
        "    import time",
        "    time.sleep(2)  # Simulate processing",
        "    ",
        "    code_output = f'''# Generated code for: {description}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "cli-main-enhanced.py",
      "line": 211,
      "type": "Mock Implementation",
      "description": "# Mock pipeline execution",
      "context": [
        "    model_recommended = \"llama3.2-3b\"",
        "    ",
        "    # Mock pipeline execution",
        "    import time",
        "    time.sleep(3)  # Simulate complex processing"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "cli-main-enhanced.py",
      "line": 213,
      "type": "Simulation",
      "description": "time.sleep(3)  # Simulate complex processing",
      "context": [
        "    # Mock pipeline execution",
        "    import time",
        "    time.sleep(3)  # Simulate complex processing",
        "    ",
        "    pipeline_output = f\"Pipeline '{description}' executed successfully using {model_used}\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "integrated-api-gateway.py",
      "line": 233,
      "type": "Mock Implementation",
      "description": "cost=0.001,  # Mock cost - integrate with real cost calculation",
      "context": [
        "            model_used=request.model_preference or \"llama3.2-3b\",",
        "            model_recommended=\"llama3.2-3b\",",
        "            cost=0.001,  # Mock cost - integrate with real cost calculation",
        "            latency=1000,  # Mock latency",
        "            context=request.context"
      ],
      "complexity": "Low",
      "priority": 5
    },
    {
      "file": "integrated-api-gateway.py",
      "line": 234,
      "type": "Mock Implementation",
      "description": "latency=1000,  # Mock latency",
      "context": [
        "            model_recommended=\"llama3.2-3b\",",
        "            cost=0.001,  # Mock cost - integrate with real cost calculation",
        "            latency=1000,  # Mock latency",
        "            context=request.context",
        "        )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "integrated-api-gateway.py",
      "line": 290,
      "type": "Simulation",
      "description": "# Simulate task processing - integrate with real agent_executor",
      "context": [
        "    \"\"\"",
        "    try:",
        "        # Simulate task processing - integrate with real agent_executor",
        "        await asyncio.sleep(2)",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "integrated-agent-orchestrator.py",
      "line": 347,
      "type": "Simulation",
      "description": "# Simulate execution - integrate with real agent_executor",
      "context": [
        "        orchestration = orchestrator.active_orchestrations[orchestration_id]",
        "        ",
        "        # Simulate execution - integrate with real agent_executor",
        "        await asyncio.sleep(5)",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "project-orchestrator.py",
      "line": 720,
      "type": "Simulation",
      "description": "# Simulate task execution (in real implementation would delegate to agents)",
      "context": [
        "        self.logger.info(f\"Started task {task_id} in project {project_id}\")",
        "        ",
        "        # Simulate task execution (in real implementation would delegate to agents)",
        "        asyncio.create_task(self._simulate_task_execution(project_id, task_id))",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "project-orchestrator.py",
      "line": 721,
      "type": "Simulation",
      "description": "asyncio.create_task(self._simulate_task_execution(project_id, task_id))",
      "context": [
        "        ",
        "        # Simulate task execution (in real implementation would delegate to agents)",
        "        asyncio.create_task(self._simulate_task_execution(project_id, task_id))",
        "        ",
        "        return True"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "project-orchestrator.py",
      "line": 725,
      "type": "Mock Method",
      "description": "async def _simulate_task_execution(self, project_id: str, task_id: str):",
      "context": [
        "        return True",
        "    ",
        "    async def _simulate_task_execution(self, project_id: str, task_id: str):",
        "        \"\"\"Simulate task execution - replace with real agent execution\"\"\"",
        "        "
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "project-orchestrator.py",
      "line": 726,
      "type": "Simulation",
      "description": "\"\"\"Simulate task execution - replace with real agent execution\"\"\"",
      "context": [
        "    ",
        "    async def _simulate_task_execution(self, project_id: str, task_id: str):",
        "        \"\"\"Simulate task execution - replace with real agent execution\"\"\"",
        "        ",
        "        project = self.get_project(project_id)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "project-orchestrator.py",
      "line": 735,
      "type": "Simulation",
      "description": "# Simulate progress updates",
      "context": [
        "        ",
        "        try:",
        "            # Simulate progress updates",
        "            for progress in [25, 50, 75, 100]:",
        "                await asyncio.sleep(task.estimated_duration * 0.25 * 60 / 60)  # Scale to seconds"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "ai-decision-system.py",
      "line": 1171,
      "type": "Simulation",
      "description": "# Simulate human decision (sometimes agree, sometimes override)",
      "context": [
        "        print(f\"   \ud83d\udca1 Reasoning: {recommendation.reasoning}\")",
        "        ",
        "        # Simulate human decision (sometimes agree, sometimes override)",
        "        if i % 3 == 0:  # Override every 3rd recommendation",
        "            human_choice = recommendation.alternatives[0][0] if recommendation.alternatives else recommendation.recommended_model"
      ],
      "complexity": "High",
      "priority": 3
    },
    {
      "file": "ai-decision-system.py",
      "line": 1190,
      "type": "Simulation",
      "description": "# Simulate outcome",
      "context": [
        "            print(f\"   \u2705 Human Agreed\")",
        "        ",
        "        # Simulate outcome",
        "        simulated_outcome = {",
        "            'cost': recommendation.expected_cost * (0.8 + 0.4 * (i / len(test_requests))),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "ai-decision-system.py",
      "line": 1191,
      "type": "Simulation",
      "description": "simulated_outcome = {",
      "context": [
        "        ",
        "        # Simulate outcome",
        "        simulated_outcome = {",
        "            'cost': recommendation.expected_cost * (0.8 + 0.4 * (i / len(test_requests))),",
        "            'duration': recommendation.expected_duration * (0.9 + 0.2 * (i / len(test_requests))),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "ai-decision-system.py",
      "line": 1198,
      "type": "Simulation",
      "description": "system.record_task_outcome(decision_id, simulated_outcome, feedback_score)",
      "context": [
        "        feedback_score = 4 + (i % 2)  # Alternate between 4 and 5",
        "        ",
        "        system.record_task_outcome(decision_id, simulated_outcome, feedback_score)",
        "        decisions.append(decision_id)",
        "        "
      ],
      "complexity": "High",
      "priority": 3
    },
    {
      "file": "agent-zero-v1-complete.py",
      "line": 448,
      "type": "Simulation",
      "description": "await asyncio.sleep(2)  # Simulate execution time",
      "context": [
        "            # Step 5: Monitor execution (simplified for demo)",
        "            # In a real system, this would be handled by the ongoing monitoring",
        "            await asyncio.sleep(2)  # Simulate execution time",
        "            ",
        "            # Step 6: Get project results"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone.py",
      "line": 29,
      "type": "Mock Class",
      "description": "# MOCK/FALLBACK CLASSES FOR MISSING DEPENDENCIES",
      "context": [
        "",
        "# ============================================================================",
        "# MOCK/FALLBACK CLASSES FOR MISSING DEPENDENCIES",
        "# ============================================================================",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone.py",
      "line": 32,
      "type": "Mock Class",
      "description": "class MockSimpleTracker:",
      "context": [
        "# ============================================================================",
        "",
        "class MockSimpleTracker:",
        "    \"\"\"Mock implementation of SimpleTracker for standalone operation\"\"\"",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone.py",
      "line": 49,
      "type": "Mock Class",
      "description": "class MockBusinessRequirementsParser:",
      "context": [
        "        return DailyStats()",
        "",
        "class MockBusinessRequirementsParser:",
        "    \"\"\"Mock implementation for Business Requirements Parser\"\"\"",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone.py",
      "line": 53,
      "type": "Mock Class",
      "description": "class MockIntent:",
      "context": [
        "    ",
        "    def parse_intent(self, text):",
        "        class MockIntent:",
        "            def __init__(self):",
        "                self.primary_action = MockIntentType.CREATE if 'create' in text.lower() else MockIntentType.ANALYZE"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone.py",
      "line": 62,
      "type": "Mock Implementation",
      "description": "return MockIntent()",
      "context": [
        "                self.context = {'original_request': text}",
        "        ",
        "        return MockIntent()",
        "",
        "class MockIntentType(Enum):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone.py",
      "line": 64,
      "type": "Mock Class",
      "description": "class MockIntentType(Enum):",
      "context": [
        "        return MockIntent()",
        "",
        "class MockIntentType(Enum):",
        "    CREATE = \"create\"",
        "    ANALYZE = \"analyze\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone.py",
      "line": 70,
      "type": "Mock Class",
      "description": "class MockComplexityLevel(Enum):",
      "context": [
        "    GENERATE = \"generate\"",
        "",
        "class MockComplexityLevel(Enum):",
        "    SIMPLE = \"simple\"",
        "    MODERATE = \"moderate\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone.py",
      "line": 76,
      "type": "Mock Class",
      "description": "class MockFeedbackLoopEngine:",
      "context": [
        "    ENTERPRISE = \"enterprise\"",
        "",
        "class MockFeedbackLoopEngine:",
        "    \"\"\"Mock implementation for Feedback Loop Engine\"\"\"",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone.py",
      "line": 326,
      "type": "Simulation",
      "description": "# Simulate task execution",
      "context": [
        "        project.started_at = datetime.now()",
        "        ",
        "        # Simulate task execution",
        "        for task in project.tasks.values():",
        "            task.status = TaskStatus.RUNNING"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone.py",
      "line": 536,
      "type": "Mock Implementation",
      "description": "# Mock cost data",
      "context": [
        "        output.append(f\"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}\")",
        "        ",
        "        # Mock cost data",
        "        daily_cost = 0.15",
        "        total_cost = daily_cost * days"
      ],
      "complexity": "Low",
      "priority": 5
    },
    {
      "file": "agent-zero-v1-standalone-fixed.py",
      "line": 27,
      "type": "Mock Class",
      "description": "# MOCK/FALLBACK CLASSES FOR MISSING DEPENDENCIES",
      "context": [
        "",
        "# ============================================================================",
        "# MOCK/FALLBACK CLASSES FOR MISSING DEPENDENCIES",
        "# ============================================================================",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone-fixed.py",
      "line": 30,
      "type": "Mock Class",
      "description": "class MockSimpleTracker:",
      "context": [
        "# ============================================================================",
        "",
        "class MockSimpleTracker:",
        "    \"\"\"Mock implementation of SimpleTracker for standalone operation\"\"\"",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone-fixed.py",
      "line": 47,
      "type": "Mock Class",
      "description": "class MockBusinessRequirementsParser:",
      "context": [
        "        return DailyStats()",
        "",
        "class MockBusinessRequirementsParser:",
        "    \"\"\"Mock implementation for Business Requirements Parser\"\"\"",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone-fixed.py",
      "line": 51,
      "type": "Mock Class",
      "description": "class MockIntent:",
      "context": [
        "    ",
        "    def parse_intent(self, text):",
        "        class MockIntent:",
        "            def __init__(self):",
        "                self.primary_action = MockIntentType.CREATE if 'create' in text.lower() else MockIntentType.ANALYZE"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone-fixed.py",
      "line": 60,
      "type": "Mock Implementation",
      "description": "return MockIntent()",
      "context": [
        "                self.context = {'original_request': text}",
        "        ",
        "        return MockIntent()",
        "",
        "class MockIntentType(Enum):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone-fixed.py",
      "line": 62,
      "type": "Mock Class",
      "description": "class MockIntentType(Enum):",
      "context": [
        "        return MockIntent()",
        "",
        "class MockIntentType(Enum):",
        "    CREATE = \"create\"",
        "    ANALYZE = \"analyze\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone-fixed.py",
      "line": 68,
      "type": "Mock Class",
      "description": "class MockComplexityLevel(Enum):",
      "context": [
        "    GENERATE = \"generate\"",
        "",
        "class MockComplexityLevel(Enum):",
        "    SIMPLE = \"simple\"",
        "    MODERATE = \"moderate\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone-fixed.py",
      "line": 74,
      "type": "Mock Class",
      "description": "class MockFeedbackLoopEngine:",
      "context": [
        "    ENTERPRISE = \"enterprise\"",
        "",
        "class MockFeedbackLoopEngine:",
        "    \"\"\"Mock implementation for Feedback Loop Engine\"\"\"",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone-fixed.py",
      "line": 324,
      "type": "Simulation",
      "description": "# Simulate task execution",
      "context": [
        "        project.started_at = datetime.now()",
        "        ",
        "        # Simulate task execution",
        "        for task in project.tasks.values():",
        "            task.status = TaskStatus.RUNNING"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1-standalone-fixed.py",
      "line": 534,
      "type": "Mock Implementation",
      "description": "# Mock cost data",
      "context": [
        "        output.append(f\"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}\")",
        "        ",
        "        # Mock cost data",
        "        daily_cost = 0.15",
        "        total_cost = daily_cost * days"
      ],
      "complexity": "Low",
      "priority": 5
    },
    {
      "file": "enhanced-cli-main.py",
      "line": 95,
      "type": "Simulation",
      "description": "# Simulate processing with progress",
      "context": [
        "    model_used = recommended_model  # In real implementation, this might differ",
        "    ",
        "    # Simulate processing with progress",
        "    with Progress(",
        "        SpinnerColumn(),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "enhanced-cli-main.py",
      "line": 104,
      "type": "Simulation",
      "description": "time.sleep(1)  # Simulate processing",
      "context": [
        "        ",
        "        import time",
        "        time.sleep(1)  # Simulate processing",
        "    ",
        "    # Mock response - in real implementation this would call the actual model"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "enhanced-cli-main.py",
      "line": 106,
      "type": "Mock Implementation",
      "description": "# Mock response - in real implementation this would call the actual model",
      "context": [
        "        time.sleep(1)  # Simulate processing",
        "    ",
        "    # Mock response - in real implementation this would call the actual model",
        "    response = f\"\"\"Based on your question \"{question}\", here's a comprehensive analysis:",
        ""
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "kaizen-knowledge-graph.py",
      "line": 247,
      "type": "Mock Implementation",
      "description": "# Mock mode - just log",
      "context": [
        "                return self._write_task_to_neo4j(task_node, model_used, outcome_node)",
        "            else:",
        "                # Mock mode - just log",
        "                self.logger.info(f\"Mock: Would ingest task {task_id} to Neo4j\")",
        "                return True"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "kaizen-knowledge-graph.py",
      "line": 414,
      "type": "Mock Implementation",
      "description": "return self._mock_similar_tasks(task_id, limit)",
      "context": [
        "        ",
        "        if not self.neo4j_connected:",
        "            return self._mock_similar_tasks(task_id, limit)",
        "        ",
        "        try:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "kaizen-knowledge-graph.py",
      "line": 414,
      "type": "Mock Implementation",
      "description": "return self._mock_similar_tasks(task_id, limit)",
      "context": [
        "        ",
        "        if not self.neo4j_connected:",
        "            return self._mock_similar_tasks(task_id, limit)",
        "        ",
        "        try:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "kaizen-knowledge-graph.py",
      "line": 523,
      "type": "Mock Implementation",
      "description": "return self._mock_model_performance()",
      "context": [
        "        ",
        "        if not self.neo4j_connected:",
        "            return self._mock_model_performance()",
        "        ",
        "        try:"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "kaizen-knowledge-graph.py",
      "line": 523,
      "type": "Mock Implementation",
      "description": "return self._mock_model_performance()",
      "context": [
        "        ",
        "        if not self.neo4j_connected:",
        "            return self._mock_model_performance()",
        "        ",
        "        try:"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "kaizen-knowledge-graph.py",
      "line": 843,
      "type": "Mock Implementation",
      "description": "insights.update(self._mock_cross_project_insights())",
      "context": [
        "        # Add some mock insights if Neo4j not available",
        "        if not self.neo4j_connected:",
        "            insights.update(self._mock_cross_project_insights())",
        "        ",
        "        return insights"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "kaizen-knowledge-graph.py",
      "line": 849,
      "type": "Mock Method",
      "description": "def _mock_similar_tasks(self, task_id: str, limit: int) -> List[Dict[str, Any]]:",
      "context": [
        "    # === Mock implementations for testing without Neo4j ===",
        "    ",
        "    def _mock_similar_tasks(self, task_id: str, limit: int) -> List[Dict[str, Any]]:",
        "        \"\"\"Mock implementation of similar tasks finder\"\"\"",
        "        return ["
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "kaizen-knowledge-graph.py",
      "line": 849,
      "type": "Mock Method",
      "description": "def _mock_similar_tasks(self, task_id: str, limit: int) -> List[Dict[str, Any]]:",
      "context": [
        "    # === Mock implementations for testing without Neo4j ===",
        "    ",
        "    def _mock_similar_tasks(self, task_id: str, limit: int) -> List[Dict[str, Any]]:",
        "        \"\"\"Mock implementation of similar tasks finder\"\"\"",
        "        return ["
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "kaizen-knowledge-graph.py",
      "line": 863,
      "type": "Mock Method",
      "description": "def _mock_model_performance(self) -> Dict[str, Dict[str, Any]]:",
      "context": [
        "        ]",
        "    ",
        "    def _mock_model_performance(self) -> Dict[str, Dict[str, Any]]:",
        "        \"\"\"Mock implementation of model performance analysis\"\"\"",
        "        return {"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "kaizen-knowledge-graph.py",
      "line": 863,
      "type": "Mock Method",
      "description": "def _mock_model_performance(self) -> Dict[str, Dict[str, Any]]:",
      "context": [
        "        ]",
        "    ",
        "    def _mock_model_performance(self) -> Dict[str, Dict[str, Any]]:",
        "        \"\"\"Mock implementation of model performance analysis\"\"\"",
        "        return {"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "kaizen-knowledge-graph.py",
      "line": 881,
      "type": "Mock Method",
      "description": "def _mock_cross_project_insights(self) -> Dict[str, Any]:",
      "context": [
        "        }",
        "    ",
        "    def _mock_cross_project_insights(self) -> Dict[str, Any]:",
        "        \"\"\"Mock cross-project insights\"\"\"",
        "        return {"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "kaizen-knowledge-graph.py",
      "line": 881,
      "type": "Mock Method",
      "description": "def _mock_cross_project_insights(self) -> Dict[str, Any]:",
      "context": [
        "        }",
        "    ",
        "    def _mock_cross_project_insights(self) -> Dict[str, Any]:",
        "        \"\"\"Mock cross-project insights\"\"\"",
        "        return {"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "enhanced-feedback-loop.py",
      "line": 680,
      "type": "Mock Implementation",
      "description": "# Mock implementation - w przysz\u0142o\u015bci mo\u017ce by\u0107 rozszerzone o tracking predictions",
      "context": [
        "        \"\"\"Pobiera histori\u0119 predictions dla modelu\"\"\"",
        "        ",
        "        # Mock implementation - w przysz\u0142o\u015bci mo\u017ce by\u0107 rozszerzone o tracking predictions",
        "        return [",
        "            {"
      ],
      "complexity": "High",
      "priority": 3
    },
    {
      "file": "v2-integration-manager.py",
      "line": 356,
      "type": "Mock Implementation",
      "description": "# Mock implementations for development",
      "context": [
        "]",
        "",
        "# Mock implementations for development",
        "class IntelligentModelSelector:",
        "    def __init__(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "v2-integration-manager.py",
      "line": 581,
      "type": "Mock Implementation",
      "description": "# Mock response",
      "context": [
        "        recommended_model = model or \"llama3.2-3b\"",
        "    ",
        "    # Mock response",
        "    response = f\"Mock response using {recommended_model}\\\\n\\\\nThis demonstrates V2.0 Intelligence Layer integration.\\\\nThe system selected {recommended_model} based on {priority} optimization.\"",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "analytics-dashboard-api.py",
      "line": 723,
      "type": "Simulation",
      "description": "await asyncio.sleep(2)  # Simulate processing time",
      "context": [
        "        # In production, this would refresh cached data",
        "        # For now, just log the refresh",
        "        await asyncio.sleep(2)  # Simulate processing time",
        "        ",
        "        logger.info(\"\u2705 Analytics cache refreshed\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "advanced-cli-commands.py",
      "line": 536,
      "type": "Simulation",
      "description": "# Simulate deployment time",
      "context": [
        "                    progress.update(task, description=f\"Deploying {step}...\")",
        "                    progress.advance(task)",
        "                    # Simulate deployment time",
        "                    import time",
        "                    time.sleep(0.5)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "cli-production.py",
      "line": 389,
      "type": "Simulation",
      "description": "# Simulate different types of AI tasks",
      "context": [
        "        tracker = EnhancedSimpleTracker()",
        "        ",
        "        # Simulate different types of AI tasks",
        "        demo_scenarios = [",
        "            (\"api_dev_001\", \"api_development\", \"llama3.2-3b\", 0.92, 0.015, 1200, \"REST API endpoint development\"),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "enhanced-cli-commands.py",
      "line": 342,
      "type": "Mock Implementation",
      "description": "# Mock recommendations based on tech stack",
      "context": [
        "    console.print(f\"\ud83d\udd0d [bold cyan]Recommendations for: {', '.join(tech_stack)}[/bold cyan]\")",
        "    ",
        "    # Mock recommendations based on tech stack",
        "    recommendations = _get_tech_recommendations(tech_stack)",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "dynamic-task-prioritization-demo.py",
      "line": 540,
      "type": "Mock Method",
      "description": "async def simulate_crisis_scenario(self, scenario_name: str) -> Dict[str, Any]:",
      "context": [
        "        return mapping.get(rule_id, PriorityTrigger.BUSINESS_CRITICAL)",
        "    ",
        "    async def simulate_crisis_scenario(self, scenario_name: str) -> Dict[str, Any]:",
        "        \"\"\"Simulate crisis scenario to test system response\"\"\"",
        "        logger.info(f\"\ud83d\udea8 Simulating crisis scenario: {scenario_name}\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "dynamic-task-prioritization-demo.py",
      "line": 541,
      "type": "Simulation",
      "description": "\"\"\"Simulate crisis scenario to test system response\"\"\"",
      "context": [
        "    ",
        "    async def simulate_crisis_scenario(self, scenario_name: str) -> Dict[str, Any]:",
        "        \"\"\"Simulate crisis scenario to test system response\"\"\"",
        "        logger.info(f\"\ud83d\udea8 Simulating crisis scenario: {scenario_name}\")",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "dynamic-task-prioritization-demo.py",
      "line": 547,
      "type": "Simulation",
      "description": "# Simulate approaching critical deadline",
      "context": [
        "        ",
        "        if scenario_name == \"critical_deadline\":",
        "            # Simulate approaching critical deadline",
        "            for task in self.tasks.values():",
        "                if task.task_type in [TaskType.TESTING, TaskType.DEPLOYMENT]:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "dynamic-task-prioritization-demo.py",
      "line": 553,
      "type": "Simulation",
      "description": "# Simulate key agent becoming unavailable",
      "context": [
        "        ",
        "        elif scenario_name == \"agent_unavailable\":",
        "            # Simulate key agent becoming unavailable",
        "            if self.agents:",
        "                key_agent = list(self.agents.keys())[0]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "dynamic-task-prioritization-demo.py",
      "line": 559,
      "type": "Simulation",
      "description": "# Simulate security alert",
      "context": [
        "        ",
        "        elif scenario_name == \"security_alert\":",
        "            # Simulate security alert",
        "            self.business_context.security_alert_level = 5",
        "            for task in self.tasks.values():"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "dynamic-task-prioritization-demo.py",
      "line": 734,
      "type": "Simulation",
      "description": "# Make security audit critical (simulate security concern)",
      "context": [
        "    manager.business_context.market_pressure_level = 4",
        "    ",
        "    # Make security audit critical (simulate security concern)",
        "    security_task = manager.tasks[4]",
        "    security_task.description += \" - CRITICAL security vulnerability found\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "dynamic-task-prioritization-demo.py",
      "line": 750,
      "type": "Simulation",
      "description": "# Simulate senior backend agent getting overloaded",
      "context": [
        "    print(\"-\" * 60)",
        "    ",
        "    # Simulate senior backend agent getting overloaded",
        "    manager.agents[\"senior_backend_001\"].current_workload = 45.0  # Overload",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "dynamic-task-prioritization-demo.py",
      "line": 768,
      "type": "Simulation",
      "description": "result = await manager.simulate_crisis_scenario(scenario)",
      "context": [
        "    ",
        "    for scenario in crisis_scenarios:",
        "        result = await manager.simulate_crisis_scenario(scenario)",
        "        print(f\"\\n\ud83d\udea8 {scenario.replace('_', ' ').title()}:\")",
        "        print(f\"  Priority Changes: {result['priority_changes']}\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (11).py",
      "line": 560,
      "type": "Mock Method",
      "description": "async def simulate_crisis_scenario(self, scenario_name: str) -> Dict[str, Any]:",
      "context": [
        "        return mapping.get(rule_id, PriorityTrigger.BUSINESS_CRITICAL)",
        "    ",
        "    async def simulate_crisis_scenario(self, scenario_name: str) -> Dict[str, Any]:",
        "        \"\"\"Simulate crisis scenario to test system response\"\"\"",
        "        logger.info(f\"\ud83d\udea8 Simulating crisis scenario: {scenario_name}\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "script (11).py",
      "line": 561,
      "type": "Simulation",
      "description": "\"\"\"Simulate crisis scenario to test system response\"\"\"",
      "context": [
        "    ",
        "    async def simulate_crisis_scenario(self, scenario_name: str) -> Dict[str, Any]:",
        "        \"\"\"Simulate crisis scenario to test system response\"\"\"",
        "        logger.info(f\"\ud83d\udea8 Simulating crisis scenario: {scenario_name}\")",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (11).py",
      "line": 567,
      "type": "Simulation",
      "description": "# Simulate approaching critical deadline",
      "context": [
        "        ",
        "        if scenario_name == \"critical_deadline\":",
        "            # Simulate approaching critical deadline",
        "            for task in self.tasks.values():",
        "                if task.task_type in [TaskType.TESTING, TaskType.DEVOPS]:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (11).py",
      "line": 573,
      "type": "Simulation",
      "description": "# Simulate key agent becoming unavailable",
      "context": [
        "        ",
        "        elif scenario_name == \"agent_unavailable\":",
        "            # Simulate key agent becoming unavailable",
        "            if self.agents:",
        "                key_agent = list(self.agents.keys())[0]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (11).py",
      "line": 579,
      "type": "Simulation",
      "description": "# Simulate security alert",
      "context": [
        "        ",
        "        elif scenario_name == \"security_alert\":",
        "            # Simulate security alert",
        "            self.business_context.security_alert_level = 5",
        "            for task in self.tasks.values():"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (11).py",
      "line": 754,
      "type": "Simulation",
      "description": "# Make security audit critical (simulate security concern)",
      "context": [
        "    manager.business_context.market_pressure_level = 4",
        "    ",
        "    # Make security audit critical (simulate security concern)",
        "    security_task = manager.tasks[4]",
        "    security_task.description += \" - CRITICAL security vulnerability found\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (11).py",
      "line": 770,
      "type": "Simulation",
      "description": "# Simulate senior backend agent getting overloaded",
      "context": [
        "    print(\"-\" * 60)",
        "    ",
        "    # Simulate senior backend agent getting overloaded",
        "    manager.agents[\"senior_backend_001\"].current_workload = 45.0  # Overload",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (11).py",
      "line": 788,
      "type": "Simulation",
      "description": "result = await manager.simulate_crisis_scenario(scenario)",
      "context": [
        "    ",
        "    for scenario in crisis_scenarios:",
        "        result = await manager.simulate_crisis_scenario(scenario)",
        "        print(f\"\\\\n\ud83d\udea8 {scenario.replace('_', ' ').title()}:\")",
        "        print(f\"  Priority Changes: {result['priority_changes']}\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point3-dynamic-task-prioritization-fixed.py",
      "line": 559,
      "type": "Mock Method",
      "description": "async def simulate_crisis_scenario(self, scenario_name: str) -> Dict[str, Any]:",
      "context": [
        "        return mapping.get(rule_id, PriorityTrigger.BUSINESS_CRITICAL)",
        "",
        "    async def simulate_crisis_scenario(self, scenario_name: str) -> Dict[str, Any]:",
        "        \"\"\"Simulate crisis scenario to test system response\"\"\"",
        "        logger.info(f\"\ud83d\udea8 Simulating crisis scenario: {scenario_name}\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "point3-dynamic-task-prioritization-fixed.py",
      "line": 560,
      "type": "Simulation",
      "description": "\"\"\"Simulate crisis scenario to test system response\"\"\"",
      "context": [
        "",
        "    async def simulate_crisis_scenario(self, scenario_name: str) -> Dict[str, Any]:",
        "        \"\"\"Simulate crisis scenario to test system response\"\"\"",
        "        logger.info(f\"\ud83d\udea8 Simulating crisis scenario: {scenario_name}\")",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point3-dynamic-task-prioritization-fixed.py",
      "line": 566,
      "type": "Simulation",
      "description": "# Simulate approaching critical deadline",
      "context": [
        "",
        "        if scenario_name == \"critical_deadline\":",
        "            # Simulate approaching critical deadline",
        "            for task in self.tasks.values():",
        "                if task.task_type in [TaskType.TESTING, TaskType.DEVOPS]:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point3-dynamic-task-prioritization-fixed.py",
      "line": 572,
      "type": "Simulation",
      "description": "# Simulate key agent becoming unavailable",
      "context": [
        "",
        "        elif scenario_name == \"agent_unavailable\":",
        "            # Simulate key agent becoming unavailable",
        "            if self.agents:",
        "                key_agent = list(self.agents.keys())[0]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point3-dynamic-task-prioritization-fixed.py",
      "line": 578,
      "type": "Simulation",
      "description": "# Simulate security alert",
      "context": [
        "",
        "        elif scenario_name == \"security_alert\":",
        "            # Simulate security alert",
        "            self.business_context.security_alert_level = 5",
        "            for task in self.tasks.values():"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point3-dynamic-task-prioritization-fixed.py",
      "line": 753,
      "type": "Simulation",
      "description": "# Make security audit critical (simulate security concern)",
      "context": [
        "    manager.business_context.market_pressure_level = 4",
        "",
        "    # Make security audit critical (simulate security concern)",
        "    security_task = manager.tasks[4]",
        "    security_task.description += \" - CRITICAL security vulnerability found\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point3-dynamic-task-prioritization-fixed.py",
      "line": 769,
      "type": "Simulation",
      "description": "# Simulate senior backend agent getting overloaded",
      "context": [
        "    print(\"-\" * 60)",
        "",
        "    # Simulate senior backend agent getting overloaded",
        "    manager.agents[\"senior_backend_001\"].current_workload = 45.0  # Overload",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point3-dynamic-task-prioritization-fixed.py",
      "line": 787,
      "type": "Simulation",
      "description": "result = await manager.simulate_crisis_scenario(scenario)",
      "context": [
        "",
        "    for scenario in crisis_scenarios:",
        "        result = await manager.simulate_crisis_scenario(scenario)",
        "        print(f\"\\n\ud83d\udea8 {scenario.replace('_', ' ').title()}:\")",
        "        print(f\"  Priority Changes: {result['priority_changes']}\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (12).py",
      "line": 548,
      "type": "Simulation",
      "description": "# Simulate historical data",
      "context": [
        "    manager = PredictiveResourceManager()",
        "    ",
        "    # Simulate historical data",
        "    print(\"\\\\n\ud83d\udcca Simulating historical resource usage...\")",
        "    base_time = datetime.now() - timedelta(days=7)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (12).py",
      "line": 556,
      "type": "Simulation",
      "description": "# Simulate different usage patterns for different resources",
      "context": [
        "            timestamp = base_time + timedelta(days=day, hours=hour)",
        "            ",
        "            # Simulate different usage patterns for different resources",
        "            for resource_type in ResourceType:",
        "                # Create realistic usage patterns"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (13).py",
      "line": 633,
      "type": "Simulation",
      "description": "# Simulate performance data",
      "context": [
        "    await engine.initialize_clients()",
        "    ",
        "    # Simulate performance data",
        "    print(\"\\\\n\ud83d\udcca Simulating performance data...\")",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (13).py",
      "line": 643,
      "type": "Simulation",
      "description": "# Simulate performance with some agents improving over time",
      "context": [
        "        task_type = task_types[i % len(task_types)]",
        "        ",
        "        # Simulate performance with some agents improving over time",
        "        base_performance = 60 + np.random.normal(0, 10)",
        "        if agent == \"backend_agent_001\":"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (14).py",
      "line": 149,
      "type": "Simulation",
      "description": "# Simulate data",
      "context": [
        "    engine = AdaptiveLearningEngine()",
        "    ",
        "    # Simulate data",
        "    agents = [\"backend_001\", \"frontend_002\", \"devops_003\"]",
        "    for i in range(30):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (14).py",
      "line": 355,
      "type": "Simulation",
      "description": "# Simulate metric collection (in real system, these would be actual metrics)",
      "context": [
        "        current_time = datetime.now()",
        "        ",
        "        # Simulate metric collection (in real system, these would be actual metrics)",
        "        metrics = [",
        "            MonitoringMetric("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (14).py",
      "line": 362,
      "type": "Simulation",
      "description": "value=50 + (time.time() % 30),  # Simulated CPU usage",
      "context": [
        "                component=\"system\",",
        "                metric_name=\"cpu_usage\",",
        "                value=50 + (time.time() % 30),  # Simulated CPU usage",
        "                threshold_min=0.0,",
        "                threshold_max=85.0"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (14).py",
      "line": 492,
      "type": "Simulation",
      "description": "execution_time=0.5  # Simulated execution time",
      "context": [
        "            description=f\"Auto-correction for {alert.title}\",",
        "            success=correction_success,",
        "            execution_time=0.5  # Simulated execution time",
        "        )",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (14).py",
      "line": 526,
      "type": "Simulation",
      "description": "# Simulate parameter adjustment",
      "context": [
        "        try:",
        "            if correction_type == CorrectionType.PARAMETER_ADJUSTMENT:",
        "                # Simulate parameter adjustment",
        "                logger.info(f\"\ud83d\udd27 Adjusting parameters for {alert.component}\")",
        "                await asyncio.sleep(0.1)  # Simulate work"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (14).py",
      "line": 528,
      "type": "Simulation",
      "description": "await asyncio.sleep(0.1)  # Simulate work",
      "context": [
        "                # Simulate parameter adjustment",
        "                logger.info(f\"\ud83d\udd27 Adjusting parameters for {alert.component}\")",
        "                await asyncio.sleep(0.1)  # Simulate work",
        "                return True",
        "                "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (14).py",
      "line": 532,
      "type": "Simulation",
      "description": "# Simulate load balancing",
      "context": [
        "                ",
        "            elif correction_type == CorrectionType.LOAD_BALANCING:",
        "                # Simulate load balancing",
        "                logger.info(f\"\u2696\ufe0f Balancing load for {alert.component}\")",
        "                await asyncio.sleep(0.2)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (14).py",
      "line": 538,
      "type": "Simulation",
      "description": "# Simulate resource reallocation",
      "context": [
        "                ",
        "            elif correction_type == CorrectionType.RESOURCE_REALLOCATION:",
        "                # Simulate resource reallocation",
        "                logger.info(f\"\ud83d\udd04 Reallocating resources for {alert.component}\")",
        "                await asyncio.sleep(0.15)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (14).py",
      "line": 544,
      "type": "Simulation",
      "description": "# Simulate agent restart",
      "context": [
        "                ",
        "            elif correction_type == CorrectionType.AGENT_RESTART:",
        "                # Simulate agent restart",
        "                logger.info(f\"\ud83d\udd04 Restarting agent {alert.component}\")",
        "                await asyncio.sleep(0.5)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "script (14).py",
      "line": 550,
      "type": "Simulation",
      "description": "# Simulate emergency scaling",
      "context": [
        "                ",
        "            elif correction_type == CorrectionType.EMERGENCY_SCALING:",
        "                # Simulate emergency scaling",
        "                logger.info(f\"\ud83d\ude80 Emergency scaling for {alert.component}\")",
        "                await asyncio.sleep(0.3)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point5-adaptive-learning.py",
      "line": 145,
      "type": "Simulation",
      "description": "# Simulate data",
      "context": [
        "    engine = AdaptiveLearningEngine()",
        "",
        "    # Simulate data",
        "    agents = [\"backend_001\", \"frontend_002\", \"devops_003\"]",
        "    for i in range(30):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point6-realtime-monitoring.py",
      "line": 154,
      "type": "Simulation",
      "description": "# Simulate metric collection (in real system, these would be actual metrics)",
      "context": [
        "        current_time = datetime.now()",
        "",
        "        # Simulate metric collection (in real system, these would be actual metrics)",
        "        metrics = [",
        "            MonitoringMetric("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point6-realtime-monitoring.py",
      "line": 161,
      "type": "Simulation",
      "description": "value=50 + (time.time() % 30),  # Simulated CPU usage",
      "context": [
        "                component=\"system\",",
        "                metric_name=\"cpu_usage\",",
        "                value=50 + (time.time() % 30),  # Simulated CPU usage",
        "                threshold_min=0.0,",
        "                threshold_max=85.0"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point6-realtime-monitoring.py",
      "line": 291,
      "type": "Simulation",
      "description": "execution_time=0.5  # Simulated execution time",
      "context": [
        "            description=f\"Auto-correction for {alert.title}\",",
        "            success=correction_success,",
        "            execution_time=0.5  # Simulated execution time",
        "        )",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point6-realtime-monitoring.py",
      "line": 325,
      "type": "Simulation",
      "description": "# Simulate parameter adjustment",
      "context": [
        "        try:",
        "            if correction_type == CorrectionType.PARAMETER_ADJUSTMENT:",
        "                # Simulate parameter adjustment",
        "                logger.info(f\"\ud83d\udd27 Adjusting parameters for {alert.component}\")",
        "                await asyncio.sleep(0.1)  # Simulate work"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point6-realtime-monitoring.py",
      "line": 327,
      "type": "Simulation",
      "description": "await asyncio.sleep(0.1)  # Simulate work",
      "context": [
        "                # Simulate parameter adjustment",
        "                logger.info(f\"\ud83d\udd27 Adjusting parameters for {alert.component}\")",
        "                await asyncio.sleep(0.1)  # Simulate work",
        "                return True",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point6-realtime-monitoring.py",
      "line": 331,
      "type": "Simulation",
      "description": "# Simulate load balancing",
      "context": [
        "",
        "            elif correction_type == CorrectionType.LOAD_BALANCING:",
        "                # Simulate load balancing",
        "                logger.info(f\"\u2696\ufe0f Balancing load for {alert.component}\")",
        "                await asyncio.sleep(0.2)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point6-realtime-monitoring.py",
      "line": 337,
      "type": "Simulation",
      "description": "# Simulate resource reallocation",
      "context": [
        "",
        "            elif correction_type == CorrectionType.RESOURCE_REALLOCATION:",
        "                # Simulate resource reallocation",
        "                logger.info(f\"\ud83d\udd04 Reallocating resources for {alert.component}\")",
        "                await asyncio.sleep(0.15)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point6-realtime-monitoring.py",
      "line": 343,
      "type": "Simulation",
      "description": "# Simulate agent restart",
      "context": [
        "",
        "            elif correction_type == CorrectionType.AGENT_RESTART:",
        "                # Simulate agent restart",
        "                logger.info(f\"\ud83d\udd04 Restarting agent {alert.component}\")",
        "                await asyncio.sleep(0.5)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "point6-realtime-monitoring.py",
      "line": 349,
      "type": "Simulation",
      "description": "# Simulate emergency scaling",
      "context": [
        "",
        "            elif correction_type == CorrectionType.EMERGENCY_SCALING:",
        "                # Simulate emergency scaling",
        "                logger.info(f\"\ud83d\ude80 Emergency scaling for {alert.component}\")",
        "                await asyncio.sleep(0.3)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "master-ai-orchestrator.py",
      "line": 29,
      "type": "Mock Implementation",
      "description": "# Mock imports for development - replace with actual components",
      "context": [
        "from collections import deque",
        "",
        "# Mock imports for development - replace with actual components",
        "# from components.nlu_decomposer import NLUTaskDecomposer",
        "# from components.agent_selector import ContextAwareAgentSelector"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "master-ai-orchestrator.py",
      "line": 89,
      "type": "Mock Class",
      "description": "class MockComponent:",
      "context": [
        "    metadata: Dict[str, Any] = field(default_factory=dict)",
        "",
        "class MockComponent:",
        "    \"\"\"Base class for mock components during dry-run testing\"\"\"",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "master-ai-orchestrator.py",
      "line": 90,
      "type": "Mock Class",
      "description": "\"\"\"Base class for mock components during dry-run testing\"\"\"",
      "context": [
        "",
        "class MockComponent:",
        "    \"\"\"Base class for mock components during dry-run testing\"\"\"",
        "    ",
        "    def __init__(self, name: str):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "master-ai-orchestrator.py",
      "line": 99,
      "type": "Simulation",
      "description": "await asyncio.sleep(0.1)  # Simulate processing time",
      "context": [
        "    async def process(self, data: Any) -> Dict[str, Any]:",
        "        \"\"\"Mock processing - override in real components\"\"\"",
        "        await asyncio.sleep(0.1)  # Simulate processing time",
        "        self.processed_count += 1",
        "        self.health.last_heartbeat = datetime.now()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "master-ai-orchestrator.py",
      "line": 402,
      "type": "Mock Implementation",
      "description": "max_capacity = 100  # Mock capacity",
      "context": [
        "        \"\"\"Calculate current system load\"\"\"",
        "        active_tasks = len([t for t in self.active_tasks.values() if t.status == \"processing\"])",
        "        max_capacity = 100  # Mock capacity",
        "        return min(active_tasks / max_capacity, 1.0)",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "master-ai-orchestrator.py",
      "line": 433,
      "type": "Mock Implementation",
      "description": "\"cpu\": 0.65,  # Mock values",
      "context": [
        "        \"\"\"Get resource utilization metrics\"\"\"",
        "        return {",
        "            \"cpu\": 0.65,  # Mock values",
        "            \"memory\": 0.72,",
        "            \"network\": 0.45,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "master-integration-tests.py",
      "line": 175,
      "type": "Simulation",
      "description": "# Simulate crisis",
      "context": [
        "        initial_state = self.orchestrator.system_state",
        "        ",
        "        # Simulate crisis",
        "        await self.orchestrator.handle_crisis(",
        "            \"Component failure detected in resource planner\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-complete-integration.py",
      "line": 678,
      "type": "Simulation",
      "description": "# Simulate confidence calculation",
      "context": [
        "        avg_reassignment_confidence = 0.0",
        "        if self.reassignments:",
        "            # Simulate confidence calculation",
        "            avg_reassignment_confidence = 0.854",
        "        "
      ],
      "complexity": "Low",
      "priority": 5
    },
    {
      "file": "agent-zero-complete-integration.py",
      "line": 1271,
      "type": "Mock Implementation",
      "description": "\"completion_rate\": 0.95,  # Mock high performance",
      "context": [
        "            \"active_tasks\": len(self.active_tasks),",
        "            \"performance\": {",
        "                \"completion_rate\": 0.95,  # Mock high performance",
        "                \"avg_processing_time\": 2.5,",
        "                \"error_rate\": 0.05,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-complete-integration-bugfree.py",
      "line": 679,
      "type": "Simulation",
      "description": "# Simulate confidence calculation",
      "context": [
        "        avg_reassignment_confidence = 0.0",
        "        if self.reassignments:",
        "            # Simulate confidence calculation",
        "            avg_reassignment_confidence = 0.854",
        "        "
      ],
      "complexity": "Low",
      "priority": 5
    },
    {
      "file": "agent-zero-complete-integration-bugfree.py",
      "line": 1288,
      "type": "Mock Implementation",
      "description": "\"completion_rate\": 0.95,  # Mock high performance",
      "context": [
        "            \"active_tasks\": len(self.active_tasks),",
        "            \"performance\": {",
        "                \"completion_rate\": 0.95,  # Mock high performance",
        "                \"avg_processing_time\": 2.5,",
        "                \"error_rate\": 0.05,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "advanced-pattern-recognition.py",
      "line": 242,
      "type": "Mock Implementation",
      "description": "return await self._discover_mock_patterns()",
      "context": [
        "            if not os.path.exists(data_source):",
        "                logger.warning(f\"Data source {data_source} not found, using mock data\")",
        "                return await self._discover_mock_patterns()",
        "            ",
        "            with sqlite3.connect(data_source) as conn:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "advanced-pattern-recognition.py",
      "line": 242,
      "type": "Mock Implementation",
      "description": "return await self._discover_mock_patterns()",
      "context": [
        "            if not os.path.exists(data_source):",
        "                logger.warning(f\"Data source {data_source} not found, using mock data\")",
        "                return await self._discover_mock_patterns()",
        "            ",
        "            with sqlite3.connect(data_source) as conn:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "advanced-pattern-recognition.py",
      "line": 984,
      "type": "Mock Method",
      "description": "async def _discover_mock_patterns(self) -> List[AdvancedPattern]:",
      "context": [
        "            logger.error(f\"\u274c Failed to store pattern {pattern.id}: {e}\")",
        "    ",
        "    async def _discover_mock_patterns(self) -> List[AdvancedPattern]:",
        "        \"\"\"Generate mock patterns for demonstration when no data available\"\"\"",
        "        mock_patterns = ["
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "advanced-pattern-recognition.py",
      "line": 984,
      "type": "Mock Method",
      "description": "async def _discover_mock_patterns(self) -> List[AdvancedPattern]:",
      "context": [
        "            logger.error(f\"\u274c Failed to store pattern {pattern.id}: {e}\")",
        "    ",
        "    async def _discover_mock_patterns(self) -> List[AdvancedPattern]:",
        "        \"\"\"Generate mock patterns for demonstration when no data available\"\"\"",
        "        mock_patterns = ["
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "advanced-pattern-recognition.py",
      "line": 986,
      "type": "Mock Implementation",
      "description": "mock_patterns = [",
      "context": [
        "    async def _discover_mock_patterns(self) -> List[AdvancedPattern]:",
        "        \"\"\"Generate mock patterns for demonstration when no data available\"\"\"",
        "        mock_patterns = [",
        "            AdvancedPattern(",
        "                id=str(uuid.uuid4()),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "advanced-pattern-recognition.py",
      "line": 1102,
      "type": "Mock Implementation",
      "description": "return mock_patterns",
      "context": [
        "        ]",
        "        ",
        "        return mock_patterns",
        "    ",
        "    async def get_pattern_insights(self, "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "advanced-pattern-recognition.py",
      "line": 1102,
      "type": "Mock Implementation",
      "description": "return mock_patterns",
      "context": [
        "        ]",
        "        ",
        "        return mock_patterns",
        "    ",
        "    async def get_pattern_insights(self, "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "cli/__main__.py",
      "line": 59,
      "type": "Mock Implementation",
      "description": "# Mock response",
      "context": [
        "        recommended_model = model or \"llama3.2-3b\"",
        "    ",
        "    # Mock response",
        "    response = f\"Mock response using {recommended_model}\\n\\nThis demonstrates V2.0 Intelligence Layer integration.\\nThe system selected {recommended_model} based on {priority} optimization.\"",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "cli/advanced_commands.py",
      "line": 536,
      "type": "Simulation",
      "description": "# Simulate deployment time",
      "context": [
        "                    progress.update(task, description=f\"Deploying {step}...\")",
        "                    progress.advance(task)",
        "                    # Simulate deployment time",
        "                    import time",
        "                    time.sleep(0.5)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/ai_streaming.py",
      "line": 94,
      "type": "Simulation",
      "description": "# Simulate model loading time",
      "context": [
        "            )",
        "            ",
        "            # Simulate model loading time",
        "            for i in range(3):",
        "                if self.cancel_requested:"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "shared/simple_dashboard.py",
      "line": 96,
      "type": "Mock Method",
      "description": "def simulate_generation(self):",
      "context": [
        "        input(\"\u23ce Naci\u015bnij Enter...\")",
        "    ",
        "    def simulate_generation(self):",
        "        if not self.agents:",
        "            print(\"\u274c Brak agent\u00f3w do generacji!\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/simple_dashboard.py",
      "line": 241,
      "type": "Simulation",
      "description": "self.simulate_generation()",
      "context": [
        "                    self.add_test_agent()",
        "                elif choice == '2':",
        "                    self.simulate_generation()",
        "                elif choice == '3':",
        "                    self.show_details()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/workspace_extension.py",
      "line": 234,
      "type": "Simulation",
      "description": "# Simulate code generation (jak TW\u00d3J system)",
      "context": [
        "    print(\"\\n\ud83d\udcdd Testing workspace file creation...\")",
        "    ",
        "    # Simulate code generation (jak TW\u00d3J system)",
        "    sample_codes = [",
        "        {"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/workspace_manager.py",
      "line": 543,
      "type": "Simulation",
      "description": "# Simulate code generation (like YOUR agents would do)",
      "context": [
        "    await workspace_manager.create_project_structure(workspace_id, \"fastapi\")",
        "    ",
        "    # Simulate code generation (like YOUR agents would do)",
        "    sample_code = '''",
        "from fastapi import FastAPI, Depends, HTTPException"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "exported-assets/agent_executor_fixed.py",
      "line": 263,
      "type": "Mock Implementation",
      "description": "# Mock agent",
      "context": [
        "if __name__ == \"__main__\":",
        "    async def test_executor():",
        "        # Mock agent",
        "        class MockAgent:",
        "            async def execute(self, input_data, workspace_dir):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "exported-assets/agent_executor_fixed.py",
      "line": 264,
      "type": "Mock Class",
      "description": "class MockAgent:",
      "context": [
        "    async def test_executor():",
        "        # Mock agent",
        "        class MockAgent:",
        "            async def execute(self, input_data, workspace_dir):",
        "                await asyncio.sleep(0.5)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "exported-assets/script_2.py",
      "line": 265,
      "type": "Mock Implementation",
      "description": "# Mock agent",
      "context": [
        "if __name__ == \"__main__\":",
        "    async def test_executor():",
        "        # Mock agent",
        "        class MockAgent:",
        "            async def execute(self, input_data, workspace_dir):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "exported-assets/script_2.py",
      "line": 266,
      "type": "Mock Class",
      "description": "class MockAgent:",
      "context": [
        "    async def test_executor():",
        "        # Mock agent",
        "        class MockAgent:",
        "            async def execute(self, input_data, workspace_dir):",
        "                await asyncio.sleep(0.5)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/deployment_script.py",
      "line": 37,
      "type": "Simulation",
      "description": "dry_run: If True, only simulate deployment without making changes",
      "context": [
        "        Args:",
        "            project_root: Path to agent-zero-v1 project root",
        "            dry_run: If True, only simulate deployment without making changes",
        "        \"\"\"",
        "        self.project_root = Path(project_root).resolve()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/deployment_script.py",
      "line": 444,
      "type": "Mock Implementation",
      "description": "# Mock agent for testing",
      "context": [
        "            # Test method signature",
        "            try:",
        "                # Mock agent for testing",
        "                class MockAgent:",
        "                    def execute(self, task, context):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/deployment_script.py",
      "line": 445,
      "type": "Mock Class",
      "description": "class MockAgent:",
      "context": [
        "            try:",
        "                # Mock agent for testing",
        "                class MockAgent:",
        "                    def execute(self, task, context):",
        "                        return {'status': 'completed', 'message': 'Test successful'}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/deployment_script.py",
      "line": 599,
      "type": "Simulation",
      "description": "parser.add_argument('--dry-run', action='store_true', help='Simulate deployment without making changes')",
      "context": [
        "    parser = argparse.ArgumentParser(description='Deploy AgentExecutor Method Signature Fix')",
        "    parser.add_argument('project_root', help='Path to agent-zero-v1 project root')",
        "    parser.add_argument('--dry-run', action='store_true', help='Simulate deployment without making changes')",
        "    parser.add_argument('--rollback', help='Rollback using specified backup directory')",
        "    parser.add_argument('--verbose', '-v', action='store_true', help='Enable verbose logging')"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/performance_benchmark.py",
      "line": 361,
      "type": "Mock Implementation",
      "description": "# Mock AgentExecutor for performance testing",
      "context": [
        "        \"\"\"Test agent execution performance\"\"\"",
        "        try:",
        "            # Mock AgentExecutor for performance testing",
        "            class MockAgentExecutor:",
        "                def execute_task(self, agent, task, output_dir):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/performance_benchmark.py",
      "line": 362,
      "type": "Mock Class",
      "description": "class MockAgentExecutor:",
      "context": [
        "        try:",
        "            # Mock AgentExecutor for performance testing",
        "            class MockAgentExecutor:",
        "                def execute_task(self, agent, task, output_dir):",
        "                    # Simulate work"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/performance_benchmark.py",
      "line": 364,
      "type": "Simulation",
      "description": "# Simulate work",
      "context": [
        "            class MockAgentExecutor:",
        "                def execute_task(self, agent, task, output_dir):",
        "                    # Simulate work",
        "                    time.sleep(0.1)  # 100ms simulated work",
        "                    return {"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/performance_benchmark.py",
      "line": 365,
      "type": "Simulation",
      "description": "time.sleep(0.1)  # 100ms simulated work",
      "context": [
        "                def execute_task(self, agent, task, output_dir):",
        "                    # Simulate work",
        "                    time.sleep(0.1)  # 100ms simulated work",
        "                    return {",
        "                        'status': 'success',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/task_decomposer_fixed.py",
      "line": 223,
      "type": "Mock Implementation",
      "description": "# Return mock response for testing",
      "context": [
        "        \"\"\"",
        "        if not self.llm_client:",
        "            # Return mock response for testing",
        "            return self._generate_mock_llm_response(task_description)",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/task_decomposer_fixed.py",
      "line": 224,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        if not self.llm_client:",
        "            # Return mock response for testing",
        "            return self._generate_mock_llm_response(task_description)",
        "        ",
        "        # Enhanced prompt for better JSON output"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/task_decomposer_fixed.py",
      "line": 224,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        if not self.llm_client:",
        "            # Return mock response for testing",
        "            return self._generate_mock_llm_response(task_description)",
        "        ",
        "        # Enhanced prompt for better JSON output"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/task_decomposer_fixed.py",
      "line": 259,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        except Exception as e:",
        "            logger.error(f\"LLM call failed: {e}\")",
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/task_decomposer_fixed.py",
      "line": 259,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        except Exception as e:",
        "            logger.error(f\"LLM call failed: {e}\")",
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/task_decomposer_fixed.py",
      "line": 261,
      "type": "Mock Method",
      "description": "def _generate_mock_llm_response(self, task_description: str) -> str:",
      "context": [
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:",
        "        \"\"\"Generate mock response for testing purposes\"\"\"",
        "        return f\"\"\"{{"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/task_decomposer_fixed.py",
      "line": 261,
      "type": "Mock Method",
      "description": "def _generate_mock_llm_response(self, task_description: str) -> str:",
      "context": [
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:",
        "        \"\"\"Generate mock response for testing purposes\"\"\"",
        "        return f\"\"\"{{"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/test_integration_phase1_phase2.py",
      "line": 10,
      "type": "Mock Class",
      "description": "class MockProjectOrchestrator:",
      "context": [
        "from shared.monitoring.livemonitor import AgentUpdate, AgentStatus",
        "",
        "class MockProjectOrchestrator:",
        "    \"\"\"Mock orchestrator for integration testing\"\"\"",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/test_integration_phase1_phase2.py",
      "line": 17,
      "type": "Simulation",
      "description": "\"\"\"Simulate Phase 1 execution with Phase 2 monitoring\"\"\"",
      "context": [
        "        ",
        "    async def execute_with_monitoring(self, session, requirements: str):",
        "        \"\"\"Simulate Phase 1 execution with Phase 2 monitoring\"\"\"",
        "        from shared.monitoring.livemonitor import AgentUpdate, AgentStatus",
        "        import time"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/test_integration_phase1_phase2.py",
      "line": 32,
      "type": "Simulation",
      "description": "# Simulate 5 phases of development",
      "context": [
        "        ",
        "        try:",
        "            # Simulate 5 phases of development",
        "            phases = [",
        "                (\"Requirements Analysis\", \"orchestrator\", 15.0),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/test_integration_phase1_phase2.py",
      "line": 149,
      "type": "Mock Implementation",
      "description": "mock_orchestrator = MockProjectOrchestrator()",
      "context": [
        "    ",
        "    # Create mock orchestrator",
        "    mock_orchestrator = MockProjectOrchestrator()",
        "    ",
        "    # Start interactive session"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/test_integration_phase1_phase2.py",
      "line": 174,
      "type": "Mock Implementation",
      "description": "result = await mock_orchestrator.execute_with_monitoring(",
      "context": [
        "    try:",
        "        # Execute with monitoring",
        "        result = await mock_orchestrator.execute_with_monitoring(",
        "            session=session,",
        "            requirements=\"Build complete REST API project\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/test_neo4j_connection.py",
      "line": 274,
      "type": "Simulation",
      "description": "# Simulate error",
      "context": [
        "                with session.begin_transaction() as tx:",
        "                    tx.run(\"CREATE (t:TransactionTest {id: 'rollback_test'})\")",
        "                    # Simulate error",
        "                    raise Exception(\"Simulated error\")",
        "            except Exception:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/test_neo4j_connection.py",
      "line": 275,
      "type": "Simulation",
      "description": "raise Exception(\"Simulated error\")",
      "context": [
        "                    tx.run(\"CREATE (t:TransactionTest {id: 'rollback_test'})\")",
        "                    # Simulate error",
        "                    raise Exception(\"Simulated error\")",
        "            except Exception:",
        "                pass"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/test_neo4j_connection.py",
      "line": 302,
      "type": "Mock Implementation",
      "description": "# Mock implementation for retry testing",
      "context": [
        "    def test_connection_retry_mechanism(self):",
        "        \"\"\"Test connection retry logic\"\"\"",
        "        # Mock implementation for retry testing",
        "        retry_count = 0",
        "        max_retries = 3"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/test_neo4j_connection.py",
      "line": 306,
      "type": "Mock Method",
      "description": "def mock_connect():",
      "context": [
        "        max_retries = 3",
        "",
        "        def mock_connect():",
        "            nonlocal retry_count",
        "            retry_count += 1"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/test_neo4j_connection.py",
      "line": 306,
      "type": "Mock Method",
      "description": "def mock_connect():",
      "context": [
        "        max_retries = 3",
        "",
        "        def mock_connect():",
        "            nonlocal retry_count",
        "            retry_count += 1"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/test_neo4j_connection.py",
      "line": 311,
      "type": "Mock Implementation",
      "description": "return Mock()  # Successful connection",
      "context": [
        "            if retry_count < max_retries:",
        "                raise ServiceUnavailable(\"Connection failed\")",
        "            return Mock()  # Successful connection",
        "",
        "        # Simulate retry logic"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/test_neo4j_connection.py",
      "line": 313,
      "type": "Simulation",
      "description": "# Simulate retry logic",
      "context": [
        "            return Mock()  # Successful connection",
        "",
        "        # Simulate retry logic",
        "        for attempt in range(max_retries):",
        "            try:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/test_neo4j_connection.py",
      "line": 316,
      "type": "Mock Implementation",
      "description": "connection = mock_connect()",
      "context": [
        "        for attempt in range(max_retries):",
        "            try:",
        "                connection = mock_connect()",
        "                break",
        "            except ServiceUnavailable:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/websocket_monitor_fixed.py",
      "line": 513,
      "type": "Simulation",
      "description": "# Simulate agent status updates",
      "context": [
        "    while True:",
        "        try:",
        "            # Simulate agent status updates",
        "            for i, agent in enumerate(agents):",
        "                is_active = (counter + i) % 3 != 0  # Simulate some agents being inactive"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/websocket_monitor_fixed.py",
      "line": 515,
      "type": "Simulation",
      "description": "is_active = (counter + i) % 3 != 0  # Simulate some agents being inactive",
      "context": [
        "            # Simulate agent status updates",
        "            for i, agent in enumerate(agents):",
        "                is_active = (counter + i) % 3 != 0  # Simulate some agents being inactive",
        "                status_messages = [",
        "                    \"Idle - waiting for tasks\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase3-priority2/enterprise_ml_pipeline.py",
      "line": 450,
      "type": "Simulation",
      "description": "# Simulate experiment results (in real implementation, this would collect actual data)",
      "context": [
        "        ",
        "        try:",
        "            # Simulate experiment results (in real implementation, this would collect actual data)",
        "            np.random.seed(42)",
        "            "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase3-priority3/advanced_analytics_dashboard.py",
      "line": 107,
      "type": "Simulation",
      "description": "# Simulate real-time ML insights from Priority 1 & 2 data",
      "context": [
        "        ",
        "        try:",
        "            # Simulate real-time ML insights from Priority 1 & 2 data",
        "            models = ['cost_predictor', 'duration_predictor', 'success_predictor']",
        "            metrics = ['accuracy', 'precision', 'recall', 'f1_score']"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase3-priority3/advanced_analytics_dashboard.py",
      "line": 228,
      "type": "Simulation",
      "description": "# Simulate business forecasting using Priority 1 prediction data",
      "context": [
        "        \"\"\"Generate predictive business analytics\"\"\"",
        "        try:",
        "            # Simulate business forecasting using Priority 1 prediction data",
        "            if ANALYTICS_AVAILABLE:",
        "                # Resource utilization forecast"
      ],
      "complexity": "High",
      "priority": 3
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 13,
      "type": "Mock Class",
      "description": "class MockImplementationAnalyzer:",
      "context": [
        "from typing import Dict, List, Any",
        "",
        "class MockImplementationAnalyzer:",
        "    \"\"\"Analyze all mock implementations in the codebase\"\"\"",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 18,
      "type": "Mock Implementation",
      "description": "self.mock_components = []",
      "context": [
        "    def __init__(self, base_path: str = \"../\"):",
        "        self.base_path = Path(base_path)",
        "        self.mock_components = []",
        "        self.analysis_results = {}",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 25,
      "type": "Mock Implementation",
      "description": "mock_patterns = [",
      "context": [
        "        ",
        "        # Search patterns for mock implementations",
        "        mock_patterns = [",
        "            r'class.*Mock.*',",
        "            r'def.*mock.*',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 26,
      "type": "Mock Class",
      "description": "r'class.*Mock.*',",
      "context": [
        "        # Search patterns for mock implementations",
        "        mock_patterns = [",
        "            r'class.*Mock.*',",
        "            r'def.*mock.*',",
        "            r'# TODO.*mock',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 27,
      "type": "Mock Method",
      "description": "r'def.*mock.*',",
      "context": [
        "        mock_patterns = [",
        "            r'class.*Mock.*',",
        "            r'def.*mock.*',",
        "            r'# TODO.*mock',",
        "            r'# MOCK.*',"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 28,
      "type": "TODO Mock",
      "description": "r'# TODO.*mock',",
      "context": [
        "            r'class.*Mock.*',",
        "            r'def.*mock.*',",
        "            r'# TODO.*mock',",
        "            r'# MOCK.*',",
        "            r'MockModel',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 29,
      "type": "Mock Implementation",
      "description": "r'# MOCK.*',",
      "context": [
        "            r'def.*mock.*',",
        "            r'# TODO.*mock',",
        "            r'# MOCK.*',",
        "            r'MockModel',",
        "            r'mock_.*',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 30,
      "type": "Mock Implementation",
      "description": "r'MockModel',",
      "context": [
        "            r'# TODO.*mock',",
        "            r'# MOCK.*',",
        "            r'MockModel',",
        "            r'mock_.*',",
        "            r'return.*mock',"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 31,
      "type": "Mock Implementation",
      "description": "r'mock_.*',",
      "context": [
        "            r'# MOCK.*',",
        "            r'MockModel',",
        "            r'mock_.*',",
        "            r'return.*mock',",
        "            r'placeholder.*implementation',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 32,
      "type": "Mock Implementation",
      "description": "r'return.*mock',",
      "context": [
        "            r'MockModel',",
        "            r'mock_.*',",
        "            r'return.*mock',",
        "            r'placeholder.*implementation',",
        "            r'simulate.*'"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 33,
      "type": "Mock Implementation",
      "description": "r'placeholder.*implementation',",
      "context": [
        "            r'mock_.*',",
        "            r'return.*mock',",
        "            r'placeholder.*implementation',",
        "            r'simulate.*'",
        "        ]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 34,
      "type": "Simulation",
      "description": "r'simulate.*'",
      "context": [
        "            r'return.*mock',",
        "            r'placeholder.*implementation',",
        "            r'simulate.*'",
        "        ]",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 38,
      "type": "Mock Implementation",
      "description": "\"total_mock_files\": 0,",
      "context": [
        "        ",
        "        results = {",
        "            \"total_mock_files\": 0,",
        "            \"mock_implementations\": [],",
        "            \"critical_mocks\": [],"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 39,
      "type": "Mock Implementation",
      "description": "\"mock_implementations\": [],",
      "context": [
        "        results = {",
        "            \"total_mock_files\": 0,",
        "            \"mock_implementations\": [],",
        "            \"critical_mocks\": [],",
        "            \"replacement_priority\": []"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 49,
      "type": "Mock Implementation",
      "description": "mock_findings = self._analyze_file(py_file, mock_patterns)",
      "context": [
        "                continue",
        "                ",
        "            mock_findings = self._analyze_file(py_file, mock_patterns)",
        "            if mock_findings:",
        "                results[\"mock_implementations\"].extend(mock_findings)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 50,
      "type": "Mock Implementation",
      "description": "if mock_findings:",
      "context": [
        "                ",
        "            mock_findings = self._analyze_file(py_file, mock_patterns)",
        "            if mock_findings:",
        "                results[\"mock_implementations\"].extend(mock_findings)",
        "                results[\"total_mock_files\"] += 1"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 51,
      "type": "Mock Implementation",
      "description": "results[\"mock_implementations\"].extend(mock_findings)",
      "context": [
        "            mock_findings = self._analyze_file(py_file, mock_patterns)",
        "            if mock_findings:",
        "                results[\"mock_implementations\"].extend(mock_findings)",
        "                results[\"total_mock_files\"] += 1",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 52,
      "type": "Mock Implementation",
      "description": "results[\"total_mock_files\"] += 1",
      "context": [
        "            if mock_findings:",
        "                results[\"mock_implementations\"].extend(mock_findings)",
        "                results[\"total_mock_files\"] += 1",
        "        ",
        "        # Categorize by priority"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 56,
      "type": "Mock Implementation",
      "description": "mock for mock in results[\"mock_implementations\"]",
      "context": [
        "        # Categorize by priority",
        "        results[\"critical_mocks\"] = [",
        "            mock for mock in results[\"mock_implementations\"]",
        "            if any(keyword in mock[\"type\"].lower() for keyword in ",
        "                   [\"reasoning\", \"model\", \"decision\", \"prediction\", \"scoring\"])"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 92,
      "type": "Mock Implementation",
      "description": "\"type\": self._extract_mock_type(line),",
      "context": [
        "                            \"file\": str(file_path.relative_to(self.base_path)),",
        "                            \"line\": line_num,",
        "                            \"type\": self._extract_mock_type(line),",
        "                            \"description\": line.strip(),",
        "                            \"context\": self._get_context(lines, line_num),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 103,
      "type": "Mock Method",
      "description": "def _extract_mock_type(self, line: str) -> str:",
      "context": [
        "        return findings",
        "    ",
        "    def _extract_mock_type(self, line: str) -> str:",
        "        \"\"\"Extract the type of mock implementation\"\"\"",
        "        if \"class\" in line.lower():"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 103,
      "type": "Mock Method",
      "description": "def _extract_mock_type(self, line: str) -> str:",
      "context": [
        "        return findings",
        "    ",
        "    def _extract_mock_type(self, line: str) -> str:",
        "        \"\"\"Extract the type of mock implementation\"\"\"",
        "        if \"class\" in line.lower():"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 106,
      "type": "Mock Class",
      "description": "return \"Mock Class\"",
      "context": [
        "        \"\"\"Extract the type of mock implementation\"\"\"",
        "        if \"class\" in line.lower():",
        "            return \"Mock Class\"",
        "        elif \"def\" in line.lower():",
        "            return \"Mock Method\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 108,
      "type": "Mock Implementation",
      "description": "return \"Mock Method\"",
      "context": [
        "            return \"Mock Class\"",
        "        elif \"def\" in line.lower():",
        "            return \"Mock Method\"",
        "        elif \"todo\" in line.lower():",
        "            return \"TODO Mock\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 110,
      "type": "TODO Mock",
      "description": "return \"TODO Mock\"",
      "context": [
        "            return \"Mock Method\"",
        "        elif \"todo\" in line.lower():",
        "            return \"TODO Mock\"",
        "        elif \"simulate\" in line.lower():",
        "            return \"Simulation\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 111,
      "type": "Simulation",
      "description": "elif \"simulate\" in line.lower():",
      "context": [
        "        elif \"todo\" in line.lower():",
        "            return \"TODO Mock\"",
        "        elif \"simulate\" in line.lower():",
        "            return \"Simulation\"",
        "        else:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 114,
      "type": "Mock Implementation",
      "description": "return \"Mock Implementation\"",
      "context": [
        "            return \"Simulation\"",
        "        else:",
        "            return \"Mock Implementation\"",
        "    ",
        "    def _get_context(self, lines: List[str], line_num: int, context_size: int = 2) -> List[str]:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 172,
      "type": "Mock Implementation",
      "description": "target_week1_sp = 8  # Mock Migration target",
      "context": [
        "        week1_sp = 0",
        "        week2_sp = 0",
        "        target_week1_sp = 8  # Mock Migration target",
        "        ",
        "        for mock in priority_mocks:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 192,
      "type": "Mock Method",
      "description": "def _estimate_story_points(self, mock: Dict[str, Any]) -> float:",
      "context": [
        "        return plan",
        "    ",
        "    def _estimate_story_points(self, mock: Dict[str, Any]) -> float:",
        "        \"\"\"Estimate story points for replacing this mock\"\"\"",
        "        base_sp = 0.5"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 206,
      "type": "Mock Method",
      "description": "def save_analysis(self, filename: str = \"mock_analysis_results.json\"):",
      "context": [
        "        return base_sp",
        "    ",
        "    def save_analysis(self, filename: str = \"mock_analysis_results.json\"):",
        "        \"\"\"Save analysis results to file\"\"\"",
        "        if not self.analysis_results:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 206,
      "type": "Mock Method",
      "description": "def save_analysis(self, filename: str = \"mock_analysis_results.json\"):",
      "context": [
        "        return base_sp",
        "    ",
        "    def save_analysis(self, filename: str = \"mock_analysis_results.json\"):",
        "        \"\"\"Save analysis results to file\"\"\"",
        "        if not self.analysis_results:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 228,
      "type": "Mock Implementation",
      "description": "print(f\"  \u2022 Total files with mocks: {results['total_mock_files']}\")",
      "context": [
        "        ",
        "        print(f\"\\n\ud83d\udcca OVERVIEW:\")",
        "        print(f\"  \u2022 Total files with mocks: {results['total_mock_files']}\")",
        "        print(f\"  \u2022 Total mock implementations: {len(results['mock_implementations'])}\")",
        "        print(f\"  \u2022 Critical mocks for replacement: {len(results['critical_mocks'])}\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 229,
      "type": "Mock Implementation",
      "description": "print(f\"  \u2022 Total mock implementations: {len(results['mock_implementations'])}\")",
      "context": [
        "        print(f\"\\n\ud83d\udcca OVERVIEW:\")",
        "        print(f\"  \u2022 Total files with mocks: {results['total_mock_files']}\")",
        "        print(f\"  \u2022 Total mock implementations: {len(results['mock_implementations'])}\")",
        "        print(f\"  \u2022 Critical mocks for replacement: {len(results['critical_mocks'])}\")",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase4-analysis/mock_implementation_analysis.py",
      "line": 266,
      "type": "Mock Implementation",
      "description": "print(\"\ud83d\udcc1 Results saved to: mock_analysis_results.json\")",
      "context": [
        "    ",
        "    print(\"\\n\u2705 Mock analysis complete!\")",
        "    print(\"\ud83d\udcc1 Results saved to: mock_analysis_results.json\")",
        "    print(\"\ud83d\ude80 Ready for Ollama setup and production implementation!\")",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "phase3-development/predictive-planning/predictive_resource_planner.py",
      "line": 294,
      "type": "Simulation",
      "description": "# Simulate workload based on historical patterns",
      "context": [
        "            self.train_models()",
        "        ",
        "        # Simulate workload based on historical patterns",
        "        daily_tasks = np.random.poisson(5, planning_horizon_days)  # Average 5 tasks per day",
        "        predicted_workload = 0"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/typing_extensions.py",
      "line": 4097,
      "type": "Simulation",
      "description": "# between the locals and the globals. We simulate this by adding",
      "context": [
        "",
        "        # Type parameters exist in their own scope, which is logically",
        "        # between the locals and the globals. We simulate this by adding",
        "        # them to the globals.",
        "        if type_params is not None:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/msvc.py",
      "line": 30,
      "type": "Mock Implementation",
      "description": "# Mock winreg and environ so the module can be imported on this platform.",
      "context": [
        "    from os import environ",
        "else:",
        "    # Mock winreg and environ so the module can be imported on this platform.",
        "",
        "    class winreg:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/click/utils.py",
      "line": 585,
      "type": "Simulation",
      "description": "\"\"\"Simulate Unix shell expansion with Python functions.",
      "context": [
        "    glob_recursive: bool = True,",
        ") -> list[str]:",
        "    \"\"\"Simulate Unix shell expansion with Python functions.",
        "",
        "    See :func:`glob.glob`, :func:`os.path.expanduser`, and"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/requests/cookies.py",
      "line": 23,
      "type": "Mock Class",
      "description": "class MockRequest:",
      "context": [
        "",
        "",
        "class MockRequest:",
        "    \"\"\"Wraps a `requests.Request` to mimic a `urllib2.Request`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/requests/cookies.py",
      "line": 103,
      "type": "Mock Class",
      "description": "class MockResponse:",
      "context": [
        "",
        "",
        "class MockResponse:",
        "    \"\"\"Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/requests/models.py",
      "line": 845,
      "type": "Simulation",
      "description": "# simulate reading small chunks of the content",
      "context": [
        "                f\"chunk_size must be an int, it is instead a {type(chunk_size)}.\"",
        "            )",
        "        # simulate reading small chunks of the content",
        "        reused_chunks = iter_slices(self._content, chunk_size)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 52,
      "type": "Mock Implementation",
      "description": "_mock_val_ser,",
      "context": [
        "    _decorators,",
        "    _internal_dataclass,",
        "    _mock_val_ser,",
        "    _schema_generation_shared,",
        ")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 2535,
      "type": "Mock Implementation",
      "description": "if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
      "context": [
        "    )",
        "",
        "    if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
        "        cls.__pydantic_core_schema__.rebuild()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 2541,
      "type": "Mock Implementation",
      "description": "assert not isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
      "context": [
        "        raise AttributeError('model_json_schema() must be called on a subclass of BaseModel, not BaseModel itself.')",
        "",
        "    assert not isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
        "    return schema_generator_instance.generate(cls.__pydantic_core_schema__, mode=mode)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 2582,
      "type": "Mock Implementation",
      "description": "if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
      "context": [
        "    \"\"\"",
        "    for cls, _ in models:",
        "        if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
        "            cls.__pydantic_core_schema__.rebuild()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/main.py",
      "line": 42,
      "type": "Mock Implementation",
      "description": "_mock_val_ser,",
      "context": [
        "    _forward_ref,",
        "    _generics,",
        "    _mock_val_ser,",
        "    _model_construction,",
        "    _namespace_utils,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/main.py",
      "line": 103,
      "type": "Mock Method",
      "description": "# is initialized, by wrapping the user-defined `model_post_init()`), e.g. if they mock",
      "context": [
        "        # While the attribute should be present at this point, this may not be the case if",
        "        # users do unusual stuff with `model_post_init()` (which is where the  `__pydantic_private__`",
        "        # is initialized, by wrapping the user-defined `model_post_init()`), e.g. if they mock",
        "        # the `model_post_init()` call. Ideally we should find a better way to init private attrs.",
        "        object.__setattr__(model, '__pydantic_private__', {})"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/main.py",
      "line": 223,
      "type": "Mock Implementation",
      "description": "__pydantic_core_schema__ = _mock_val_ser.MockCoreSchema(",
      "context": [
        "        # Prevent `BaseModel` from being instantiated directly",
        "        # (defined in an `if not TYPE_CHECKING` block for clarity and to avoid type checking errors):",
        "        __pydantic_core_schema__ = _mock_val_ser.MockCoreSchema(",
        "            'Pydantic models should inherit from BaseModel, BaseModel cannot be instantiated directly',",
        "            code='base-model-instantiated',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/main.py",
      "line": 227,
      "type": "Mock Implementation",
      "description": "__pydantic_validator__ = _mock_val_ser.MockValSer(",
      "context": [
        "            code='base-model-instantiated',",
        "        )",
        "        __pydantic_validator__ = _mock_val_ser.MockValSer(",
        "            'Pydantic models should inherit from BaseModel, BaseModel cannot be instantiated directly',",
        "            val_or_ser='validator',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/main.py",
      "line": 232,
      "type": "Mock Implementation",
      "description": "__pydantic_serializer__ = _mock_val_ser.MockValSer(",
      "context": [
        "            code='base-model-instantiated',",
        "        )",
        "        __pydantic_serializer__ = _mock_val_ser.MockValSer(",
        "            'Pydantic models should inherit from BaseModel, BaseModel cannot be instantiated directly',",
        "            val_or_ser='serializer',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/main.py",
      "line": 648,
      "type": "Mock Implementation",
      "description": "if attr in cls.__dict__ and not isinstance(getattr(cls, attr), _mock_val_ser.MockValSer):",
      "context": [
        "",
        "        for attr in ('__pydantic_core_schema__', '__pydantic_validator__', '__pydantic_serializer__'):",
        "            if attr in cls.__dict__ and not isinstance(getattr(cls, attr), _mock_val_ser.MockValSer):",
        "                # Deleting the validator/serializer is necessary as otherwise they can get reused in",
        "                # pydantic-core. We do so only if they aren't mock instances, otherwise \u2014 as `model_rebuild()`"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/main.py",
      "line": 823,
      "type": "Mock Implementation",
      "description": "if schema is not None and not isinstance(schema, _mock_val_ser.MockCoreSchema):",
      "context": [
        "        # Logic copied over from `GenerateSchema._model_schema`:",
        "        schema = cls.__dict__.get('__pydantic_core_schema__')",
        "        if schema is not None and not isinstance(schema, _mock_val_ser.MockCoreSchema):",
        "            return cls.__pydantic_core_schema__",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 26,
      "type": "Mock Implementation",
      "description": "from ._internal import _config, _generate_schema, _mock_val_ser, _namespace_utils, _repr, _typing_extra, _utils",
      "context": [
        "from pydantic.main import BaseModel, IncEx",
        "",
        "from ._internal import _config, _generate_schema, _mock_val_ser, _namespace_utils, _repr, _typing_extra, _utils",
        "from .config import ConfigDict, ExtraValues",
        "from .errors import PydanticUndefinedAnnotation"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 271,
      "type": "Mock Method",
      "description": "If `force` is set to `False` and `_defer_build` is `True`, the core schema, validator, and serializer will be set to mocks.",
      "context": [
        "            ns_resolver: The namespace resolver to use when building the core schema for the adapted type.",
        "            force: Whether to force the construction of the core schema, validator, and serializer.",
        "                If `force` is set to `False` and `_defer_build` is `True`, the core schema, validator, and serializer will be set to mocks.",
        "            raise_errors: Whether to raise errors if initializing any of the core attrs fails.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 282,
      "type": "Mock Implementation",
      "description": "_mock_val_ser.set_type_adapter_mocks(self)",
      "context": [
        "        \"\"\"",
        "        if not force and self._defer_build:",
        "            _mock_val_ser.set_type_adapter_mocks(self)",
        "            self.pydantic_complete = False",
        "            return False"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 295,
      "type": "Mock Implementation",
      "description": "isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
      "context": [
        "            # so we simply skip to the block below that does the actual schema generation",
        "            if (",
        "                isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
        "                or isinstance(self.validator, _mock_val_ser.MockValSer)",
        "                or isinstance(self.serializer, _mock_val_ser.MockValSer)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 296,
      "type": "Mock Implementation",
      "description": "or isinstance(self.validator, _mock_val_ser.MockValSer)",
      "context": [
        "            if (",
        "                isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
        "                or isinstance(self.validator, _mock_val_ser.MockValSer)",
        "                or isinstance(self.serializer, _mock_val_ser.MockValSer)",
        "            ):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 297,
      "type": "Mock Implementation",
      "description": "or isinstance(self.serializer, _mock_val_ser.MockValSer)",
      "context": [
        "                isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
        "                or isinstance(self.validator, _mock_val_ser.MockValSer)",
        "                or isinstance(self.serializer, _mock_val_ser.MockValSer)",
        "            ):",
        "                raise AttributeError()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 310,
      "type": "Mock Implementation",
      "description": "_mock_val_ser.set_type_adapter_mocks(self)",
      "context": [
        "                if raise_errors:",
        "                    raise",
        "                _mock_val_ser.set_type_adapter_mocks(self)",
        "                return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 316,
      "type": "Mock Implementation",
      "description": "_mock_val_ser.set_type_adapter_mocks(self)",
      "context": [
        "                self.core_schema = schema_generator.clean_schema(core_schema)",
        "            except _generate_schema.InvalidSchemaError:",
        "                _mock_val_ser.set_type_adapter_mocks(self)",
        "                return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 724,
      "type": "Mock Implementation",
      "description": "if isinstance(self.core_schema, _mock_val_ser.MockCoreSchema):",
      "context": [
        "            by_alias=by_alias, ref_template=ref_template, union_format=union_format",
        "        )",
        "        if isinstance(self.core_schema, _mock_val_ser.MockCoreSchema):",
        "            self.core_schema.rebuild()",
        "            assert not isinstance(self.core_schema, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 726,
      "type": "Mock Implementation",
      "description": "assert not isinstance(self.core_schema, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
      "context": [
        "        if isinstance(self.core_schema, _mock_val_ser.MockCoreSchema):",
        "            self.core_schema.rebuild()",
        "            assert not isinstance(self.core_schema, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
        "        return schema_generator_instance.generate(self.core_schema, mode=mode)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 778,
      "type": "Mock Implementation",
      "description": "if isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema):",
      "context": [
        "        for key, mode, adapter in inputs:",
        "            # This is the same pattern we follow for model json schemas - we attempt a core schema rebuild if we detect a mock",
        "            if isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema):",
        "                adapter.core_schema.rebuild()",
        "                assert not isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema), ("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 780,
      "type": "Mock Implementation",
      "description": "assert not isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema), (",
      "context": [
        "            if isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema):",
        "                adapter.core_schema.rebuild()",
        "                assert not isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema), (",
        "                    'this is a bug! please report it'",
        "                )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 633,
      "type": "Mock Method",
      "description": "def _create_app_mock() -> mock.MagicMock:",
      "context": [
        "",
        "",
        "def _create_app_mock() -> mock.MagicMock:",
        "    def get_dict(app: Any, key: str) -> Any:",
        "        return app.__app_dict[key]"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 651,
      "type": "Mock Method",
      "description": "def _create_transport(sslcontext: Optional[SSLContext] = None) -> mock.Mock:",
      "context": [
        "",
        "",
        "def _create_transport(sslcontext: Optional[SSLContext] = None) -> mock.Mock:",
        "    transport = mock.Mock()",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 664,
      "type": "Mock Method",
      "description": "def make_mocked_request(",
      "context": [
        "",
        "",
        "def make_mocked_request(",
        "    method: str,",
        "    path: str,"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 762,
      "type": "Mock Method",
      "description": "def make_mocked_coro(",
      "context": [
        "",
        "",
        "def make_mocked_coro(",
        "    return_value: Any = sentinel, raise_exception: Any = sentinel",
        ") -> Any:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 767,
      "type": "Mock Method",
      "description": "async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
      "context": [
        "    \"\"\"Creates a coroutine mock.\"\"\"",
        "",
        "    async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
        "        if raise_exception is not sentinel:",
        "            raise raise_exception"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 767,
      "type": "Mock Method",
      "description": "async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
      "context": [
        "    \"\"\"Creates a coroutine mock.\"\"\"",
        "",
        "    async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
        "        if raise_exception is not sentinel:",
        "            raise raise_exception"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 774,
      "type": "Mock Implementation",
      "description": "return mock.Mock(wraps=mock_coro)",
      "context": [
        "        await return_value",
        "",
        "    return mock.Mock(wraps=mock_coro)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 774,
      "type": "Mock Implementation",
      "description": "return mock.Mock(wraps=mock_coro)",
      "context": [
        "        await return_value",
        "",
        "    return mock.Mock(wraps=mock_coro)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/spacy/tests/test_language.py",
      "line": 354,
      "type": "Mock Implementation",
      "description": "with mock.patch.object(logger, \"warning\") as mock_warning:",
      "context": [
        "        nlp.set_error_handler(warn_error)",
        "        logger = logging.getLogger(\"spacy\")",
        "        with mock.patch.object(logger, \"warning\") as mock_warning:",
        "            # the errors by the evil custom component raise a warning for each",
        "            # bad doc"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/spacy/tests/test_language.py",
      "line": 361,
      "type": "Mock Implementation",
      "description": "mock_warning.assert_called()",
      "context": [
        "            # detected by the mock logger",
        "            if n_process == 1:",
        "                mock_warning.assert_called()",
        "                assert mock_warning.call_count == 2",
        "                assert len(docs) + mock_warning.call_count == len(texts)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/spacy/tests/test_language.py",
      "line": 362,
      "type": "Mock Implementation",
      "description": "assert mock_warning.call_count == 2",
      "context": [
        "            if n_process == 1:",
        "                mock_warning.assert_called()",
        "                assert mock_warning.call_count == 2",
        "                assert len(docs) + mock_warning.call_count == len(texts)",
        "            assert [doc.text for doc in docs] == [\"TEXT 111\", \"TEXT 333\", \"TEXT 666\"]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/spacy/tests/test_language.py",
      "line": 363,
      "type": "Mock Implementation",
      "description": "assert len(docs) + mock_warning.call_count == len(texts)",
      "context": [
        "                mock_warning.assert_called()",
        "                assert mock_warning.call_count == 2",
        "                assert len(docs) + mock_warning.call_count == len(texts)",
        "            assert [doc.text for doc in docs] == [\"TEXT 111\", \"TEXT 333\", \"TEXT 666\"]",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/spacy/tests/test_language.py",
      "line": 386,
      "type": "Mock Implementation",
      "description": "with mock.patch.object(logger, \"warning\") as mock_warning:",
      "context": [
        "        nlp.set_error_handler(warn_error)",
        "        logger = logging.getLogger(\"spacy\")",
        "        with mock.patch.object(logger, \"warning\") as mock_warning:",
        "            tuples = list(nlp.pipe(texts, as_tuples=True, n_process=n_process))",
        "            # HACK/TODO? the warnings in child processes don't seem to be"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/spacy/tests/test_language.py",
      "line": 391,
      "type": "Mock Implementation",
      "description": "mock_warning.assert_called()",
      "context": [
        "            # detected by the mock logger",
        "            if n_process == 1:",
        "                mock_warning.assert_called()",
        "                assert mock_warning.call_count == 2",
        "                assert len(tuples) + mock_warning.call_count == len(texts)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/spacy/tests/test_language.py",
      "line": 392,
      "type": "Mock Implementation",
      "description": "assert mock_warning.call_count == 2",
      "context": [
        "            if n_process == 1:",
        "                mock_warning.assert_called()",
        "                assert mock_warning.call_count == 2",
        "                assert len(tuples) + mock_warning.call_count == len(texts)",
        "            assert (tuples[0][0].text, tuples[0][1]) == (\"TEXT 111\", 111)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/spacy/tests/test_language.py",
      "line": 393,
      "type": "Mock Implementation",
      "description": "assert len(tuples) + mock_warning.call_count == len(texts)",
      "context": [
        "                mock_warning.assert_called()",
        "                assert mock_warning.call_count == 2",
        "                assert len(tuples) + mock_warning.call_count == len(texts)",
        "            assert (tuples[0][0].text, tuples[0][1]) == (\"TEXT 111\", 111)",
        "            assert (tuples[1][0].text, tuples[1][1]) == (\"TEXT 333\", 333)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/spacy/tests/training/test_readers.py",
      "line": 51,
      "type": "Simulation",
      "description": "# simulate a training loop",
      "context": [
        "    assert isinstance(train_corpus, Callable)",
        "    optimizer = T[\"optimizer\"]",
        "    # simulate a training loop",
        "    nlp.initialize(lambda: train_corpus(nlp), sgd=optimizer)",
        "    for example in train_corpus(nlp):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/spacy/tests/training/test_readers.py",
      "line": 106,
      "type": "Simulation",
      "description": "# simulate a training loop",
      "context": [
        "    train_corpus, dev_corpus = resolve_dot_names(nlp.config, dot_names)",
        "    optimizer = T[\"optimizer\"]",
        "    # simulate a training loop",
        "    nlp.initialize(lambda: train_corpus(nlp), sgd=optimizer)",
        "    for example in train_corpus(nlp):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/spacy/tests/training/test_readers.py",
      "line": 113,
      "type": "Simulation",
      "description": "# simulate performance benchmark on dev corpus",
      "context": [
        "        assert sorted(list(set(example.y.cats.values()))) == [0.0, 1.0]",
        "        nlp.update([example], sgd=optimizer)",
        "    # simulate performance benchmark on dev corpus",
        "    dev_examples = list(dev_corpus(nlp))",
        "    for example in dev_examples:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/spacy/tests/pipeline/test_analysis.py",
      "line": 60,
      "type": "Mock Implementation",
      "description": "return mock(nlp, foo=foo)",
      "context": [
        "",
        "    def test_componen5_factory(nlp, foo: str = \"bar\", name=\"c5\"):",
        "        return mock(nlp, foo=foo)",
        "",
        "    Language.factory(\"c5\", func=test_componen5_factory)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/spacy/tests/lang/nl/test_noun_chunks.py",
      "line": 208,
      "type": "Simulation",
      "description": "The sample text simulates a Doc object as would be produced by nl_core_news_md.",
      "context": [
        "    \"\"\"",
        "    Test the noun chunks of a sample text. Uses a sample.",
        "    The sample text simulates a Doc object as would be produced by nl_core_news_md.",
        "    \"\"\"",
        "    chunks = [s.text.lower() for s in nl_sample.noun_chunks]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/thinc/tests/layers/test_shim.py",
      "line": 8,
      "type": "Mock Class",
      "description": "class MockShim(Shim):",
      "context": [
        "",
        "",
        "class MockShim(Shim):",
        "    def __init__(self, data: List[int]):",
        "        super().__init__(None, config=None, optimizer=None)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/thinc/tests/layers/test_shim.py",
      "line": 16,
      "type": "Mock Method",
      "description": "def from_bytes(self, data: bytes) -> \"MockShim\":",
      "context": [
        "        return bytes(self.data)",
        "",
        "    def from_bytes(self, data: bytes) -> \"MockShim\":",
        "        return MockShim(data=list(data))",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/thinc/tests/layers/test_shim.py",
      "line": 17,
      "type": "Mock Implementation",
      "description": "return MockShim(data=list(data))",
      "context": [
        "",
        "    def from_bytes(self, data: bytes) -> \"MockShim\":",
        "        return MockShim(data=list(data))",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/weasel/cli/pull.py",
      "line": 31,
      "type": "TODO Mock",
      "description": "# TODO: We don't have tests for this :(. It would take a bit of mockery to",
      "context": [
        "",
        "def project_pull(project_dir: Path, remote: str, *, verbose: bool = False):",
        "    # TODO: We don't have tests for this :(. It would take a bit of mockery to",
        "    # set up. I guess see if it breaks first?",
        "    config = load_project_config(project_dir)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/weasel/cli/run.py",
      "line": 119,
      "type": "Simulation",
      "description": "\"\"\"Simulate a CLI help prompt using the info available in the project.yml.",
      "context": [
        "    project_dir: Path, subcommand: Optional[str] = None, parent_command: str = COMMAND",
        ") -> None:",
        "    \"\"\"Simulate a CLI help prompt using the info available in the project.yml.",
        "",
        "    project_dir (Path): The project directory."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 30,
      "type": "Mock Class",
      "description": "from ._mock_val_ser import set_dataclass_mocks",
      "context": [
        "from ._generate_schema import GenerateSchema, InvalidSchemaError",
        "from ._generics import get_standard_typevars_map",
        "from ._mock_val_ser import set_dataclass_mocks",
        "from ._namespace_utils import NsResolver",
        "from ._signature import generate_pydantic_signature"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 30,
      "type": "Mock Class",
      "description": "from ._mock_val_ser import set_dataclass_mocks",
      "context": [
        "from ._generate_schema import GenerateSchema, InvalidSchemaError",
        "from ._generics import get_standard_typevars_map",
        "from ._mock_val_ser import set_dataclass_mocks",
        "from ._namespace_utils import NsResolver",
        "from ._signature import generate_pydantic_signature"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 131,
      "type": "Mock Class",
      "description": "set_dataclass_mocks(cls)",
      "context": [
        "",
        "    if not _force_build and config_wrapper.defer_build:",
        "        set_dataclass_mocks(cls)",
        "        return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 169,
      "type": "Mock Class",
      "description": "set_dataclass_mocks(cls, f'`{e.name}`')",
      "context": [
        "        if raise_errors:",
        "            raise",
        "        set_dataclass_mocks(cls, f'`{e.name}`')",
        "        return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 177,
      "type": "Mock Class",
      "description": "set_dataclass_mocks(cls)",
      "context": [
        "        schema = gen_schema.clean_schema(schema)",
        "    except InvalidSchemaError:",
        "        set_dataclass_mocks(cls)",
        "        return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_decorators.py",
      "line": 359,
      "type": "Mock Class",
      "description": "aiming to simulate calling the method on the actual class.",
      "context": [
        "def get_attribute_from_bases(tp: type[Any] | tuple[type[Any], ...], name: str) -> Any:",
        "    \"\"\"Get the attribute from the next class in the MRO that has it,",
        "    aiming to simulate calling the method on the actual class.",
        "",
        "    The reason for iterating over the mro instead of just getting"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_generate_schema.py",
      "line": 104,
      "type": "Mock Implementation",
      "description": "from ._mock_val_ser import MockCoreSchema",
      "context": [
        "from ._generics import get_standard_typevars_map, replace_types",
        "from ._import_utils import import_cached_base_model, import_cached_field_info",
        "from ._mock_val_ser import MockCoreSchema",
        "from ._namespace_utils import NamespacesTuple, NsResolver",
        "from ._schema_gather import MissingDefinitionError, gather_schemas_for_cleaning"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 21,
      "type": "Mock Class",
      "description": "class MockCoreSchema(Mapping[str, Any]):",
      "context": [
        "",
        "",
        "class MockCoreSchema(Mapping[str, Any]):",
        "    \"\"\"Mocker for `pydantic_core.CoreSchema` which optionally attempts to",
        "    rebuild the thing it's mocking when one of its methods is accessed and raises an error if that fails."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 71,
      "type": "Mock Class",
      "description": "class MockValSer(Generic[ValSer]):",
      "context": [
        "",
        "",
        "class MockValSer(Generic[ValSer]):",
        "    \"\"\"Mocker for `pydantic_core.SchemaValidator` or `pydantic_core.SchemaSerializer` which optionally attempts to",
        "    rebuild the thing it's mocking when one of its methods is accessed and raises an error if that fails."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 112,
      "type": "Mock Method",
      "description": "def set_type_adapter_mocks(adapter: TypeAdapter) -> None:",
      "context": [
        "",
        "",
        "def set_type_adapter_mocks(adapter: TypeAdapter) -> None:",
        "    \"\"\"Set `core_schema`, `validator` and `serializer` to mock core types on a type adapter instance.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 151,
      "type": "Mock Method",
      "description": "def set_model_mocks(cls: type[BaseModel], undefined_name: str = 'all referenced types') -> None:",
      "context": [
        "",
        "",
        "def set_model_mocks(cls: type[BaseModel], undefined_name: str = 'all referenced types') -> None:",
        "    \"\"\"Set `__pydantic_core_schema__`, `__pydantic_validator__` and `__pydantic_serializer__` to mock core types on a model.",
        ""
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 155,
      "type": "Mock Class",
      "description": "cls: The model class to set the mocks on",
      "context": [
        "",
        "    Args:",
        "        cls: The model class to set the mocks on",
        "        undefined_name: Name of the undefined thing, used in error messages",
        "    \"\"\""
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 190,
      "type": "Mock Class",
      "description": "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
      "context": [
        "",
        "",
        "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
        "    \"\"\"Set `__pydantic_validator__` and `__pydantic_serializer__` to `MockValSer`s on a dataclass.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 190,
      "type": "Mock Class",
      "description": "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
      "context": [
        "",
        "",
        "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
        "    \"\"\"Set `__pydantic_validator__` and `__pydantic_serializer__` to `MockValSer`s on a dataclass.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 194,
      "type": "Mock Class",
      "description": "cls: The model class to set the mocks on",
      "context": [
        "",
        "    Args:",
        "        cls: The model class to set the mocks on",
        "        undefined_name: Name of the undefined thing, used in error messages",
        "    \"\"\""
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pydantic/_internal/_model_construction.py",
      "line": 28,
      "type": "Mock Implementation",
      "description": "from ._mock_val_ser import set_model_mocks",
      "context": [
        "from ._generics import PydanticGenericMetadata, get_model_typevars_map",
        "from ._import_utils import import_cached_base_model, import_cached_field_info",
        "from ._mock_val_ser import set_model_mocks",
        "from ._namespace_utils import NsResolver",
        "from ._signature import generate_pydantic_signature"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 1866,
      "type": "Simulation",
      "description": "\"\"\"Simulate objects stored on workers to check isinstance semantics",
      "context": [
        "",
        "    def test_interactive_dynamic_type_and_stored_remote_instances(self):",
        "        \"\"\"Simulate objects stored on workers to check isinstance semantics",
        "",
        "        Such instances stored in the memory of running worker processes are"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2491,
      "type": "Simulation",
      "description": "# We simulate an interactive session that:",
      "context": [
        "        _prev_sys_path = sys.path.copy()",
        "        try:",
        "            # We simulate an interactive session that:",
        "            # - we start from the /path/to/cloudpickle/tests directory, where a",
        "            #   local .py file (mock_local_file) is located."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2493,
      "type": "Mock Implementation",
      "description": "#   local .py file (mock_local_file) is located.",
      "context": [
        "            # We simulate an interactive session that:",
        "            # - we start from the /path/to/cloudpickle/tests directory, where a",
        "            #   local .py file (mock_local_file) is located.",
        "            # - uses constructs from mock_local_file in remote workers that do",
        "            #   not have access to this file. This situation is"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2494,
      "type": "Mock Implementation",
      "description": "# - uses constructs from mock_local_file in remote workers that do",
      "context": [
        "            # - we start from the /path/to/cloudpickle/tests directory, where a",
        "            #   local .py file (mock_local_file) is located.",
        "            # - uses constructs from mock_local_file in remote workers that do",
        "            #   not have access to this file. This situation is",
        "            #   the justification behind the"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2499,
      "type": "Mock Implementation",
      "description": "_mock_interactive_session_cwd = os.path.dirname(__file__)",
      "context": [
        "            #   (un)register_pickle_by_value(module) api that cloudpickle",
        "            #   exposes.",
        "            _mock_interactive_session_cwd = os.path.dirname(__file__)",
        "",
        "            # First, remove sys.path entries that could point to"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2504,
      "type": "Mock Implementation",
      "description": "_maybe_remove(sys.path, _mock_interactive_session_cwd)",
      "context": [
        "            # /path/to/cloudpickle/tests and be in inherited by the worker",
        "            _maybe_remove(sys.path, '')",
        "            _maybe_remove(sys.path, _mock_interactive_session_cwd)",
        "",
        "            # Add the desired session working directory"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2507,
      "type": "Mock Implementation",
      "description": "sys.path.insert(0, _mock_interactive_session_cwd)",
      "context": [
        "",
        "            # Add the desired session working directory",
        "            sys.path.insert(0, _mock_interactive_session_cwd)",
        "",
        "            with subprocess_worker(protocol=self.protocol) as w:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2512,
      "type": "Mock Implementation",
      "description": "lambda p: sys.path.remove(p), _mock_interactive_session_cwd",
      "context": [
        "                # Make the module unavailable in the remote worker",
        "                w.run(",
        "                    lambda p: sys.path.remove(p), _mock_interactive_session_cwd",
        "                )",
        "                # Import the actual file after starting the module since the"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2520,
      "type": "Mock Implementation",
      "description": "import mock_local_folder.mod as mod",
      "context": [
        "                # TODO Once Python 3.6 reaches end of life, rely on mp_context",
        "                # instead.",
        "                import mock_local_folder.mod as mod",
        "                # The constructs whose pickling mechanism is changed using",
        "                # register_pickle_by_value are functions, classes, TypeVar and"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2524,
      "type": "Mock Implementation",
      "description": "from mock_local_folder.mod import (",
      "context": [
        "                # register_pickle_by_value are functions, classes, TypeVar and",
        "                # modules.",
        "                from mock_local_folder.mod import (",
        "                    local_function, LocalT, LocalClass",
        "                )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2531,
      "type": "Mock Implementation",
      "description": "w.run(lambda: __import__(\"mock_local_folder.mod\"))",
      "context": [
        "                # worker.",
        "                with pytest.raises(ImportError):",
        "                    w.run(lambda: __import__(\"mock_local_folder.mod\"))",
        "                with pytest.raises(ImportError):",
        "                    w.run("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2534,
      "type": "Mock Implementation",
      "description": "lambda: __import__(\"mock_local_folder.subfolder.mod\")",
      "context": [
        "                with pytest.raises(ImportError):",
        "                    w.run(",
        "                        lambda: __import__(\"mock_local_folder.subfolder.mod\")",
        "                    )",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2558,
      "type": "Mock Implementation",
      "description": "# was registered for pickling by value. A \"mock_local_folder\"",
      "context": [
        "                # Constructs from modules inside subfolders should be pickled",
        "                # by value if a namespace module pointing to some parent folder",
        "                # was registered for pickling by value. A \"mock_local_folder\"",
        "                # namespace module falls into that category, but a",
        "                # \"mock_local_folder.mod\" one does not."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2560,
      "type": "Mock Implementation",
      "description": "# \"mock_local_folder.mod\" one does not.",
      "context": [
        "                # was registered for pickling by value. A \"mock_local_folder\"",
        "                # namespace module falls into that category, but a",
        "                # \"mock_local_folder.mod\" one does not.",
        "                from mock_local_folder.subfolder.submod import (",
        "                    LocalSubmodClass, LocalSubmodT, local_submod_function"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2561,
      "type": "Mock Implementation",
      "description": "from mock_local_folder.subfolder.submod import (",
      "context": [
        "                # namespace module falls into that category, but a",
        "                # \"mock_local_folder.mod\" one does not.",
        "                from mock_local_folder.subfolder.submod import (",
        "                    LocalSubmodClass, LocalSubmodT, local_submod_function",
        "                )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2570,
      "type": "Mock Implementation",
      "description": "lambda: __import__(\"mock_local_folder.subfolder.mod\")",
      "context": [
        "                with pytest.raises(ImportError):",
        "                    w.run(",
        "                        lambda: __import__(\"mock_local_folder.subfolder.mod\")",
        "                    )",
        "                with pytest.raises(ImportError):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2581,
      "type": "Mock Implementation",
      "description": "w.run(lambda: __import__(\"mock_local_folder.mod\"))",
      "context": [
        "",
        "                with pytest.raises(ImportError):",
        "                    w.run(lambda: __import__(\"mock_local_folder.mod\"))",
        "",
        "                # Test the namespace folder case"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2584,
      "type": "Mock Implementation",
      "description": "import mock_local_folder",
      "context": [
        "",
        "                # Test the namespace folder case",
        "                import mock_local_folder",
        "                register_pickle_by_value(mock_local_folder)",
        "                assert w.run(lambda: local_function()) == local_function()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2585,
      "type": "Mock Implementation",
      "description": "register_pickle_by_value(mock_local_folder)",
      "context": [
        "                # Test the namespace folder case",
        "                import mock_local_folder",
        "                register_pickle_by_value(mock_local_folder)",
        "                assert w.run(lambda: local_function()) == local_function()",
        "                assert w.run(lambda: _func()) == _func()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2588,
      "type": "Mock Implementation",
      "description": "unregister_pickle_by_value(mock_local_folder)",
      "context": [
        "                assert w.run(lambda: local_function()) == local_function()",
        "                assert w.run(lambda: _func()) == _func()",
        "                unregister_pickle_by_value(mock_local_folder)",
        "",
        "                with pytest.raises(ImportError):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2597,
      "type": "Mock Implementation",
      "description": "import mock_local_folder.subfolder.submod",
      "context": [
        "                # Test the case of registering a single module inside a",
        "                # subfolder.",
        "                import mock_local_folder.subfolder.submod",
        "                register_pickle_by_value(mock_local_folder.subfolder.submod)",
        "                assert w.run(lambda: _func()) == _func()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2598,
      "type": "Mock Implementation",
      "description": "register_pickle_by_value(mock_local_folder.subfolder.submod)",
      "context": [
        "                # subfolder.",
        "                import mock_local_folder.subfolder.submod",
        "                register_pickle_by_value(mock_local_folder.subfolder.submod)",
        "                assert w.run(lambda: _func()) == _func()",
        "                assert w.run(lambda: _t.__name__) == _t.__name__"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2609,
      "type": "Mock Implementation",
      "description": "w.run(lambda: __import__(\"mock_local_folder.mod\"))",
      "context": [
        "                    w.run(lambda: local_function)",
        "                with pytest.raises(ImportError):",
        "                    w.run(lambda: __import__(\"mock_local_folder.mod\"))",
        "",
        "                unregister_pickle_by_value("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2612,
      "type": "Mock Implementation",
      "description": "mock_local_folder.subfolder.submod",
      "context": [
        "",
        "                unregister_pickle_by_value(",
        "                    mock_local_folder.subfolder.submod",
        "                )",
        "                with pytest.raises(ImportError):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2618,
      "type": "Mock Implementation",
      "description": "import mock_local_folder.subfolder",
      "context": [
        "",
        "                # Test the subfolder namespace module case",
        "                import mock_local_folder.subfolder",
        "                register_pickle_by_value(mock_local_folder.subfolder)",
        "                assert w.run(lambda: _func()) == _func()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2619,
      "type": "Mock Implementation",
      "description": "register_pickle_by_value(mock_local_folder.subfolder)",
      "context": [
        "                # Test the subfolder namespace module case",
        "                import mock_local_folder.subfolder",
        "                register_pickle_by_value(mock_local_folder.subfolder)",
        "                assert w.run(lambda: _func()) == _func()",
        "                assert w.run(lambda: _t.__name__) == _t.__name__"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2624,
      "type": "Mock Implementation",
      "description": "unregister_pickle_by_value(mock_local_folder.subfolder)",
      "context": [
        "                assert w.run(lambda: _class().method()) == _class().method()",
        "",
        "                unregister_pickle_by_value(mock_local_folder.subfolder)",
        "        finally:",
        "            _fname = \"mock_local_folder\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/srsly/tests/cloudpickle/cloudpickle_test.py",
      "line": 2626,
      "type": "Mock Implementation",
      "description": "_fname = \"mock_local_folder\"",
      "context": [
        "                unregister_pickle_by_value(mock_local_folder.subfolder)",
        "        finally:",
        "            _fname = \"mock_local_folder\"",
        "            sys.path = _prev_sys_path",
        "            for m in [_fname, f\"{_fname}.mod\", f\"{_fname}.subfolder\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/conftest.py",
      "line": 8,
      "type": "Mock Method",
      "description": "def mock_sleep():",
      "context": [
        "",
        "@types.coroutine",
        "def mock_sleep():",
        "    yield \"mock_sleep\"",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/conftest.py",
      "line": 8,
      "type": "Mock Method",
      "description": "def mock_sleep():",
      "context": [
        "",
        "@types.coroutine",
        "def mock_sleep():",
        "    yield \"mock_sleep\"",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/conftest.py",
      "line": 9,
      "type": "Mock Implementation",
      "description": "yield \"mock_sleep\"",
      "context": [
        "@types.coroutine",
        "def mock_sleep():",
        "    yield \"mock_sleep\"",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/conftest.py",
      "line": 29,
      "type": "Mock Implementation",
      "description": "if value != \"mock_sleep\":  # pragma: no cover",
      "context": [
        "                while True:",
        "                    value = coro.send(None)",
        "                    if value != \"mock_sleep\":  # pragma: no cover",
        "                        raise RuntimeError(",
        "                            \"coroutine runner confused: {!r}\".format(value)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/test_async_generator.py",
      "line": 9,
      "type": "Mock Implementation",
      "description": "from .conftest import mock_sleep",
      "context": [
        "import gc",
        "",
        "from .conftest import mock_sleep",
        "from .. import (",
        "    async_generator,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/test_async_generator.py",
      "line": 47,
      "type": "Mock Implementation",
      "description": "await mock_sleep()",
      "context": [
        "    async for value in ait:",
        "        await yield_(value * 2)",
        "        await mock_sleep()",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/test_async_generator.py",
      "line": 131,
      "type": "Simulation",
      "description": "# thrown in from the coroutine runner -- this simulates something like an",
      "context": [
        "# it's equivalent to a simple 'raise MyTestError`. But, for this test to check",
        "# the thing we want it to check, the point is that the exception must be",
        "# thrown in from the coroutine runner -- this simulates something like an",
        "# 'await sock.recv(...) -> TimeoutError'.",
        "@types.coroutine"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/test_async_generator.py",
      "line": 198,
      "type": "Mock Implementation",
      "description": "await mock_sleep()",
      "context": [
        "    @async_generator",
        "    async def f():",
        "        await mock_sleep()",
        "",
        "    ag = f()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/test_async_generator.py",
      "line": 203,
      "type": "Mock Implementation",
      "description": "assert sender1.send(None) == \"mock_sleep\"",
      "context": [
        "    sender1 = ag.asend(None)",
        "    sender2 = ag.asend(None)",
        "    assert sender1.send(None) == \"mock_sleep\"",
        "    with pytest.raises(ValueError):",
        "        sender2.send(None)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/test_async_generator.py",
      "line": 215,
      "type": "Mock Implementation",
      "description": "await mock_sleep()",
      "context": [
        "    @async_generator",
        "    async def f():",
        "        await mock_sleep()",
        "        await yield_(\"final yield\")",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/test_async_generator.py",
      "line": 221,
      "type": "Mock Implementation",
      "description": "assert fut == \"mock_sleep\"",
      "context": [
        "    asend_coro = ag.asend(None)",
        "    fut = asend_coro.send(None)",
        "    assert fut == \"mock_sleep\"",
        "    # Now the async generator's frame is not executing, but a call to asend()",
        "    # *is* executing. Make sure that in this case, ag_running is True, and we"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/test_async_generator.py",
      "line": 329,
      "type": "Mock Implementation",
      "description": "await mock_sleep()",
      "context": [
        "        await yield_(1)",
        "    finally:",
        "        await mock_sleep()",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/test_async_generator.py",
      "line": 631,
      "type": "Mock Implementation",
      "description": "await mock_sleep()",
      "context": [
        "            await yield_(1)",
        "        finally:",
        "            await mock_sleep()",
        "        try:",
        "            await yield_(2)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/test_async_generator.py",
      "line": 914,
      "type": "Mock Implementation",
      "description": "events.append(\"mock_sleep {}\".format(ident))",
      "context": [
        "            events.append(\"after yield 2 {}\".format(ident))",
        "        finally:",
        "            events.append(\"mock_sleep {}\".format(ident))",
        "            await mock_sleep()",
        "        try:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/test_async_generator.py",
      "line": 915,
      "type": "Mock Implementation",
      "description": "await mock_sleep()",
      "context": [
        "        finally:",
        "            events.append(\"mock_sleep {}\".format(ident))",
        "            await mock_sleep()",
        "        try:",
        "            events.append(\"yield 3 {}\".format(ident))"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/test_async_generator.py",
      "line": 977,
      "type": "Mock Implementation",
      "description": "\"yield 2 A\", \"after yield 2 A\", \"mock_sleep A\", \"yield 3 A\",",
      "context": [
        "    assert refA() is None",
        "    assert events == [",
        "        \"yield 2 A\", \"after yield 2 A\", \"mock_sleep A\", \"yield 3 A\",",
        "        \"unwind 3 A\"",
        "    ]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/test_async_generator.py",
      "line": 995,
      "type": "Mock Implementation",
      "description": "\"yield 2 C\", \"yield 2 B\", \"after yield 2 C\", \"mock_sleep C\",",
      "context": [
        "        gc.collect()",
        "    assert events == [",
        "        \"yield 2 C\", \"yield 2 B\", \"after yield 2 C\", \"mock_sleep C\",",
        "        \"yield 3 C\", \"finalizer B\", \"finalizer C\"",
        "    ]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/async_generator/_tests/test_async_generator.py",
      "line": 1013,
      "type": "Mock Implementation",
      "description": "\"before aclose B\", \"mock_sleep B\", \"before aclose C\", \"unwind 3 C\",",
      "context": [
        "",
        "    assert events == [",
        "        \"before aclose B\", \"mock_sleep B\", \"before aclose C\", \"unwind 3 C\",",
        "        \"after aclose both\"",
        "    ]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/cloudpathlib/local/localclient.py",
      "line": 49,
      "type": "Simulation",
      "description": "\"storage\" refers to the local storage that simulates the cloud.",
      "context": [
        "        \"\"\"Return the default storage directory for this client class. This is used if a client",
        "        is instantiated without a storage directory being explicitly provided. In this usage,",
        "        \"storage\" refers to the local storage that simulates the cloud.",
        "        \"\"\"",
        "        if cls._default_storage_temp_dir is None:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/cloudpathlib/local/localclient.py",
      "line": 60,
      "type": "Simulation",
      "description": "a storage directory. In this usage, \"storage\" refers to the local storage that simulates",
      "context": [
        "        \"\"\"Reset the default storage directly. This tears down and recreates the directory used by",
        "        default for this client class when instantiating a client without explicitly providing",
        "        a storage directory. In this usage, \"storage\" refers to the local storage that simulates",
        "        the cloud.",
        "        \"\"\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/cloudpathlib/local/localclient.py",
      "line": 69,
      "type": "Simulation",
      "description": "the one that simulates the cloud. If no storage directory was provided on instantiating the",
      "context": [
        "    def local_storage_dir(self) -> Path:",
        "        \"\"\"The local directory where files are stored for this client. This storage directory is",
        "        the one that simulates the cloud. If no storage directory was provided on instantiating the",
        "        client, the default storage directory for this client class is used.",
        "        \"\"\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/numpy/_core/getlimits.py",
      "line": 35,
      "type": "Simulation",
      "description": "\"\"\" Object to simulate MachAr instance \"\"\"",
      "context": [
        "",
        "class MachArLike:",
        "    \"\"\" Object to simulate MachAr instance \"\"\"",
        "    def __init__(self, ftype, *, eps, epsneg, huge, tiny,",
        "                 ibeta, smallest_subnormal=None, **kwargs):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/numpy/lib/_npyio_impl.py",
      "line": 554,
      "type": "Simulation",
      "description": ">>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
      "context": [
        "    >>> np.save(outfile, x)",
        "",
        "    >>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
        "    >>> np.load(outfile)",
        "    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/numpy/lib/_npyio_impl.py",
      "line": 667,
      "type": "Simulation",
      "description": ">>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
      "context": [
        "",
        "    >>> np.savez(outfile, x, y)",
        "    >>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
        "    >>> npzfile = np.load(outfile)",
        "    >>> npzfile.files"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/numpy/tests/test_numpy_config.py",
      "line": 24,
      "type": "Mock Method",
      "description": "def test_pyyaml_not_found(self, mock_yaml_importer):",
      "context": [
        "",
        "    @patch(\"numpy.__config__._check_pyyaml\")",
        "    def test_pyyaml_not_found(self, mock_yaml_importer):",
        "        mock_yaml_importer.side_effect = ModuleNotFoundError()",
        "        with pytest.warns(UserWarning):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/numpy/tests/test_numpy_config.py",
      "line": 24,
      "type": "Mock Method",
      "description": "def test_pyyaml_not_found(self, mock_yaml_importer):",
      "context": [
        "",
        "    @patch(\"numpy.__config__._check_pyyaml\")",
        "    def test_pyyaml_not_found(self, mock_yaml_importer):",
        "        mock_yaml_importer.side_effect = ModuleNotFoundError()",
        "        with pytest.warns(UserWarning):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/numpy/tests/test_numpy_config.py",
      "line": 25,
      "type": "Mock Implementation",
      "description": "mock_yaml_importer.side_effect = ModuleNotFoundError()",
      "context": [
        "    @patch(\"numpy.__config__._check_pyyaml\")",
        "    def test_pyyaml_not_found(self, mock_yaml_importer):",
        "        mock_yaml_importer.side_effect = ModuleNotFoundError()",
        "        with pytest.warns(UserWarning):",
        "            np.show_config()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/numpy/random/tests/test_generator_mt19937.py",
      "line": 2759,
      "type": "Simulation",
      "description": "# Simulate unpickling an old pickle that only has the name",
      "context": [
        "    # Directly call reduce which is used in pickling",
        "    ctor, (bit_gen, ), _ = rg.__reduce__()",
        "    # Simulate unpickling an old pickle that only has the name",
        "    assert bit_gen.__class__.__name__ == \"PCG64DXSM\"",
        "    print(ctor)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/numpy/random/tests/test_randomstate.py",
      "line": 2060,
      "type": "Simulation",
      "description": "# Simulate unpickling an old pickle that only has the name",
      "context": [
        "    # Directly call reduce which is used in pickling",
        "    ctor, args, state_a = rs.__reduce__()",
        "    # Simulate unpickling an old pickle that only has the name",
        "    assert args[0].__class__.__name__ == \"MT19937\"",
        "    b = ctor(*(\"MT19937\",))"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/numpy/lib/tests/test__datasource.py",
      "line": 347,
      "type": "Simulation",
      "description": "# simulate failed __init__ by removing key attribute",
      "context": [
        "",
        "    ds = datasource.DataSource()",
        "    # simulate failed __init__ by removing key attribute",
        "    # produced within __init__ and expected by __del__",
        "    del ds._istmpdest"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/numpy/_core/tests/test_overrides.py",
      "line": 515,
      "type": "Mock Method",
      "description": "def test_sum_on_mock_array(self):",
      "context": [
        "        assert_equal(np.sum(MyArray()), 'yes')",
        "",
        "    def test_sum_on_mock_array(self):",
        "",
        "        # We need a proxy for mocks because __array_function__ is only looked"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/numpy/_core/tests/test_overrides.py",
      "line": 515,
      "type": "Mock Method",
      "description": "def test_sum_on_mock_array(self):",
      "context": [
        "        assert_equal(np.sum(MyArray()), 'yes')",
        "",
        "    def test_sum_on_mock_array(self):",
        "",
        "        # We need a proxy for mocks because __array_function__ is only looked"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/numpy/_core/tests/test_regression.py",
      "line": 1728,
      "type": "Simulation",
      "description": "# it is designed to simulate an old API",
      "context": [
        "            # squeeze to have an axis argument",
        "            # NOTE: this example is somewhat artificial;",
        "            # it is designed to simulate an old API",
        "            # expectation to guard against regression",
        "            def squeeze(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pygments/lexers/_scilab_builtins.py",
      "line": 2773,
      "type": "Simulation",
      "description": "'scicos_simulate',",
      "context": [
        "    'sci_sparse',",
        "    'scicos_getvalue',",
        "    'scicos_simulate',",
        "    'scicos_workspace_init',",
        "    'scisptdemo',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pygments/lexers/_scilab_builtins.py",
      "line": 2953,
      "type": "Simulation",
      "description": "'xcos_simulate',",
      "context": [
        "    'xcos_debug_gui',",
        "    'xcos_run',",
        "    'xcos_simulate',",
        "    'xcov',",
        "    'xmltochm',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pygments/lexers/_scilab_builtins.py",
      "line": 3040,
      "type": "Simulation",
      "description": "'simulated_annealinglib',",
      "context": [
        "    'scinoteslib',",
        "    'signal_processinglib',",
        "    'simulated_annealinglib',",
        "    'soundlib',",
        "    'sparselib',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pygments/lexers/_stata_builtins.py",
      "line": 245,
      "type": "Simulation",
      "description": "\"signtest\", \"simul\", \"simul_7\", \"simulate\", \"simulate_8\",",
      "context": [
        "    \"set_defaults\", \"sfrancia\", \"sh\", \"she\", \"shel\", \"shell\",",
        "    \"shewhart\", \"shewhart_7\", \"signestimationsample\", \"signrank\",",
        "    \"signtest\", \"simul\", \"simul_7\", \"simulate\", \"simulate_8\",",
        "    \"sktest\", \"sleep\", \"slogit\", \"slogit_d2\", \"slogit_p\", \"smooth\",",
        "    \"snapspan\", \"so\", \"sor\", \"sort\", \"spearman\", \"spikeplot\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/command/editable_wheel.py",
      "line": 576,
      "type": "Simulation",
      "description": "This function tries to simulate this behavior without having to create an",
      "context": [
        "    from the cpython core developers is to write them as ``open(path, \"w\")``",
        "    and ignore warnings (see python/cpython#77102, pypa/setuptools#3937).",
        "    This function tries to simulate this behavior without having to create an",
        "    actual file, in a way that supports a range of active Python versions.",
        "    (There seems to be some variety in the way different version of Python handle"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 14,
      "type": "Mock Method",
      "description": "def test_build_libraries(self, mock_newer):",
      "context": [
        "class TestBuildCLib:",
        "    @mock.patch('setuptools.command.build_clib.newer_pairwise_group')",
        "    def test_build_libraries(self, mock_newer):",
        "        dist = Distribution()",
        "        cmd = build_clib(dist)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 14,
      "type": "Mock Method",
      "description": "def test_build_libraries(self, mock_newer):",
      "context": [
        "class TestBuildCLib:",
        "    @mock.patch('setuptools.command.build_clib.newer_pairwise_group')",
        "    def test_build_libraries(self, mock_newer):",
        "        dist = Distribution()",
        "        cmd = build_clib(dist)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 42,
      "type": "Mock Implementation",
      "description": "mock_newer.return_value = ([], [])",
      "context": [
        "        # system works",
        "        cmd.compiler = mock.MagicMock(spec=cmd.compiler)",
        "        mock_newer.return_value = ([], [])",
        "",
        "        obj_deps = {'': ('global.h',), 'example.c': ('example.h',)}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 48,
      "type": "Mock Implementation",
      "description": "assert [['example.c', 'global.h', 'example.h']] in mock_newer.call_args[0]",
      "context": [
        "",
        "        cmd.build_libraries(libs)",
        "        assert [['example.c', 'global.h', 'example.h']] in mock_newer.call_args[0]",
        "        assert not cmd.compiler.compile.called",
        "        assert cmd.compiler.create_static_lib.call_count == 1"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 55,
      "type": "Mock Implementation",
      "description": "mock_newer.return_value = ''  # anything as long as it's not ([],[])",
      "context": [
        "        cmd.compiler.reset_mock()",
        "",
        "        mock_newer.return_value = ''  # anything as long as it's not ([],[])",
        "        cmd.build_libraries(libs)",
        "        assert cmd.compiler.compile.call_count == 1"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 61,
      "type": "Mock Method",
      "description": "def test_build_libraries_reproducible(self, mock_newer):",
      "context": [
        "",
        "    @mock.patch('setuptools.command.build_clib.newer_pairwise_group')",
        "    def test_build_libraries_reproducible(self, mock_newer):",
        "        dist = Distribution()",
        "        cmd = build_clib(dist)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 61,
      "type": "Mock Method",
      "description": "def test_build_libraries_reproducible(self, mock_newer):",
      "context": [
        "",
        "    @mock.patch('setuptools.command.build_clib.newer_pairwise_group')",
        "    def test_build_libraries_reproducible(self, mock_newer):",
        "        dist = Distribution()",
        "        cmd = build_clib(dist)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 68,
      "type": "Mock Implementation",
      "description": "mock_newer.return_value = ([], [])",
      "context": [
        "        # system works",
        "        cmd.compiler = mock.MagicMock(spec=cmd.compiler)",
        "        mock_newer.return_value = ([], [])",
        "",
        "        original_sources = ['a-example.c', 'example.c']"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 77,
      "type": "Mock Implementation",
      "description": "computed_call_args = mock_newer.call_args[0]",
      "context": [
        "",
        "        cmd.build_libraries(libs)",
        "        computed_call_args = mock_newer.call_args[0]",
        "",
        "        while sources == original_sources:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 84,
      "type": "Mock Implementation",
      "description": "assert computed_call_args == mock_newer.call_args[0]",
      "context": [
        "",
        "        cmd.build_libraries(libs)",
        "        assert computed_call_args == mock_newer.call_args[0]",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_build_ext.py",
      "line": 72,
      "type": "Mock Implementation",
      "description": "# Mock value needed to pass tests",
      "context": [
        "            py_limited_api=True,",
        "        )",
        "        # Mock value needed to pass tests",
        "        ext._links_to_dynamic = False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 92,
      "type": "Simulation",
      "description": "# Simulate a pre-existing `build` directory",
      "context": [
        "        _populate_project_dir(tmp_path, files, options)",
        "",
        "        # Simulate a pre-existing `build` directory",
        "        (tmp_path / \"build\").mkdir()",
        "        (tmp_path / \"build/lib\").mkdir()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 196,
      "type": "Simulation",
      "description": "([\"venv/bin/simulate_venv\"], {\"pkg\"}),",
      "context": [
        "        (\"extra_files\", \"pkgs\"),",
        "        [",
        "            ([\"venv/bin/simulate_venv\"], {\"pkg\"}),",
        "            ([\"pkg-stubs/__init__.pyi\"], {\"pkg\", \"pkg-stubs\"}),",
        "            ([\"other-stubs/__init__.pyi\"], {\"pkg\", \"other-stubs\"}),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 334,
      "type": "Mock Method",
      "description": "def _simulate_package_with_extension(self, tmp_path):",
      "context": [
        "",
        "class TestWithCExtension:",
        "    def _simulate_package_with_extension(self, tmp_path):",
        "        # This example is based on: https://github.com/nucleic/kiwi/tree/1.4.0",
        "        files = ["
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 371,
      "type": "Simulation",
      "description": "self._simulate_package_with_extension(tmp_path)",
      "context": [
        "        C-extensions only, for backward compatibility.",
        "        \"\"\"",
        "        self._simulate_package_with_extension(tmp_path)",
        "",
        "        pyproject = \"\"\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 403,
      "type": "Simulation",
      "description": "self._simulate_package_with_extension(tmp_path)",
      "context": [
        "        explicitly set ``packages`` or ``py-modules``.",
        "        \"\"\"",
        "        self._simulate_package_with_extension(tmp_path)",
        "",
        "        pyproject = \"\"\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 416,
      "type": "Mock Method",
      "description": "def _simulate_package_with_data_files(self, tmp_path, src_root):",
      "context": [
        "",
        "class TestWithPackageData:",
        "    def _simulate_package_with_data_files(self, tmp_path, src_root):",
        "        files = [",
        "            f\"{src_root}/proj/__init__.py\","
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 491,
      "type": "Simulation",
      "description": "self._simulate_package_with_data_files(tmp_path, src_root)",
      "context": [
        "        \"\"\"",
        "        jaraco.path.build(files, prefix=str(tmp_path))",
        "        self._simulate_package_with_data_files(tmp_path, src_root)",
        "",
        "        expected = {"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_core_metadata.py",
      "line": 486,
      "type": "Simulation",
      "description": "# ... but then we simulate the effects of a plugin modifying the distribution",
      "context": [
        "        dist = _makedist()",
        "",
        "        # ... but then we simulate the effects of a plugin modifying the distribution",
        "        for attr, value in fields.values():",
        "            # `dist` and `dist.metadata` are complicated..."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_editable_install.py",
      "line": 1200,
      "type": "Simulation",
      "description": "SimulatedErr = type(\"SimulatedErr\", (Exception,), {})",
      "context": [
        "    cmd.ensure_finalized()",
        "",
        "    SimulatedErr = type(\"SimulatedErr\", (Exception,), {})",
        "    simulated_failure = Mock(side_effect=SimulatedErr())",
        "    monkeypatch.setattr(cmd, \"get_finalized_command\", simulated_failure)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_editable_install.py",
      "line": 1201,
      "type": "Simulation",
      "description": "simulated_failure = Mock(side_effect=SimulatedErr())",
      "context": [
        "",
        "    SimulatedErr = type(\"SimulatedErr\", (Exception,), {})",
        "    simulated_failure = Mock(side_effect=SimulatedErr())",
        "    monkeypatch.setattr(cmd, \"get_finalized_command\", simulated_failure)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_editable_install.py",
      "line": 1202,
      "type": "Simulation",
      "description": "monkeypatch.setattr(cmd, \"get_finalized_command\", simulated_failure)",
      "context": [
        "    SimulatedErr = type(\"SimulatedErr\", (Exception,), {})",
        "    simulated_failure = Mock(side_effect=SimulatedErr())",
        "    monkeypatch.setattr(cmd, \"get_finalized_command\", simulated_failure)",
        "",
        "    with pytest.raises(SimulatedErr) as ctx:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_editable_install.py",
      "line": 1204,
      "type": "Simulation",
      "description": "with pytest.raises(SimulatedErr) as ctx:",
      "context": [
        "    monkeypatch.setattr(cmd, \"get_finalized_command\", simulated_failure)",
        "",
        "    with pytest.raises(SimulatedErr) as ctx:",
        "        cmd.run()",
        "    assert any('debugging-tips' in note for note in ctx.value.__notes__)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/test_manifest.py",
      "line": 378,
      "type": "Simulation",
      "description": "# simulated file list",
      "context": [
        "        ml = make_local_path",
        "",
        "        # simulated file list",
        "        self.make_files([",
        "            'foo.tmp',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line": 39,
      "type": "Mock Method",
      "description": "def _mock_expand_patterns(patterns, *_, **__):",
      "context": [
        "",
        "",
        "def _mock_expand_patterns(patterns, *_, **__):",
        "    \"\"\"",
        "    Allow comparing the given patterns for 2 dist objects."
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line": 39,
      "type": "Mock Method",
      "description": "def _mock_expand_patterns(patterns, *_, **__):",
      "context": [
        "",
        "",
        "def _mock_expand_patterns(patterns, *_, **__):",
        "    \"\"\"",
        "    Allow comparing the given patterns for 2 dist objects."
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line": 53,
      "type": "Mock Implementation",
      "description": "Distribution, \"_expand_patterns\", Mock(side_effect=_mock_expand_patterns)",
      "context": [
        "    monkeypatch.setattr(expand, \"read_attr\", Mock(return_value=\"0.0.1\"))",
        "    monkeypatch.setattr(",
        "        Distribution, \"_expand_patterns\", Mock(side_effect=_mock_expand_patterns)",
        "    )",
        "    setupcfg_example = retrieve_file(url)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/config/test_setupcfg.py",
      "line": 958,
      "type": "Simulation",
      "description": "# This wraps distutil's Distribution.__init__ and simulates",
      "context": [
        "    # that may set a range of variables.",
        "    #",
        "    # This wraps distutil's Distribution.__init__ and simulates",
        "    # pbr or something else setting these values.",
        "    def _fake_distribution_init(self, dist, attrs):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/config/test_setupcfg.py",
      "line": 971,
      "type": "Mock Method",
      "description": "def test_external_setters(self, mock_parent_init, tmpdir):",
      "context": [
        "",
        "    @patch.object(_Distribution, '__init__', autospec=True)",
        "    def test_external_setters(self, mock_parent_init, tmpdir):",
        "        mock_parent_init.side_effect = self._fake_distribution_init",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/config/test_setupcfg.py",
      "line": 971,
      "type": "Mock Method",
      "description": "def test_external_setters(self, mock_parent_init, tmpdir):",
      "context": [
        "",
        "    @patch.object(_Distribution, '__init__', autospec=True)",
        "    def test_external_setters(self, mock_parent_init, tmpdir):",
        "        mock_parent_init.side_effect = self._fake_distribution_init",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/config/test_setupcfg.py",
      "line": 972,
      "type": "Mock Implementation",
      "description": "mock_parent_init.side_effect = self._fake_distribution_init",
      "context": [
        "    @patch.object(_Distribution, '__init__', autospec=True)",
        "    def test_external_setters(self, mock_parent_init, tmpdir):",
        "        mock_parent_init.side_effect = self._fake_distribution_init",
        "",
        "        dist = Distribution(attrs={'project_urls': {'will_be': 'ignored'}})"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/tests/integration/test_pip_install_sdist.py",
      "line": 136,
      "type": "Simulation",
      "description": "# Use a virtualenv to simulate PEP 517 isolation",
      "context": [
        "        run([*venv_pip, \"install\", *deps])",
        "",
        "    # Use a virtualenv to simulate PEP 517 isolation",
        "    # but install fresh setuptools wheel to ensure the version under development",
        "    env = EXTRA_ENV_VARS.get(package, {})"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/_vendor/typeguard/_checkers.py",
      "line": 831,
      "type": "Mock Class",
      "description": "if annotation is Any or annotation is SubclassableAny or isinstance(value, Mock):",
      "context": [
        "            return",
        "",
        "    if annotation is Any or annotation is SubclassableAny or isinstance(value, Mock):",
        "        return",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/_distutils/tests/test_filelist.py",
      "line": 71,
      "type": "Simulation",
      "description": "# simulated file list",
      "context": [
        "        mlp = make_local_path",
        "",
        "        # simulated file list",
        "        file_list.allfiles = [",
        "            'foo.tmp',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 268,
      "type": "Mock Implementation",
      "description": "mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
      "context": [
        "        sysconfig.get_config_vars = gcvs",
        "        with (",
        "            mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
        "            mock.patch.object(self.cc, '_need_link', return_value=True),",
        "            mock.patch.object(self.cc, 'mkpath', return_value=None),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 268,
      "type": "Mock Implementation",
      "description": "mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
      "context": [
        "        sysconfig.get_config_vars = gcvs",
        "        with (",
        "            mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
        "            mock.patch.object(self.cc, '_need_link', return_value=True),",
        "            mock.patch.object(self.cc, 'mkpath', return_value=None),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 281,
      "type": "Mock Implementation",
      "description": "call_args = mock_spawn.call_args[0][0]",
      "context": [
        "            assert self.cc.linker_exe_cxx[0:2] == ['ccache', 'g++-4.2']",
        "            self.cc.link(None, [], 'a.out', target_lang='c++')",
        "            call_args = mock_spawn.call_args[0][0]",
        "            expected = ['ccache', 'g++-4.2', '-bundle', '-undefined', 'dynamic_lookup']",
        "            assert call_args[:5] == expected"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 286,
      "type": "Mock Implementation",
      "description": "call_args = mock_spawn.call_args[0][0]",
      "context": [
        "",
        "            self.cc.link_executable([], 'a.out', target_lang='c++')",
        "            call_args = mock_spawn.call_args[0][0]",
        "            expected = ['ccache', 'g++-4.2', '-o', self.cc.executable_filename('a.out')]",
        "            assert call_args[:4] == expected"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 296,
      "type": "Mock Implementation",
      "description": "call_args = mock_spawn.call_args[0][0]",
      "context": [
        "            assert self.cc.linker_exe_cxx[0:2] == ['wrapper', 'g++-4.2']",
        "            self.cc.link(None, [], 'a.out', target_lang='c++')",
        "            call_args = mock_spawn.call_args[0][0]",
        "            expected = ['wrapper', 'g++-4.2', '-bundle', '-undefined', 'dynamic_lookup']",
        "            assert call_args[:5] == expected"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 301,
      "type": "Mock Implementation",
      "description": "call_args = mock_spawn.call_args[0][0]",
      "context": [
        "",
        "            self.cc.link_executable([], 'a.out', target_lang='c++')",
        "            call_args = mock_spawn.call_args[0][0]",
        "            expected = [",
        "                'wrapper',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 339,
      "type": "Mock Implementation",
      "description": "mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
      "context": [
        "        sysconfig.get_config_vars = gcvs",
        "        with (",
        "            mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
        "            mock.patch.object(self.cc, '_need_link', return_value=True),",
        "            mock.patch.object(self.cc, 'mkpath', return_value=None),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 339,
      "type": "Mock Implementation",
      "description": "mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
      "context": [
        "        sysconfig.get_config_vars = gcvs",
        "        with (",
        "            mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
        "            mock.patch.object(self.cc, '_need_link', return_value=True),",
        "            mock.patch.object(self.cc, 'mkpath', return_value=None),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 350,
      "type": "Mock Implementation",
      "description": "call_args = mock_spawn.call_args[0][0]",
      "context": [
        "            assert self.cc.linker_so[0:2] == ['ccache', 'my_cc']",
        "            self.cc.link(None, [], 'a.out', target_lang='c++')",
        "            call_args = mock_spawn.call_args[0][0]",
        "            expected = ['my_cxx', '-bundle', '-undefined', 'dynamic_lookup']",
        "            assert call_args[:4] == expected"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pkg_resources/tests/test_markers.py",
      "line": 7,
      "type": "Mock Method",
      "description": "def test_ordering(python_version_mock):",
      "context": [
        "",
        "@mock.patch('platform.python_version', return_value='2.7.10')",
        "def test_ordering(python_version_mock):",
        "    assert evaluate_marker(\"python_full_version > '2.7.3'\") is True",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pip/_vendor/requests/cookies.py",
      "line": 23,
      "type": "Mock Class",
      "description": "class MockRequest:",
      "context": [
        "",
        "",
        "class MockRequest:",
        "    \"\"\"Wraps a `requests.Request` to mimic a `urllib2.Request`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pip/_vendor/requests/cookies.py",
      "line": 103,
      "type": "Mock Class",
      "description": "class MockResponse:",
      "context": [
        "",
        "",
        "class MockResponse:",
        "    \"\"\"Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pip/_vendor/requests/models.py",
      "line": 845,
      "type": "Simulation",
      "description": "# simulate reading small chunks of the content",
      "context": [
        "                f\"chunk_size must be an int, it is instead a {type(chunk_size)}.\"",
        "            )",
        "        # simulate reading small chunks of the content",
        "        reused_chunks = iter_slices(self._content, chunk_size)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pip/_internal/operations/check.py",
      "line": 113,
      "type": "Simulation",
      "description": "would_be_installed = _simulate_installation_of(to_install, package_set)",
      "context": [
        "    package_set, _ = create_package_set_from_installed()",
        "    # Install packages",
        "    would_be_installed = _simulate_installation_of(to_install, package_set)",
        "",
        "    # Only warn about directly-dependent packages; create a whitelist of them"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pip/_internal/operations/check.py",
      "line": 142,
      "type": "Mock Method",
      "description": "def _simulate_installation_of(",
      "context": [
        "",
        "",
        "def _simulate_installation_of(",
        "    to_install: list[InstallRequirement], package_set: PackageSet",
        ") -> set[NormalizedName]:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_nlu/lib/python3.13/site-packages/pip/_internal/utils/misc.py",
      "line": 386,
      "type": "Simulation",
      "description": "# Simulates an enum",
      "context": [
        "",
        "",
        "# Simulates an enum",
        "def enum(*sequential: Any, **named: Any) -> type[Any]:",
        "    enums = dict(zip(sequential, range(len(sequential))), **named)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_v2/lib/python3.13/site-packages/pip/_vendor/requests/cookies.py",
      "line": 23,
      "type": "Mock Class",
      "description": "class MockRequest:",
      "context": [
        "",
        "",
        "class MockRequest:",
        "    \"\"\"Wraps a `requests.Request` to mimic a `urllib2.Request`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_v2/lib/python3.13/site-packages/pip/_vendor/requests/cookies.py",
      "line": 103,
      "type": "Mock Class",
      "description": "class MockResponse:",
      "context": [
        "",
        "",
        "class MockResponse:",
        "    \"\"\"Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_v2/lib/python3.13/site-packages/pip/_vendor/requests/models.py",
      "line": 845,
      "type": "Simulation",
      "description": "# simulate reading small chunks of the content",
      "context": [
        "                f\"chunk_size must be an int, it is instead a {type(chunk_size)}.\"",
        "            )",
        "        # simulate reading small chunks of the content",
        "        reused_chunks = iter_slices(self._content, chunk_size)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_v2/lib/python3.13/site-packages/pip/_internal/operations/check.py",
      "line": 113,
      "type": "Simulation",
      "description": "would_be_installed = _simulate_installation_of(to_install, package_set)",
      "context": [
        "    package_set, _ = create_package_set_from_installed()",
        "    # Install packages",
        "    would_be_installed = _simulate_installation_of(to_install, package_set)",
        "",
        "    # Only warn about directly-dependent packages; create a whitelist of them"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv_v2/lib/python3.13/site-packages/pip/_internal/operations/check.py",
      "line": 142,
      "type": "Mock Method",
      "description": "def _simulate_installation_of(",
      "context": [
        "",
        "",
        "def _simulate_installation_of(",
        "    to_install: list[InstallRequirement], package_set: PackageSet",
        ") -> set[NormalizedName]:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv_v2/lib/python3.13/site-packages/pip/_internal/utils/misc.py",
      "line": 386,
      "type": "Simulation",
      "description": "# Simulates an enum",
      "context": [
        "",
        "",
        "# Simulates an enum",
        "def enum(*sequential: Any, **named: Any) -> type[Any]:",
        "    enums = dict(zip(sequential, range(len(sequential))), **named)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/cli/__main__.py",
      "line": 59,
      "type": "Mock Implementation",
      "description": "# Mock response",
      "context": [
        "        recommended_model = model or \"llama3.2-3b\"",
        "    ",
        "    # Mock response",
        "    response = f\"Mock response using {recommended_model}\\n\\nThis demonstrates V2.0 Intelligence Layer integration.\\nThe system selected {recommended_model} based on {priority} optimization.\"",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/cli/advanced_commands.py",
      "line": 536,
      "type": "Simulation",
      "description": "# Simulate deployment time",
      "context": [
        "                    progress.update(task, description=f\"Deploying {step}...\")",
        "                    progress.advance(task)",
        "                    # Simulate deployment time",
        "                    import time",
        "                    time.sleep(0.5)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/ai_streaming.py",
      "line": 94,
      "type": "Simulation",
      "description": "# Simulate model loading time",
      "context": [
        "            )",
        "            ",
        "            # Simulate model loading time",
        "            for i in range(3):",
        "                if self.cancel_requested:"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/simple_dashboard.py",
      "line": 96,
      "type": "Mock Method",
      "description": "def simulate_generation(self):",
      "context": [
        "        input(\"\u23ce Naci\u015bnij Enter...\")",
        "    ",
        "    def simulate_generation(self):",
        "        if not self.agents:",
        "            print(\"\u274c Brak agent\u00f3w do generacji!\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/simple_dashboard.py",
      "line": 241,
      "type": "Simulation",
      "description": "self.simulate_generation()",
      "context": [
        "                    self.add_test_agent()",
        "                elif choice == '2':",
        "                    self.simulate_generation()",
        "                elif choice == '3':",
        "                    self.show_details()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/workspace_extension.py",
      "line": 234,
      "type": "Simulation",
      "description": "# Simulate code generation (jak TW\u00d3J system)",
      "context": [
        "    print(\"\\n\ud83d\udcdd Testing workspace file creation...\")",
        "    ",
        "    # Simulate code generation (jak TW\u00d3J system)",
        "    sample_codes = [",
        "        {"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/workspace_manager.py",
      "line": 543,
      "type": "Simulation",
      "description": "# Simulate code generation (like YOUR agents would do)",
      "context": [
        "    await workspace_manager.create_project_structure(workspace_id, \"fastapi\")",
        "    ",
        "    # Simulate code generation (like YOUR agents would do)",
        "    sample_code = '''",
        "from fastapi import FastAPI, Depends, HTTPException"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/cli-original/__main__.py",
      "line": 59,
      "type": "Mock Implementation",
      "description": "# Mock response",
      "context": [
        "        recommended_model = model or \"llama3.2-3b\"",
        "    ",
        "    # Mock response",
        "    response = f\"Mock response using {recommended_model}\\n\\nThis demonstrates V2.0 Intelligence Layer integration.\\nThe system selected {recommended_model} based on {priority} optimization.\"",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/cli-original/advanced_commands.py",
      "line": 536,
      "type": "Simulation",
      "description": "# Simulate deployment time",
      "context": [
        "                    progress.update(task, description=f\"Deploying {step}...\")",
        "                    progress.advance(task)",
        "                    # Simulate deployment time",
        "                    import time",
        "                    time.sleep(0.5)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/api-gateway-original/src/main.py",
      "line": 233,
      "type": "Mock Implementation",
      "description": "cost=0.001,  # Mock cost - integrate with real cost calculation",
      "context": [
        "            model_used=request.model_preference or \"llama3.2-3b\",",
        "            model_recommended=\"llama3.2-3b\",",
        "            cost=0.001,  # Mock cost - integrate with real cost calculation",
        "            latency=1000,  # Mock latency",
        "            context=request.context"
      ],
      "complexity": "Low",
      "priority": 5
    },
    {
      "file": "backups/v2-deployment-20251011-092839/api-gateway-original/src/main.py",
      "line": 234,
      "type": "Mock Implementation",
      "description": "latency=1000,  # Mock latency",
      "context": [
        "            model_recommended=\"llama3.2-3b\",",
        "            cost=0.001,  # Mock cost - integrate with real cost calculation",
        "            latency=1000,  # Mock latency",
        "            context=request.context",
        "        )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/api-gateway-original/src/main.py",
      "line": 290,
      "type": "Simulation",
      "description": "# Simulate task processing - integrate with real agent_executor",
      "context": [
        "    \"\"\"",
        "    try:",
        "        # Simulate task processing - integrate with real agent_executor",
        "        await asyncio.sleep(2)",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/orchestration/task_decomposer_fixed.py",
      "line": 223,
      "type": "Mock Implementation",
      "description": "# Return mock response for testing",
      "context": [
        "        \"\"\"",
        "        if not self.llm_client:",
        "            # Return mock response for testing",
        "            return self._generate_mock_llm_response(task_description)",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/orchestration/task_decomposer_fixed.py",
      "line": 224,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        if not self.llm_client:",
        "            # Return mock response for testing",
        "            return self._generate_mock_llm_response(task_description)",
        "        ",
        "        # Enhanced prompt for better JSON output"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/orchestration/task_decomposer_fixed.py",
      "line": 224,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        if not self.llm_client:",
        "            # Return mock response for testing",
        "            return self._generate_mock_llm_response(task_description)",
        "        ",
        "        # Enhanced prompt for better JSON output"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/orchestration/task_decomposer_fixed.py",
      "line": 259,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        except Exception as e:",
        "            logger.error(f\"LLM call failed: {e}\")",
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/orchestration/task_decomposer_fixed.py",
      "line": 259,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        except Exception as e:",
        "            logger.error(f\"LLM call failed: {e}\")",
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/orchestration/task_decomposer_fixed.py",
      "line": 261,
      "type": "Mock Method",
      "description": "def _generate_mock_llm_response(self, task_description: str) -> str:",
      "context": [
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:",
        "        \"\"\"Generate mock response for testing purposes\"\"\"",
        "        return f\"\"\"{{"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/orchestration/task_decomposer_fixed.py",
      "line": 261,
      "type": "Mock Method",
      "description": "def _generate_mock_llm_response(self, task_description: str) -> str:",
      "context": [
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:",
        "        \"\"\"Generate mock response for testing purposes\"\"\"",
        "        return f\"\"\"{{"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/integrations/test_integrations.py",
      "line": 14,
      "type": "Mock Method",
      "description": "def test_github_mock():",
      "context": [
        "",
        "",
        "def test_github_mock():",
        "    \"\"\"Test GitHub integration (mock - bez prawdziwych API calls)\"\"\"",
        "    print(\"=\"*70)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/execution/agent_executor_fixed.py",
      "line": 386,
      "type": "Mock Implementation",
      "description": "# Placeholder for API call implementation",
      "context": [
        "    ) -> Any:",
        "        \"\"\"Execute API call task.\"\"\"",
        "        # Placeholder for API call implementation",
        "        # This would integrate with the Agent Zero V1 API routing system",
        "        endpoint = task_def.get(\"endpoint\", \"\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/execution/agent_executor_fixed.py",
      "line": 394,
      "type": "Mock Implementation",
      "description": "# Mock response for now - replace with actual API integration",
      "context": [
        "        self.logger.info(f\"API call: {method} {endpoint}\")",
        "        ",
        "        # Mock response for now - replace with actual API integration",
        "        return {",
        "            \"status\": \"success\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/execution/agent_executor_fixed.py",
      "line": 415,
      "type": "Mock Implementation",
      "description": "# Mock response - replace with Neo4j integration",
      "context": [
        "        self.logger.info(f\"Knowledge query: {query_type}\")",
        "        ",
        "        # Mock response - replace with Neo4j integration",
        "        return {",
        "            \"status\": \"success\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/execution/project_orchestrator_enhanced.py",
      "line": 47,
      "type": "Simulation",
      "description": "# Simulate project execution",
      "context": [
        "        start_time = time.time()",
        "        ",
        "        # Simulate project execution",
        "        print(\"\ud83d\udccb Decomposing requirements into tasks...\")",
        "        await asyncio.sleep(1)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/interactive_control_system.py",
      "line": 206,
      "type": "Simulation",
      "description": "# For demonstration, we'll simulate the execution process",
      "context": [
        "        ",
        "        # This would integrate with the actual ProjectOrchestrator",
        "        # For demonstration, we'll simulate the execution process",
        "        ",
        "        print(\"\ud83d\udd04 Integrating with ProjectOrchestrator...\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/interactive_control_system.py",
      "line": 210,
      "type": "Simulation",
      "description": "# Simulate task execution phases",
      "context": [
        "        print(\"\ud83d\udd04 Integrating with ProjectOrchestrator...\")",
        "        ",
        "        # Simulate task execution phases",
        "        phases = [",
        "            (\"Analysis\", \"Analyzing requirements and architecture\", 15),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/interactive_control_system.py",
      "line": 236,
      "type": "Simulation",
      "description": "# Simulate agent execution with real-time updates",
      "context": [
        "            })",
        "            ",
        "            # Simulate agent execution with real-time updates",
        "            await self._simulate_phase_execution(session, phase_name, phase_desc, duration)",
        "            "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/interactive_control_system.py",
      "line": 237,
      "type": "Simulation",
      "description": "await self._simulate_phase_execution(session, phase_name, phase_desc, duration)",
      "context": [
        "            ",
        "            # Simulate agent execution with real-time updates",
        "            await self._simulate_phase_execution(session, phase_name, phase_desc, duration)",
        "            ",
        "            completed_tasks.append(phase_name)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/interactive_control_system.py",
      "line": 258,
      "type": "Mock Method",
      "description": "async def _simulate_phase_execution(self,",
      "context": [
        "        }",
        "        ",
        "    async def _simulate_phase_execution(self,",
        "                                      session: InteractiveControlSession,",
        "                                      phase_name: str,"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/interactive_control_system.py",
      "line": 263,
      "type": "Simulation",
      "description": "\"\"\"Simulate phase execution with agent updates\"\"\"",
      "context": [
        "                                      phase_desc: str,",
        "                                      duration: int):",
        "        \"\"\"Simulate phase execution with agent updates\"\"\"",
        "        ",
        "        # Simulate different agents working on the phase"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/interactive_control_system.py",
      "line": 265,
      "type": "Simulation",
      "description": "# Simulate different agents working on the phase",
      "context": [
        "        \"\"\"Simulate phase execution with agent updates\"\"\"",
        "        ",
        "        # Simulate different agents working on the phase",
        "        agents = [",
        "            (\"architect\", \"Designing system architecture\"),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/interactive_control_system.py",
      "line": 306,
      "type": "Simulation",
      "description": "tokens_generated=progress * 3,  # Simulate token generation",
      "context": [
        "                    progress_percent=progress,",
        "                    current_step=task_desc,",
        "                    tokens_generated=progress * 3,  # Simulate token generation",
        "                    time_elapsed=progress * 0.1,",
        "                    memory_usage_mb=256 + progress * 2"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/interactive_control_system.py",
      "line": 340,
      "type": "Simulation",
      "description": "# Simulate quality check",
      "context": [
        "                await asyncio.sleep(30)  # Check every 30 seconds",
        "                ",
        "                # Simulate quality check",
        "                print(\"\ud83d\udd0d Performing quality check...\")",
        "                "
      ],
      "complexity": "Low",
      "priority": 5
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/interactive_control_system.py",
      "line": 356,
      "type": "Simulation",
      "description": "# For demo, we'll create a simulated quality report",
      "context": [
        "        ",
        "        # In real implementation, this would analyze the actual generated project",
        "        # For demo, we'll create a simulated quality report",
        "        ",
        "        sample_report = QualityReport("
      ],
      "complexity": "Low",
      "priority": 5
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/interactive_control_system.py",
      "line": 555,
      "type": "Simulation",
      "description": "# Simulate project execution (would integrate with real ProjectOrchestrator)",
      "context": [
        "        )",
        "        ",
        "        # Simulate project execution (would integrate with real ProjectOrchestrator)",
        "        class MockOrchestrator:",
        "            async def execute_project(self, requirements, project_name):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/interactive_control_system.py",
      "line": 556,
      "type": "Mock Class",
      "description": "class MockOrchestrator:",
      "context": [
        "        ",
        "        # Simulate project execution (would integrate with real ProjectOrchestrator)",
        "        class MockOrchestrator:",
        "            async def execute_project(self, requirements, project_name):",
        "                return {\"status\": \"completed\", \"artifacts\": [\"main.py\", \"models.py\", \"api.py\"]}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/interactive_control_system.py",
      "line": 560,
      "type": "Mock Implementation",
      "description": "mock_orchestrator = MockOrchestrator()",
      "context": [
        "                return {\"status\": \"completed\", \"artifacts\": [\"main.py\", \"models.py\", \"api.py\"]}",
        "                ",
        "        mock_orchestrator = MockOrchestrator()",
        "        ",
        "        # Execute with full interactive control"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/interactive_control_system.py",
      "line": 565,
      "type": "Mock Implementation",
      "description": "project_orchestrator=mock_orchestrator,",
      "context": [
        "        result = await control_system.execute_project_with_control(",
        "            session=session,",
        "            project_orchestrator=mock_orchestrator,",
        "            requirements=\"Build a FastAPI REST API for user management with authentication\"",
        "        )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/websocket_monitor_fixed.py",
      "line": 513,
      "type": "Simulation",
      "description": "# Simulate agent status updates",
      "context": [
        "    while True:",
        "        try:",
        "            # Simulate agent status updates",
        "            for i, agent in enumerate(agents):",
        "                is_active = (counter + i) % 3 != 0  # Simulate some agents being inactive"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/monitoring/websocket_monitor_fixed.py",
      "line": 515,
      "type": "Simulation",
      "description": "is_active = (counter + i) % 3 != 0  # Simulate some agents being inactive",
      "context": [
        "            # Simulate agent status updates",
        "            for i, agent in enumerate(agents):",
        "                is_active = (counter + i) % 3 != 0  # Simulate some agents being inactive",
        "                status_messages = [",
        "                    \"Idle - waiting for tasks\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/performance/optimizer.py",
      "line": 820,
      "type": "Simulation",
      "description": "# Simulate agent performance data analysis",
      "context": [
        "        suggestions = []",
        "        ",
        "        # Simulate agent performance data analysis",
        "        # In real implementation, this would analyze actual agent metrics",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/performance/optimizer.py",
      "line": 902,
      "type": "Mock Implementation",
      "description": "# Implement optimization (placeholder - actual implementation would vary)",
      "context": [
        "                suggestion.optimization_id not in self.implemented_optimizations):",
        "                ",
        "                # Implement optimization (placeholder - actual implementation would vary)",
        "                await self._implement_optimization(suggestion)",
        "                self.implemented_optimizations.add(suggestion.optimization_id)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/performance/optimizer.py",
      "line": 911,
      "type": "Mock Implementation",
      "description": "# Placeholder implementation - real implementation would depend on optimization type",
      "context": [
        "        print(f\"[AUTO-OPTIMIZATION] Implementing: {suggestion.title}\")",
        "        ",
        "        # Placeholder implementation - real implementation would depend on optimization type",
        "        if suggestion.type == OptimizationType.CACHING:",
        "            print(\"  - Enabling result caching\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/performance/optimizer.py",
      "line": 1031,
      "type": "Simulation",
      "description": "# Simulate some LLM executions",
      "context": [
        "        resource_task, optimization_task = await optimizer.start_optimization_monitoring()",
        "        ",
        "        # Simulate some LLM executions",
        "        sample_executions = [",
        "            LLMPerformanceData("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/kaizen/active-metrics-analyzer.py",
      "line": 768,
      "type": "Simulation",
      "description": "# Simulate some task completions",
      "context": [
        "    analyzer.add_alert_callback(console_alert_handler)",
        "    ",
        "    # Simulate some task completions",
        "    print(\"\\n\ud83d\udcca Simulating task completions...\")",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/kaizen/__init__.py",
      "line": 14,
      "type": "Mock Implementation",
      "description": "# Mock implementations for development",
      "context": [
        "]",
        "",
        "# Mock implementations for development",
        "class IntelligentModelSelector:",
        "    def __init__(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/typing_extensions.py",
      "line": 4097,
      "type": "Simulation",
      "description": "# between the locals and the globals. We simulate this by adding",
      "context": [
        "",
        "        # Type parameters exist in their own scope, which is logically",
        "        # between the locals and the globals. We simulate this by adding",
        "        # them to the globals.",
        "        if type_params is not None:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/click/utils.py",
      "line": 585,
      "type": "Simulation",
      "description": "\"\"\"Simulate Unix shell expansion with Python functions.",
      "context": [
        "    glob_recursive: bool = True,",
        ") -> list[str]:",
        "    \"\"\"Simulate Unix shell expansion with Python functions.",
        "",
        "    See :func:`glob.glob`, :func:`os.path.expanduser`, and"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 52,
      "type": "Mock Implementation",
      "description": "_mock_val_ser,",
      "context": [
        "    _decorators,",
        "    _internal_dataclass,",
        "    _mock_val_ser,",
        "    _schema_generation_shared,",
        ")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 2406,
      "type": "Mock Implementation",
      "description": "if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
      "context": [
        "    schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)",
        "",
        "    if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
        "        cls.__pydantic_core_schema__.rebuild()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 2412,
      "type": "Mock Implementation",
      "description": "assert not isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
      "context": [
        "        raise AttributeError('model_json_schema() must be called on a subclass of BaseModel, not BaseModel itself.')",
        "",
        "    assert not isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
        "    return schema_generator_instance.generate(cls.__pydantic_core_schema__, mode=mode)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 2444,
      "type": "Mock Implementation",
      "description": "if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
      "context": [
        "    \"\"\"",
        "    for cls, _ in models:",
        "        if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
        "            cls.__pydantic_core_schema__.rebuild()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 42,
      "type": "Mock Implementation",
      "description": "_mock_val_ser,",
      "context": [
        "    _forward_ref,",
        "    _generics,",
        "    _mock_val_ser,",
        "    _model_construction,",
        "    _namespace_utils,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 106,
      "type": "Mock Method",
      "description": "# is initialized, by wrapping the user-defined `model_post_init()`), e.g. if they mock",
      "context": [
        "        # While the attribute should be present at this point, this may not be the case if",
        "        # users do unusual stuff with `model_post_init()` (which is where the  `__pydantic_private__`",
        "        # is initialized, by wrapping the user-defined `model_post_init()`), e.g. if they mock",
        "        # the `model_post_init()` call. Ideally we should find a better way to init private attrs.",
        "        object.__setattr__(model, '__pydantic_private__', {})"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 226,
      "type": "Mock Implementation",
      "description": "__pydantic_core_schema__ = _mock_val_ser.MockCoreSchema(",
      "context": [
        "        # Prevent `BaseModel` from being instantiated directly",
        "        # (defined in an `if not TYPE_CHECKING` block for clarity and to avoid type checking errors):",
        "        __pydantic_core_schema__ = _mock_val_ser.MockCoreSchema(",
        "            'Pydantic models should inherit from BaseModel, BaseModel cannot be instantiated directly',",
        "            code='base-model-instantiated',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 230,
      "type": "Mock Implementation",
      "description": "__pydantic_validator__ = _mock_val_ser.MockValSer(",
      "context": [
        "            code='base-model-instantiated',",
        "        )",
        "        __pydantic_validator__ = _mock_val_ser.MockValSer(",
        "            'Pydantic models should inherit from BaseModel, BaseModel cannot be instantiated directly',",
        "            val_or_ser='validator',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 235,
      "type": "Mock Implementation",
      "description": "__pydantic_serializer__ = _mock_val_ser.MockValSer(",
      "context": [
        "            code='base-model-instantiated',",
        "        )",
        "        __pydantic_serializer__ = _mock_val_ser.MockValSer(",
        "            'Pydantic models should inherit from BaseModel, BaseModel cannot be instantiated directly',",
        "            val_or_ser='serializer',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 620,
      "type": "Mock Implementation",
      "description": "if attr in cls.__dict__ and not isinstance(getattr(cls, attr), _mock_val_ser.MockValSer):",
      "context": [
        "",
        "        for attr in ('__pydantic_core_schema__', '__pydantic_validator__', '__pydantic_serializer__'):",
        "            if attr in cls.__dict__ and not isinstance(getattr(cls, attr), _mock_val_ser.MockValSer):",
        "                # Deleting the validator/serializer is necessary as otherwise they can get reused in",
        "                # pydantic-core. We do so only if they aren't mock instances, otherwise \u2014 as `model_rebuild()`"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 652,
      "type": "Mock Implementation",
      "description": "_mock_val_ser.set_model_mocks(cls, f'`{exc.name}`')",
      "context": [
        "            except NameError as e:",
        "                exc = PydanticUndefinedAnnotation.from_name_error(e)",
        "                _mock_val_ser.set_model_mocks(cls, f'`{exc.name}`')",
        "                if raise_errors:",
        "                    raise exc from e"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 800,
      "type": "Mock Implementation",
      "description": "if schema is not None and not isinstance(schema, _mock_val_ser.MockCoreSchema):",
      "context": [
        "        # Logic copied over from `GenerateSchema._model_schema`:",
        "        schema = cls.__dict__.get('__pydantic_core_schema__')",
        "        if schema is not None and not isinstance(schema, _mock_val_ser.MockCoreSchema):",
        "            return cls.__pydantic_core_schema__",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 25,
      "type": "Mock Implementation",
      "description": "from ._internal import _config, _generate_schema, _mock_val_ser, _namespace_utils, _repr, _typing_extra, _utils",
      "context": [
        "from pydantic.main import BaseModel, IncEx",
        "",
        "from ._internal import _config, _generate_schema, _mock_val_ser, _namespace_utils, _repr, _typing_extra, _utils",
        "from .config import ConfigDict",
        "from .errors import PydanticUndefinedAnnotation"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 254,
      "type": "Mock Method",
      "description": "If `force` is set to `False` and `_defer_build` is `True`, the core schema, validator, and serializer will be set to mocks.",
      "context": [
        "            ns_resolver: The namespace resolver to use when building the core schema for the adapted type.",
        "            force: Whether to force the construction of the core schema, validator, and serializer.",
        "                If `force` is set to `False` and `_defer_build` is `True`, the core schema, validator, and serializer will be set to mocks.",
        "            raise_errors: Whether to raise errors if initializing any of the core attrs fails.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 265,
      "type": "Mock Implementation",
      "description": "_mock_val_ser.set_type_adapter_mocks(self)",
      "context": [
        "        \"\"\"",
        "        if not force and self._defer_build:",
        "            _mock_val_ser.set_type_adapter_mocks(self)",
        "            self.pydantic_complete = False",
        "            return False"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 278,
      "type": "Mock Implementation",
      "description": "isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
      "context": [
        "            # so we simply skip to the block below that does the actual schema generation",
        "            if (",
        "                isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
        "                or isinstance(self.validator, _mock_val_ser.MockValSer)",
        "                or isinstance(self.serializer, _mock_val_ser.MockValSer)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 279,
      "type": "Mock Implementation",
      "description": "or isinstance(self.validator, _mock_val_ser.MockValSer)",
      "context": [
        "            if (",
        "                isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
        "                or isinstance(self.validator, _mock_val_ser.MockValSer)",
        "                or isinstance(self.serializer, _mock_val_ser.MockValSer)",
        "            ):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 280,
      "type": "Mock Implementation",
      "description": "or isinstance(self.serializer, _mock_val_ser.MockValSer)",
      "context": [
        "                isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
        "                or isinstance(self.validator, _mock_val_ser.MockValSer)",
        "                or isinstance(self.serializer, _mock_val_ser.MockValSer)",
        "            ):",
        "                raise AttributeError()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 293,
      "type": "Mock Implementation",
      "description": "_mock_val_ser.set_type_adapter_mocks(self)",
      "context": [
        "                if raise_errors:",
        "                    raise",
        "                _mock_val_ser.set_type_adapter_mocks(self)",
        "                return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 299,
      "type": "Mock Implementation",
      "description": "_mock_val_ser.set_type_adapter_mocks(self)",
      "context": [
        "                self.core_schema = schema_generator.clean_schema(core_schema)",
        "            except _generate_schema.InvalidSchemaError:",
        "                _mock_val_ser.set_type_adapter_mocks(self)",
        "                return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 667,
      "type": "Mock Implementation",
      "description": "if isinstance(self.core_schema, _mock_val_ser.MockCoreSchema):",
      "context": [
        "        \"\"\"",
        "        schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)",
        "        if isinstance(self.core_schema, _mock_val_ser.MockCoreSchema):",
        "            self.core_schema.rebuild()",
        "            assert not isinstance(self.core_schema, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 669,
      "type": "Mock Implementation",
      "description": "assert not isinstance(self.core_schema, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
      "context": [
        "        if isinstance(self.core_schema, _mock_val_ser.MockCoreSchema):",
        "            self.core_schema.rebuild()",
        "            assert not isinstance(self.core_schema, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
        "        return schema_generator_instance.generate(self.core_schema, mode=mode)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 710,
      "type": "Mock Implementation",
      "description": "if isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema):",
      "context": [
        "        for key, mode, adapter in inputs:",
        "            # This is the same pattern we follow for model json schemas - we attempt a core schema rebuild if we detect a mock",
        "            if isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema):",
        "                adapter.core_schema.rebuild()",
        "                assert not isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema), ("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 712,
      "type": "Mock Implementation",
      "description": "assert not isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema), (",
      "context": [
        "            if isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema):",
        "                adapter.core_schema.rebuild()",
        "                assert not isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema), (",
        "                    'this is a bug! please report it'",
        "                )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/uvloop/_testbase.py",
      "line": 24,
      "type": "Mock Class",
      "description": "class MockPattern(str):",
      "context": [
        "",
        "",
        "class MockPattern(str):",
        "    def __eq__(self, other):",
        "        return bool(re.search(str(self), other, re.S))"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/uvloop/_testbase.py",
      "line": 70,
      "type": "Mock Method",
      "description": "def mock_pattern(self, str):",
      "context": [
        "        raise NotImplementedError",
        "",
        "    def mock_pattern(self, str):",
        "        return MockPattern(str)",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/uvloop/_testbase.py",
      "line": 70,
      "type": "Mock Method",
      "description": "def mock_pattern(self, str):",
      "context": [
        "        raise NotImplementedError",
        "",
        "    def mock_pattern(self, str):",
        "        return MockPattern(str)",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/uvloop/_testbase.py",
      "line": 71,
      "type": "Mock Implementation",
      "description": "return MockPattern(str)",
      "context": [
        "",
        "    def mock_pattern(self, str):",
        "        return MockPattern(str)",
        "",
        "    async def wait_closed(self, obj):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/tenacity/nap.py",
      "line": 29,
      "type": "Mock Method",
      "description": "This is the default strategy, and may be mocked out for unit testing.",
      "context": [
        "    Sleep strategy that delays execution for a given number of seconds.",
        "",
        "    This is the default strategy, and may be mocked out for unit testing.",
        "    \"\"\"",
        "    time.sleep(seconds)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/redis/connection.py",
      "line": 1649,
      "type": "Mock Method",
      "description": "async def _mock(self, error: RedisError):",
      "context": [
        "                conn.set_re_auth_token(token)",
        "",
        "    async def _mock(self, error: RedisError):",
        "        \"\"\"",
        "        Dummy functions, needs to be passed as error callback to retry object."
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/__init__.py",
      "line": 20,
      "type": "Mock Implementation",
      "description": "from .engine import create_mock_engine as create_mock_engine",
      "context": [
        "from .engine import Connection as Connection",
        "from .engine import create_engine as create_engine",
        "from .engine import create_mock_engine as create_mock_engine",
        "from .engine import create_pool_from_url as create_pool_from_url",
        "from .engine import CreateEnginePlugin as CreateEnginePlugin"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/requests/cookies.py",
      "line": 23,
      "type": "Mock Class",
      "description": "class MockRequest:",
      "context": [
        "",
        "",
        "class MockRequest:",
        "    \"\"\"Wraps a `requests.Request` to mimic a `urllib2.Request`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/requests/cookies.py",
      "line": 103,
      "type": "Mock Class",
      "description": "class MockResponse:",
      "context": [
        "",
        "",
        "class MockResponse:",
        "    \"\"\"Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/requests/models.py",
      "line": 845,
      "type": "Simulation",
      "description": "# simulate reading small chunks of the content",
      "context": [
        "                f\"chunk_size must be an int, it is instead a {type(chunk_size)}.\"",
        "            )",
        "        # simulate reading small chunks of the content",
        "        reused_chunks = iter_slices(self._content, chunk_size)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 88,
      "type": "Mock Method",
      "description": "def num_mock_patch_args(function) -> int:",
      "context": [
        "",
        "",
        "def num_mock_patch_args(function) -> int:",
        "    \"\"\"Return number of arguments used up by mock arguments (if any).\"\"\"",
        "    patchings = getattr(function, \"patchings\", None)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 88,
      "type": "Mock Method",
      "description": "def num_mock_patch_args(function) -> int:",
      "context": [
        "",
        "",
        "def num_mock_patch_args(function) -> int:",
        "    \"\"\"Return number of arguments used up by mock arguments (if any).\"\"\"",
        "    patchings = getattr(function, \"patchings\", None)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 89,
      "type": "Mock Implementation",
      "description": "\"\"\"Return number of arguments used up by mock arguments (if any).\"\"\"",
      "context": [
        "",
        "def num_mock_patch_args(function) -> int:",
        "    \"\"\"Return number of arguments used up by mock arguments (if any).\"\"\"",
        "    patchings = getattr(function, \"patchings\", None)",
        "    if not patchings:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 94,
      "type": "Mock Method",
      "description": "mock_sentinel = getattr(sys.modules.get(\"mock\"), \"DEFAULT\", object())",
      "context": [
        "        return 0",
        "",
        "    mock_sentinel = getattr(sys.modules.get(\"mock\"), \"DEFAULT\", object())",
        "    ut_mock_sentinel = getattr(sys.modules.get(\"unittest.mock\"), \"DEFAULT\", object())",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 95,
      "type": "Mock Method",
      "description": "ut_mock_sentinel = getattr(sys.modules.get(\"unittest.mock\"), \"DEFAULT\", object())",
      "context": [
        "",
        "    mock_sentinel = getattr(sys.modules.get(\"mock\"), \"DEFAULT\", object())",
        "    ut_mock_sentinel = getattr(sys.modules.get(\"unittest.mock\"), \"DEFAULT\", object())",
        "",
        "    return len("
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 102,
      "type": "Mock Implementation",
      "description": "and (p.new is mock_sentinel or p.new is ut_mock_sentinel)",
      "context": [
        "            for p in patchings",
        "            if not p.attribute_name",
        "            and (p.new is mock_sentinel or p.new is ut_mock_sentinel)",
        "        ]",
        "    )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 171,
      "type": "Mock Implementation",
      "description": "arg_names = arg_names[num_mock_patch_args(function) :]",
      "context": [
        "    # Remove any names that will be replaced with mocks.",
        "    if hasattr(function, \"__wrapped__\"):",
        "        arg_names = arg_names[num_mock_patch_args(function) :]",
        "    return arg_names",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 461,
      "type": "Mock Method",
      "description": "def _is_mocked(obj: object) -> bool:",
      "context": [
        "",
        "",
        "def _is_mocked(obj: object) -> bool:",
        "    \"\"\"Return if an object is possibly a mock object by checking the",
        "    existence of a highly improbable attribute.\"\"\""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 462,
      "type": "Mock Implementation",
      "description": "\"\"\"Return if an object is possibly a mock object by checking the",
      "context": [
        "",
        "def _is_mocked(obj: object) -> bool:",
        "    \"\"\"Return if an object is possibly a mock object by checking the",
        "    existence of a highly improbable attribute.\"\"\"",
        "    return ("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 465,
      "type": "Mock Implementation",
      "description": "safe_getattr(obj, \"pytest_mock_example_attribute_that_shouldnt_exist\", None)",
      "context": [
        "    existence of a highly improbable attribute.\"\"\"",
        "    return (",
        "        safe_getattr(obj, \"pytest_mock_example_attribute_that_shouldnt_exist\", None)",
        "        is not None",
        "    )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 471,
      "type": "Mock Method",
      "description": "def _patch_unwrap_mock_aware() -> Generator[None]:",
      "context": [
        "",
        "@contextmanager",
        "def _patch_unwrap_mock_aware() -> Generator[None]:",
        "    \"\"\"Context manager which replaces ``inspect.unwrap`` with a version",
        "    that's aware of mock objects and doesn't recurse into them.\"\"\""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 471,
      "type": "Mock Method",
      "description": "def _patch_unwrap_mock_aware() -> Generator[None]:",
      "context": [
        "",
        "@contextmanager",
        "def _patch_unwrap_mock_aware() -> Generator[None]:",
        "    \"\"\"Context manager which replaces ``inspect.unwrap`` with a version",
        "    that's aware of mock objects and doesn't recurse into them.\"\"\""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 476,
      "type": "Mock Method",
      "description": "def _mock_aware_unwrap(",
      "context": [
        "    real_unwrap = inspect.unwrap",
        "",
        "    def _mock_aware_unwrap(",
        "        func: Callable[..., Any], *, stop: Callable[[Any], Any] | None = None",
        "    ) -> Any:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 476,
      "type": "Mock Method",
      "description": "def _mock_aware_unwrap(",
      "context": [
        "    real_unwrap = inspect.unwrap",
        "",
        "    def _mock_aware_unwrap(",
        "        func: Callable[..., Any], *, stop: Callable[[Any], Any] | None = None",
        "    ) -> Any:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 481,
      "type": "Mock Implementation",
      "description": "return real_unwrap(func, stop=_is_mocked)",
      "context": [
        "        try:",
        "            if stop is None or stop is _is_mocked:",
        "                return real_unwrap(func, stop=_is_mocked)",
        "            _stop = stop",
        "            return real_unwrap(func, stop=lambda obj: _is_mocked(obj) or _stop(func))"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 483,
      "type": "Mock Implementation",
      "description": "return real_unwrap(func, stop=lambda obj: _is_mocked(obj) or _stop(func))",
      "context": [
        "                return real_unwrap(func, stop=_is_mocked)",
        "            _stop = stop",
        "            return real_unwrap(func, stop=lambda obj: _is_mocked(obj) or _stop(func))",
        "        except Exception as e:",
        "            warnings.warn("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 493,
      "type": "Mock Implementation",
      "description": "inspect.unwrap = _mock_aware_unwrap",
      "context": [
        "            raise",
        "",
        "    inspect.unwrap = _mock_aware_unwrap",
        "    try:",
        "        yield"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 504,
      "type": "Mock Class",
      "description": "class MockAwareDocTestFinder(doctest.DocTestFinder):",
      "context": [
        "        import doctest",
        "",
        "        class MockAwareDocTestFinder(doctest.DocTestFinder):",
        "            py_ver_info_minor = sys.version_info[:2]",
        "            is_find_lineno_broken = ("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 545,
      "type": "Mock Implementation",
      "description": "with _patch_unwrap_mock_aware():",
      "context": [
        "                    if _is_mocked(obj):",
        "                        return  # pragma: no cover",
        "                    with _patch_unwrap_mock_aware():",
        "                        # Type ignored because this is a private function.",
        "                        super()._find(  # type:ignore[misc]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/python.py",
      "line": 219,
      "type": "Mock Implementation",
      "description": "# mock seems to store unbound methods (issue473), normalize it.",
      "context": [
        "            return Class.from_parent(collector, name=name, obj=obj)",
        "    elif collector.istestfunction(obj, name):",
        "        # mock seems to store unbound methods (issue473), normalize it.",
        "        obj = getattr(obj, \"__func__\", obj)",
        "        # We need to try and unwrap the function if it's a functools.partial"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/timing.py",
      "line": 6,
      "type": "Mock Implementation",
      "description": "Fixture \"mock_timing\" also interacts with this module for pytest's own tests.",
      "context": [
        "pytest runtime information (issue #185).",
        "",
        "Fixture \"mock_timing\" also interacts with this module for pytest's own tests.",
        "\"\"\"",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/timing.py",
      "line": 66,
      "type": "Mock Class",
      "description": "class MockTiming:",
      "context": [
        "",
        "@dataclasses.dataclass",
        "class MockTiming:",
        "    \"\"\"Mocks _pytest.timing with a known object that can be used to control timing in tests",
        "    deterministically."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/checker.py",
      "line": 2754,
      "type": "Mock Class",
      "description": "Base.__init_subclass__(thing=5) is called at line 4. This is what we simulate here.",
      "context": [
        "            7   Child()",
        "",
        "        Base.__init_subclass__(thing=5) is called at line 4. This is what we simulate here.",
        "        Child.__init_subclass__ is never called.",
        "        \"\"\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/meet.py",
      "line": 415,
      "type": "Simulation",
      "description": "# Handling the TypeVarLikes now lets us simulate having them bind to the corresponding",
      "context": [
        "    # the same logic if either type happens to be a TypeVar/ParamSpec/TypeVarTuple.",
        "    #",
        "    # Handling the TypeVarLikes now lets us simulate having them bind to the corresponding",
        "    # type -- if we deferred these checks, the \"return-early\" logic of the other",
        "    # checks will prevent us from detecting certain overlaps."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/metastore.py",
      "line": 6,
      "type": "Simulation",
      "description": "* A hokey sqlite backed implementation, which basically simulates",
      "context": [
        " * The \"classic\" file system implementation, which uses a directory",
        "   structure of files.",
        " * A hokey sqlite backed implementation, which basically simulates",
        "   the file system in an effort to work around poor file system performance",
        "   on OS X."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mako/codegen.py",
      "line": 904,
      "type": "Simulation",
      "description": "# to simulate \"enclosing scope\"",
      "context": [
        "                # declared/modified variables into the \"__M_locals\" dictionary,",
        "                # which is used for def calls within the same template,",
        "                # to simulate \"enclosing scope\"",
        "                self.printer.writeline(",
        "                    \"__M_locals_builtin_stored = __M_locals_builtin()\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 633,
      "type": "Mock Method",
      "description": "def _create_app_mock() -> mock.MagicMock:",
      "context": [
        "",
        "",
        "def _create_app_mock() -> mock.MagicMock:",
        "    def get_dict(app: Any, key: str) -> Any:",
        "        return app.__app_dict[key]"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 651,
      "type": "Mock Method",
      "description": "def _create_transport(sslcontext: Optional[SSLContext] = None) -> mock.Mock:",
      "context": [
        "",
        "",
        "def _create_transport(sslcontext: Optional[SSLContext] = None) -> mock.Mock:",
        "    transport = mock.Mock()",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 664,
      "type": "Mock Method",
      "description": "def make_mocked_request(",
      "context": [
        "",
        "",
        "def make_mocked_request(",
        "    method: str,",
        "    path: str,"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 762,
      "type": "Mock Method",
      "description": "def make_mocked_coro(",
      "context": [
        "",
        "",
        "def make_mocked_coro(",
        "    return_value: Any = sentinel, raise_exception: Any = sentinel",
        ") -> Any:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 767,
      "type": "Mock Method",
      "description": "async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
      "context": [
        "    \"\"\"Creates a coroutine mock.\"\"\"",
        "",
        "    async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
        "        if raise_exception is not sentinel:",
        "            raise raise_exception"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 767,
      "type": "Mock Method",
      "description": "async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
      "context": [
        "    \"\"\"Creates a coroutine mock.\"\"\"",
        "",
        "    async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
        "        if raise_exception is not sentinel:",
        "            raise raise_exception"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 774,
      "type": "Mock Implementation",
      "description": "return mock.Mock(wraps=mock_coro)",
      "context": [
        "        await return_value",
        "",
        "    return mock.Mock(wraps=mock_coro)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 774,
      "type": "Mock Implementation",
      "description": "return mock.Mock(wraps=mock_coro)",
      "context": [
        "        await return_value",
        "",
        "    return mock.Mock(wraps=mock_coro)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain/utils/__init__.py",
      "line": 28,
      "type": "Mock Implementation",
      "description": "mock_now,",
      "context": [
        "    get_pydantic_field_names,",
        "    guard_import,",
        "    mock_now,",
        "    raise_for_status_with_text,",
        "    xor_args,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain/utils/__init__.py",
      "line": 71,
      "type": "Mock Implementation",
      "description": "\"mock_now\",",
      "context": [
        "    \"get_pydantic_field_names\",",
        "    \"guard_import\",",
        "    \"mock_now\",",
        "    \"print_text\",",
        "    \"raise_for_status_with_text\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain/utils/utils.py",
      "line": 7,
      "type": "Mock Implementation",
      "description": "mock_now,",
      "context": [
        "    get_pydantic_field_names,",
        "    guard_import,",
        "    mock_now,",
        "    raise_for_status_with_text,",
        "    xor_args,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain/utils/utils.py",
      "line": 18,
      "type": "Mock Implementation",
      "description": "\"mock_now\",",
      "context": [
        "    \"get_pydantic_field_names\",",
        "    \"guard_import\",",
        "    \"mock_now\",",
        "    \"raise_for_status_with_text\",",
        "    \"xor_args\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/__init__.py",
      "line": 39,
      "type": "Mock Implementation",
      "description": "mock_now,",
      "context": [
        "        get_pydantic_field_names,",
        "        guard_import,",
        "        mock_now,",
        "        raise_for_status_with_text,",
        "        secret_from_env,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/__init__.py",
      "line": 63,
      "type": "Mock Implementation",
      "description": "\"mock_now\",",
      "context": [
        "    \"guard_import\",",
        "    \"image\",",
        "    \"mock_now\",",
        "    \"pre_init\",",
        "    \"print_text\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/__init__.py",
      "line": 99,
      "type": "Mock Implementation",
      "description": "\"mock_now\": \"utils\",",
      "context": [
        "    \"get_pydantic_field_names\": \"utils\",",
        "    \"guard_import\": \"utils\",",
        "    \"mock_now\": \"utils\",",
        "    \"secret_from_env\": \"utils\",",
        "    \"xor_args\": \"utils\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 74,
      "type": "Mock Method",
      "description": "def mock_now(dt_value: datetime.datetime) -> Iterator[type]:",
      "context": [
        "",
        "@contextlib.contextmanager",
        "def mock_now(dt_value: datetime.datetime) -> Iterator[type]:",
        "    \"\"\"Context manager for mocking out datetime.now() in unit tests.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 74,
      "type": "Mock Method",
      "description": "def mock_now(dt_value: datetime.datetime) -> Iterator[type]:",
      "context": [
        "",
        "@contextlib.contextmanager",
        "def mock_now(dt_value: datetime.datetime) -> Iterator[type]:",
        "    \"\"\"Context manager for mocking out datetime.now() in unit tests.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 84,
      "type": "Mock Implementation",
      "description": "with mock_now(datetime.datetime(2011, 2, 3, 10, 11)):",
      "context": [
        "",
        "    Example:",
        "    with mock_now(datetime.datetime(2011, 2, 3, 10, 11)):",
        "        assert datetime.datetime.now() == datetime.datetime(2011, 2, 3, 10, 11)",
        "    \"\"\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 88,
      "type": "Mock Class",
      "description": "class MockDateTime(datetime.datetime):",
      "context": [
        "    \"\"\"",
        "",
        "    class MockDateTime(datetime.datetime):",
        "        \"\"\"Mock datetime.datetime.now() with a fixed datetime.\"\"\"",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 93,
      "type": "Mock Method",
      "description": "def now(cls, tz: Union[datetime.tzinfo, None] = None) -> \"MockDateTime\":",
      "context": [
        "        @classmethod",
        "        @override",
        "        def now(cls, tz: Union[datetime.tzinfo, None] = None) -> \"MockDateTime\":",
        "            # Create a copy of dt_value.",
        "            return MockDateTime("
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 95,
      "type": "Mock Implementation",
      "description": "return MockDateTime(",
      "context": [
        "        def now(cls, tz: Union[datetime.tzinfo, None] = None) -> \"MockDateTime\":",
        "            # Create a copy of dt_value.",
        "            return MockDateTime(",
        "                dt_value.year,",
        "                dt_value.month,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/alembic/runtime/migration.py",
      "line": 676,
      "type": "Mock Implementation",
      "description": "return MockEngineStrategy.MockConnection(self.dialect, dump)",
      "context": [
        "            self.impl._exec(construct)",
        "",
        "        return MockEngineStrategy.MockConnection(self.dialect, dump)",
        "",
        "    @property"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/alembic/testing/fixtures.py",
      "line": 13,
      "type": "Mock Implementation",
      "description": "from sqlalchemy import create_mock_engine",
      "context": [
        "",
        "from sqlalchemy import Column",
        "from sqlalchemy import create_mock_engine",
        "from sqlalchemy import inspect",
        "from sqlalchemy import MetaData"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/alembic/testing/fixtures.py",
      "line": 104,
      "type": "Mock Implementation",
      "description": "engine = create_mock_engine(dialect, dump)",
      "context": [
        "        buf.append(str(sql.compile(dialect=engine.dialect)))",
        "",
        "    engine = create_mock_engine(dialect, dump)",
        "    return engine, buf",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/alembic/testing/suite/test_autogen_computed.py",
      "line": 100,
      "type": "Mock Implementation",
      "description": "with mock.patch(\"alembic.util.warn\") as mock_warn:",
      "context": [
        "        )",
        "",
        "        with mock.patch(\"alembic.util.warn\") as mock_warn:",
        "            diffs = self._fixture(m1, m2)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/alembic/testing/suite/test_autogen_computed.py",
      "line": 104,
      "type": "Mock Implementation",
      "description": "mock_warn.mock_calls,",
      "context": [
        "",
        "        eq_(",
        "            mock_warn.mock_calls,",
        "            [mock.call(\"Computed default on user.foo cannot be modified\")],",
        "        )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/alembic/testing/suite/test_autogen_computed.py",
      "line": 140,
      "type": "Mock Implementation",
      "description": "with mock.patch(\"alembic.util.warn\") as mock_warn:",
      "context": [
        "        )",
        "",
        "        with mock.patch(\"alembic.util.warn\") as mock_warn:",
        "            diffs = self._fixture(m1, m2)",
        "        eq_(mock_warn.mock_calls, [])"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/alembic/testing/suite/test_autogen_computed.py",
      "line": 142,
      "type": "Mock Implementation",
      "description": "eq_(mock_warn.mock_calls, [])",
      "context": [
        "        with mock.patch(\"alembic.util.warn\") as mock_warn:",
        "            diffs = self._fixture(m1, m2)",
        "        eq_(mock_warn.mock_calls, [])",
        "",
        "        eq_(list(diffs), [])"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpx/_transports/mock.py",
      "line": 15,
      "type": "Mock Class",
      "description": "class MockTransport(AsyncBaseTransport, BaseTransport):",
      "context": [
        "",
        "",
        "class MockTransport(AsyncBaseTransport, BaseTransport):",
        "    def __init__(self, handler: SyncHandler | AsyncHandler) -> None:",
        "        self.handler = handler"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 16,
      "type": "Mock Class",
      "description": "class MockSSLObject:",
      "context": [
        "",
        "",
        "class MockSSLObject:",
        "    def __init__(self, http2: bool):",
        "        self._http2 = http2"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 24,
      "type": "Mock Class",
      "description": "class MockStream(NetworkStream):",
      "context": [
        "",
        "",
        "class MockStream(NetworkStream):",
        "    def __init__(self, buffer: list[bytes], http2: bool = False) -> None:",
        "        self._buffer = buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 52,
      "type": "Mock Implementation",
      "description": "return MockSSLObject(http2=self._http2) if info == \"ssl_object\" else None",
      "context": [
        "",
        "    def get_extra_info(self, info: str) -> typing.Any:",
        "        return MockSSLObject(http2=self._http2) if info == \"ssl_object\" else None",
        "",
        "    def __repr__(self) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 55,
      "type": "Mock Implementation",
      "description": "return \"<httpcore.MockStream>\"",
      "context": [
        "",
        "    def __repr__(self) -> str:",
        "        return \"<httpcore.MockStream>\"",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 58,
      "type": "Mock Class",
      "description": "class MockBackend(NetworkBackend):",
      "context": [
        "",
        "",
        "class MockBackend(NetworkBackend):",
        "    def __init__(self, buffer: list[bytes], http2: bool = False) -> None:",
        "        self._buffer = buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 71,
      "type": "Mock Implementation",
      "description": "return MockStream(list(self._buffer), http2=self._http2)",
      "context": [
        "        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,",
        "    ) -> NetworkStream:",
        "        return MockStream(list(self._buffer), http2=self._http2)",
        "",
        "    def connect_unix_socket("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 79,
      "type": "Mock Implementation",
      "description": "return MockStream(list(self._buffer), http2=self._http2)",
      "context": [
        "        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,",
        "    ) -> NetworkStream:",
        "        return MockStream(list(self._buffer), http2=self._http2)",
        "",
        "    def sleep(self, seconds: float) -> None:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 85,
      "type": "Mock Class",
      "description": "class AsyncMockStream(AsyncNetworkStream):",
      "context": [
        "",
        "",
        "class AsyncMockStream(AsyncNetworkStream):",
        "    def __init__(self, buffer: list[bytes], http2: bool = False) -> None:",
        "        self._buffer = buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 113,
      "type": "Mock Implementation",
      "description": "return MockSSLObject(http2=self._http2) if info == \"ssl_object\" else None",
      "context": [
        "",
        "    def get_extra_info(self, info: str) -> typing.Any:",
        "        return MockSSLObject(http2=self._http2) if info == \"ssl_object\" else None",
        "",
        "    def __repr__(self) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 116,
      "type": "Mock Implementation",
      "description": "return \"<httpcore.AsyncMockStream>\"",
      "context": [
        "",
        "    def __repr__(self) -> str:",
        "        return \"<httpcore.AsyncMockStream>\"",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 119,
      "type": "Mock Class",
      "description": "class AsyncMockBackend(AsyncNetworkBackend):",
      "context": [
        "",
        "",
        "class AsyncMockBackend(AsyncNetworkBackend):",
        "    def __init__(self, buffer: list[bytes], http2: bool = False) -> None:",
        "        self._buffer = buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 132,
      "type": "Mock Implementation",
      "description": "return AsyncMockStream(list(self._buffer), http2=self._http2)",
      "context": [
        "        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,",
        "    ) -> AsyncNetworkStream:",
        "        return AsyncMockStream(list(self._buffer), http2=self._http2)",
        "",
        "    async def connect_unix_socket("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 140,
      "type": "Mock Implementation",
      "description": "return AsyncMockStream(list(self._buffer), http2=self._http2)",
      "context": [
        "        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,",
        "    ) -> AsyncNetworkStream:",
        "        return AsyncMockStream(list(self._buffer), http2=self._http2)",
        "",
        "    async def sleep(self, seconds: float) -> None:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/plugins/attrs.py",
      "line": 850,
      "type": "Mock Class",
      "description": "\"\"\"Turn all the attributes into properties to simulate frozen classes.\"\"\"",
      "context": [
        "",
        "def _make_frozen(ctx: mypy.plugin.ClassDefContext, attributes: list[Attribute]) -> None:",
        "    \"\"\"Turn all the attributes into properties to simulate frozen classes.\"\"\"",
        "    for attribute in attributes:",
        "        if attribute.name in ctx.cls.info.names:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/test/teststubtest.py",
      "line": 563,
      "type": "Simulation",
      "description": "# Simulate \"<unrepresentable>\"",
      "context": [
        "        )",
        "",
        "        # Simulate \"<unrepresentable>\"",
        "        yield Case(",
        "            stub=\"def f11() -> None: ...\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/test/teststubtest.py",
      "line": 573,
      "type": "Simulation",
      "description": "# Simulate numpy ndarray.__bool__ that raises an error",
      "context": [
        "        )",
        "",
        "        # Simulate numpy ndarray.__bool__ that raises an error",
        "        yield Case(",
        "            stub=\"def f12(x=1): ...\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/test/testutil.py",
      "line": 14,
      "type": "Mock Implementation",
      "description": "mock_environ = os.environ.copy()",
      "context": [
        "        # when run using a pty, `os.get_terminal_size()` returns `0, 0`",
        "        ret = os.terminal_size((0, 0))",
        "        mock_environ = os.environ.copy()",
        "        mock_environ.pop(\"COLUMNS\", None)",
        "        with mock.patch.object(os, \"get_terminal_size\", return_value=ret):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/test/testutil.py",
      "line": 15,
      "type": "Mock Implementation",
      "description": "mock_environ.pop(\"COLUMNS\", None)",
      "context": [
        "        ret = os.terminal_size((0, 0))",
        "        mock_environ = os.environ.copy()",
        "        mock_environ.pop(\"COLUMNS\", None)",
        "        with mock.patch.object(os, \"get_terminal_size\", return_value=ret):",
        "            with mock.patch.dict(os.environ, values=mock_environ, clear=True):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/test/testutil.py",
      "line": 17,
      "type": "Mock Implementation",
      "description": "with mock.patch.dict(os.environ, values=mock_environ, clear=True):",
      "context": [
        "        mock_environ.pop(\"COLUMNS\", None)",
        "        with mock.patch.object(os, \"get_terminal_size\", return_value=ret):",
        "            with mock.patch.dict(os.environ, values=mock_environ, clear=True):",
        "                assert get_terminal_width() == 80",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 240,
      "type": "Simulation",
      "description": "assert False, \"simulated connect failure didn't work\"",
      "context": [
        "            # above, connection is closed",
        "            curs.execute(\"select 1\")",
        "            assert False, \"simulated connect failure didn't work\"",
        "        else:",
        "            self.connections.append(conn)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 387,
      "type": "Mock Method",
      "description": "def mock_engine(dialect_name=None):",
      "context": [
        "",
        "",
        "def mock_engine(dialect_name=None):",
        "    \"\"\"Provides a mocking engine based on the current testing.db.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 387,
      "type": "Mock Method",
      "description": "def mock_engine(dialect_name=None):",
      "context": [
        "",
        "",
        "def mock_engine(dialect_name=None):",
        "    \"\"\"Provides a mocking engine based on the current testing.db.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 399,
      "type": "Mock Implementation",
      "description": "from sqlalchemy import create_mock_engine",
      "context": [
        "    \"\"\"",
        "",
        "    from sqlalchemy import create_mock_engine",
        "",
        "    if not dialect_name:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 415,
      "type": "Mock Implementation",
      "description": "return \"\\n\".join(str(s.compile(dialect=d)) for s in engine.mock)",
      "context": [
        "    def print_sql():",
        "        d = engine.dialect",
        "        return \"\\n\".join(str(s.compile(dialect=d)) for s in engine.mock)",
        "",
        "    engine = create_mock_engine(dialect_name + \"://\", executor)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 417,
      "type": "Mock Implementation",
      "description": "engine = create_mock_engine(dialect_name + \"://\", executor)",
      "context": [
        "        return \"\\n\".join(str(s.compile(dialect=d)) for s in engine.mock)",
        "",
        "    engine = create_mock_engine(dialect_name + \"://\", executor)",
        "    assert not hasattr(engine, \"mock\")",
        "    engine.mock = buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/config.py",
      "line": 63,
      "type": "Mock Implementation",
      "description": "return mock.Mock()",
      "context": [
        "        @property",
        "        def add_to_marker(self):",
        "            return mock.Mock()",
        "",
        "        def mark_base_test_class(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/requirements.py",
      "line": 1538,
      "type": "Mock Method",
      "description": "def threading_with_mock(self):",
      "context": [
        "",
        "    @property",
        "    def threading_with_mock(self):",
        "        \"\"\"Mark tests that use threading and mock at the same time - stability",
        "        issues have been observed with coverage"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/__init__.py",
      "line": 42,
      "type": "Mock Implementation",
      "description": "from .mock import create_mock_engine as create_mock_engine",
      "context": [
        "from .interfaces import ExecutionContext as ExecutionContext",
        "from .interfaces import TypeCompiler as TypeCompiler",
        "from .mock import create_mock_engine as create_mock_engine",
        "from .reflection import Inspector as Inspector",
        "from .reflection import ObjectKind as ObjectKind"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/url.py",
      "line": 858,
      "type": "Mock Implementation",
      "description": "name_or_url, \"_sqla_is_testing_if_this_is_a_mock_object\"",
      "context": [
        "        return _parse_url(name_or_url)",
        "    elif not isinstance(name_or_url, URL) and not hasattr(",
        "        name_or_url, \"_sqla_is_testing_if_this_is_a_mock_object\"",
        "    ):",
        "        raise exc.ArgumentError("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/strategies.py",
      "line": 15,
      "type": "Mock Class",
      "description": "class MockEngineStrategy:",
      "context": [
        "",
        "",
        "class MockEngineStrategy:",
        "    MockConnection = MockConnection",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py",
      "line": 25,
      "type": "Mock Implementation",
      "description": "from .mock import create_mock_engine",
      "context": [
        "from . import url as _url",
        "from .interfaces import DBAPIConnection",
        "from .mock import create_mock_engine",
        "from .. import event",
        "from .. import exc"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py",
      "line": 97,
      "type": "Mock Implementation",
      "description": "\":func:`.create_mock_engine` going forward.  For general \"",
      "context": [
        "        \"The :paramref:`_sa.create_engine.strategy` keyword is deprecated, \"",
        "        \"and the only argument accepted is 'mock'; please use \"",
        "        \":func:`.create_mock_engine` going forward.  For general \"",
        "        \"customization of create_engine which may have been accomplished \"",
        "        \"using strategies, see :class:`.CreateEnginePlugin`.\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py",
      "line": 557,
      "type": "Mock Implementation",
      "description": "return create_mock_engine(url, **kwargs)  # type: ignore",
      "context": [
        "        if strat == \"mock\":",
        "            # this case is deprecated",
        "            return create_mock_engine(url, **kwargs)  # type: ignore",
        "        else:",
        "            raise exc.ArgumentError(\"unknown strategy: %r\" % strat)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py",
      "line": 557,
      "type": "Mock Implementation",
      "description": "return create_mock_engine(url, **kwargs)  # type: ignore",
      "context": [
        "        if strat == \"mock\":",
        "            # this case is deprecated",
        "            return create_mock_engine(url, **kwargs)  # type: ignore",
        "        else:",
        "            raise exc.ArgumentError(\"unknown strategy: %r\" % strat)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 35,
      "type": "Mock Class",
      "description": "class MockConnection:",
      "context": [
        "",
        "",
        "class MockConnection:",
        "    def __init__(self, dialect: Dialect, execute: Callable[..., Any]):",
        "        self._dialect = dialect"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 44,
      "type": "Mock Method",
      "description": "def connect(self, **kwargs: Any) -> MockConnection:",
      "context": [
        "    name: str = cast(Any, property(lambda s: s._dialect.name))",
        "",
        "    def connect(self, **kwargs: Any) -> MockConnection:",
        "        return self",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 50,
      "type": "Mock Method",
      "description": "def execution_options(self, **kw: Any) -> MockConnection:",
      "context": [
        "        return obj.schema",
        "",
        "    def execution_options(self, **kw: Any) -> MockConnection:",
        "        return self",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 73,
      "type": "Mock Method",
      "description": "def create_mock_engine(",
      "context": [
        "",
        "",
        "def create_mock_engine(",
        "    url: Union[str, URL], executor: Any, **kw: Any",
        ") -> MockConnection:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 73,
      "type": "Mock Method",
      "description": "def create_mock_engine(",
      "context": [
        "",
        "",
        "def create_mock_engine(",
        "    url: Union[str, URL], executor: Any, **kw: Any",
        ") -> MockConnection:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 92,
      "type": "Mock Implementation",
      "description": "from sqlalchemy import create_mock_engine",
      "context": [
        "    E.g.::",
        "",
        "        from sqlalchemy import create_mock_engine",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 99,
      "type": "Mock Implementation",
      "description": "engine = create_mock_engine(\"postgresql+psycopg2://\", dump)",
      "context": [
        "",
        "",
        "        engine = create_mock_engine(\"postgresql+psycopg2://\", dump)",
        "        metadata.create_all(engine, checkfirst=False)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 110,
      "type": "Mock Implementation",
      "description": ".. versionadded:: 1.4 - the :func:`.create_mock_engine` function replaces",
      "context": [
        "     into a string using :meth:`.ExecutableDDLElement.compile`.",
        "",
        "    .. versionadded:: 1.4 - the :func:`.create_mock_engine` function replaces",
        "       the previous \"mock\" engine strategy used with",
        "       :func:`_sa.create_engine`."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 134,
      "type": "Mock Implementation",
      "description": "return MockConnection(dialect, executor)",
      "context": [
        "    dialect = dialect_cls(**dialect_args)",
        "",
        "    return MockConnection(dialect, executor)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_reflection.py",
      "line": 1011,
      "type": "Mock Method",
      "description": "name, auto=False, default=mock.ANY, comment=None, nullable=True",
      "context": [
        "    ):",
        "        def col(",
        "            name, auto=False, default=mock.ANY, comment=None, nullable=True",
        "        ):",
        "            res = {"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_reflection.py",
      "line": 1026,
      "type": "Mock Method",
      "description": "kw = {\"auto\": True, \"default\": mock.ANY, \"nullable\": False, **kw}",
      "context": [
        "",
        "        def pk(name, **kw):",
        "            kw = {\"auto\": True, \"default\": mock.ANY, \"nullable\": False, **kw}",
        "            return col(name, **kw)",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_reflection.py",
      "line": 1110,
      "type": "Mock Method",
      "description": "def pk(*cols, name=mock.ANY, comment=None):",
      "context": [
        "        filter_names=None,",
        "    ):",
        "        def pk(*cols, name=mock.ANY, comment=None):",
        "            return {",
        "                \"constrained_columns\": list(cols),"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_dialect.py",
      "line": 371,
      "type": "Mock Implementation",
      "description": "eq_(check_rollback.mock_calls, [mock.call()])",
      "context": [
        "            conn.close()",
        "        if autocommit_setting.false or not block_rollback:",
        "            eq_(check_rollback.mock_calls, [mock.call()])",
        "        else:",
        "            eq_(check_rollback.mock_calls, [])"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_dialect.py",
      "line": 373,
      "type": "Mock Implementation",
      "description": "eq_(check_rollback.mock_calls, [])",
      "context": [
        "            eq_(check_rollback.mock_calls, [mock.call()])",
        "        else:",
        "            eq_(check_rollback.mock_calls, [])",
        "",
        "    @testing.requires.independent_readonly_connections"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_types.py",
      "line": 1610,
      "type": "Mock Implementation",
      "description": "eq_(js.mock_calls, [mock.call(data_element)])",
      "context": [
        "",
        "            eq_(row, (data_element,))",
        "            eq_(js.mock_calls, [mock.call(data_element)])",
        "            if testing.requires.json_deserializer_binary.enabled:",
        "                eq_("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_types.py",
      "line": 1613,
      "type": "Mock Implementation",
      "description": "jd.mock_calls,",
      "context": [
        "            if testing.requires.json_deserializer_binary.enabled:",
        "                eq_(",
        "                    jd.mock_calls,",
        "                    [mock.call(json.dumps(data_element).encode())],",
        "                )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_types.py",
      "line": 1617,
      "type": "Mock Implementation",
      "description": "eq_(jd.mock_calls, [mock.call(json.dumps(data_element))])",
      "context": [
        "                )",
        "            else:",
        "                eq_(jd.mock_calls, [mock.call(json.dumps(data_element))])",
        "",
        "    @testing.combinations("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/greenlet/tests/leakcheck.py",
      "line": 107,
      "type": "Mock Class",
      "description": "class _MockGC(object):",
      "context": [
        "    # trace *all* the objects, not just those that are tracked by the",
        "    # GC",
        "    class _MockGC(object):",
        "        def get_objects(self):",
        "            return sys.getobjects(0) # pylint:disable=no-member"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/_core/getlimits.py",
      "line": 35,
      "type": "Simulation",
      "description": "\"\"\" Object to simulate MachAr instance \"\"\"",
      "context": [
        "",
        "class MachArLike:",
        "    \"\"\" Object to simulate MachAr instance \"\"\"",
        "    def __init__(self, ftype, *, eps, epsneg, huge, tiny,",
        "                 ibeta, smallest_subnormal=None, **kwargs):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/lib/_npyio_impl.py",
      "line": 554,
      "type": "Simulation",
      "description": ">>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
      "context": [
        "    >>> np.save(outfile, x)",
        "",
        "    >>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
        "    >>> np.load(outfile)",
        "    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/lib/_npyio_impl.py",
      "line": 667,
      "type": "Simulation",
      "description": ">>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
      "context": [
        "",
        "    >>> np.savez(outfile, x, y)",
        "    >>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
        "    >>> npzfile = np.load(outfile)",
        "    >>> npzfile.files"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/tests/test_numpy_config.py",
      "line": 24,
      "type": "Mock Method",
      "description": "def test_pyyaml_not_found(self, mock_yaml_importer):",
      "context": [
        "",
        "    @patch(\"numpy.__config__._check_pyyaml\")",
        "    def test_pyyaml_not_found(self, mock_yaml_importer):",
        "        mock_yaml_importer.side_effect = ModuleNotFoundError()",
        "        with pytest.warns(UserWarning):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/tests/test_numpy_config.py",
      "line": 24,
      "type": "Mock Method",
      "description": "def test_pyyaml_not_found(self, mock_yaml_importer):",
      "context": [
        "",
        "    @patch(\"numpy.__config__._check_pyyaml\")",
        "    def test_pyyaml_not_found(self, mock_yaml_importer):",
        "        mock_yaml_importer.side_effect = ModuleNotFoundError()",
        "        with pytest.warns(UserWarning):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/tests/test_numpy_config.py",
      "line": 25,
      "type": "Mock Implementation",
      "description": "mock_yaml_importer.side_effect = ModuleNotFoundError()",
      "context": [
        "    @patch(\"numpy.__config__._check_pyyaml\")",
        "    def test_pyyaml_not_found(self, mock_yaml_importer):",
        "        mock_yaml_importer.side_effect = ModuleNotFoundError()",
        "        with pytest.warns(UserWarning):",
        "            np.show_config()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/random/tests/test_generator_mt19937.py",
      "line": 2759,
      "type": "Simulation",
      "description": "# Simulate unpickling an old pickle that only has the name",
      "context": [
        "    # Directly call reduce which is used in pickling",
        "    ctor, (bit_gen, ), _ = rg.__reduce__()",
        "    # Simulate unpickling an old pickle that only has the name",
        "    assert bit_gen.__class__.__name__ == \"PCG64DXSM\"",
        "    print(ctor)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/random/tests/test_randomstate.py",
      "line": 2060,
      "type": "Simulation",
      "description": "# Simulate unpickling an old pickle that only has the name",
      "context": [
        "    # Directly call reduce which is used in pickling",
        "    ctor, args, state_a = rs.__reduce__()",
        "    # Simulate unpickling an old pickle that only has the name",
        "    assert args[0].__class__.__name__ == \"MT19937\"",
        "    b = ctor(*(\"MT19937\",))"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/lib/tests/test__datasource.py",
      "line": 347,
      "type": "Simulation",
      "description": "# simulate failed __init__ by removing key attribute",
      "context": [
        "",
        "    ds = datasource.DataSource()",
        "    # simulate failed __init__ by removing key attribute",
        "    # produced within __init__ and expected by __del__",
        "    del ds._istmpdest"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/_core/tests/test_overrides.py",
      "line": 515,
      "type": "Mock Method",
      "description": "def test_sum_on_mock_array(self):",
      "context": [
        "        assert_equal(np.sum(MyArray()), 'yes')",
        "",
        "    def test_sum_on_mock_array(self):",
        "",
        "        # We need a proxy for mocks because __array_function__ is only looked"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/_core/tests/test_overrides.py",
      "line": 515,
      "type": "Mock Method",
      "description": "def test_sum_on_mock_array(self):",
      "context": [
        "        assert_equal(np.sum(MyArray()), 'yes')",
        "",
        "    def test_sum_on_mock_array(self):",
        "",
        "        # We need a proxy for mocks because __array_function__ is only looked"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/_core/tests/test_regression.py",
      "line": 1728,
      "type": "Simulation",
      "description": "# it is designed to simulate an old API",
      "context": [
        "            # squeeze to have an axis argument",
        "            # NOTE: this example is somewhat artificial;",
        "            # it is designed to simulate an old API",
        "            # expectation to guard against regression",
        "            def squeeze(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pygments/lexers/_scilab_builtins.py",
      "line": 2773,
      "type": "Simulation",
      "description": "'scicos_simulate',",
      "context": [
        "    'sci_sparse',",
        "    'scicos_getvalue',",
        "    'scicos_simulate',",
        "    'scicos_workspace_init',",
        "    'scisptdemo',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pygments/lexers/_scilab_builtins.py",
      "line": 2953,
      "type": "Simulation",
      "description": "'xcos_simulate',",
      "context": [
        "    'xcos_debug_gui',",
        "    'xcos_run',",
        "    'xcos_simulate',",
        "    'xcov',",
        "    'xmltochm',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pygments/lexers/_scilab_builtins.py",
      "line": 3040,
      "type": "Simulation",
      "description": "'simulated_annealinglib',",
      "context": [
        "    'scinoteslib',",
        "    'signal_processinglib',",
        "    'simulated_annealinglib',",
        "    'soundlib',",
        "    'sparselib',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pygments/lexers/_stata_builtins.py",
      "line": 245,
      "type": "Simulation",
      "description": "\"signtest\", \"simul\", \"simul_7\", \"simulate\", \"simulate_8\",",
      "context": [
        "    \"set_defaults\", \"sfrancia\", \"sh\", \"she\", \"shel\", \"shell\",",
        "    \"shewhart\", \"shewhart_7\", \"signestimationsample\", \"signrank\",",
        "    \"signtest\", \"simul\", \"simul_7\", \"simulate\", \"simulate_8\",",
        "    \"sktest\", \"sleep\", \"slogit\", \"slogit_d2\", \"slogit_p\", \"smooth\",",
        "    \"snapspan\", \"so\", \"sor\", \"sort\", \"spearman\", \"spikeplot\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/redis/asyncio/cluster.py",
      "line": 1208,
      "type": "Mock Method",
      "description": "async def _mock(self, error: RedisError):",
      "context": [
        "            self._free.append(conn)",
        "",
        "    async def _mock(self, error: RedisError):",
        "        \"\"\"",
        "        Dummy functions, needs to be passed as error callback to retry object."
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/redis/asyncio/connection.py",
      "line": 1253,
      "type": "Mock Method",
      "description": "async def _mock(self, error: RedisError):",
      "context": [
        "                conn.set_re_auth_token(token)",
        "",
        "    async def _mock(self, error: RedisError):",
        "        \"\"\"",
        "        Dummy functions, needs to be passed as error callback to retry object."
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/redis/commands/core.py",
      "line": 81,
      "type": "Simulation",
      "description": "Simulate the execution of a given command by a given ``username``.",
      "context": [
        "    def acl_dryrun(self, username, *args, **kwargs):",
        "        \"\"\"",
        "        Simulate the execution of a given command by a given ``username``.",
        "",
        "        For more information see https://redis.io/commands/acl-dryrun"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 26,
      "type": "Mock Class",
      "description": "from ._mock_val_ser import set_dataclass_mocks",
      "context": [
        "from ._generate_schema import GenerateSchema, InvalidSchemaError",
        "from ._generics import get_standard_typevars_map",
        "from ._mock_val_ser import set_dataclass_mocks",
        "from ._namespace_utils import NsResolver",
        "from ._signature import generate_pydantic_signature"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 26,
      "type": "Mock Class",
      "description": "from ._mock_val_ser import set_dataclass_mocks",
      "context": [
        "from ._generate_schema import GenerateSchema, InvalidSchemaError",
        "from ._generics import get_standard_typevars_map",
        "from ._mock_val_ser import set_dataclass_mocks",
        "from ._namespace_utils import NsResolver",
        "from ._signature import generate_pydantic_signature"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 133,
      "type": "Mock Class",
      "description": "set_dataclass_mocks(cls)",
      "context": [
        "",
        "    if not _force_build and config_wrapper.defer_build:",
        "        set_dataclass_mocks(cls)",
        "        return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 170,
      "type": "Mock Class",
      "description": "set_dataclass_mocks(cls, f'`{e.name}`')",
      "context": [
        "        if raise_errors:",
        "            raise",
        "        set_dataclass_mocks(cls, f'`{e.name}`')",
        "        return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 178,
      "type": "Mock Class",
      "description": "set_dataclass_mocks(cls)",
      "context": [
        "        schema = gen_schema.clean_schema(schema)",
        "    except InvalidSchemaError:",
        "        set_dataclass_mocks(cls)",
        "        return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_decorators.py",
      "line": 358,
      "type": "Mock Class",
      "description": "aiming to simulate calling the method on the actual class.",
      "context": [
        "def get_attribute_from_bases(tp: type[Any] | tuple[type[Any], ...], name: str) -> Any:",
        "    \"\"\"Get the attribute from the next class in the MRO that has it,",
        "    aiming to simulate calling the method on the actual class.",
        "",
        "    The reason for iterating over the mro instead of just getting"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_generate_schema.py",
      "line": 99,
      "type": "Mock Implementation",
      "description": "from ._mock_val_ser import MockCoreSchema",
      "context": [
        "from ._generics import get_standard_typevars_map, replace_types",
        "from ._import_utils import import_cached_base_model, import_cached_field_info",
        "from ._mock_val_ser import MockCoreSchema",
        "from ._namespace_utils import NamespacesTuple, NsResolver",
        "from ._schema_gather import MissingDefinitionError, gather_schemas_for_cleaning"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 21,
      "type": "Mock Class",
      "description": "class MockCoreSchema(Mapping[str, Any]):",
      "context": [
        "",
        "",
        "class MockCoreSchema(Mapping[str, Any]):",
        "    \"\"\"Mocker for `pydantic_core.CoreSchema` which optionally attempts to",
        "    rebuild the thing it's mocking when one of its methods is accessed and raises an error if that fails."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 71,
      "type": "Mock Class",
      "description": "class MockValSer(Generic[ValSer]):",
      "context": [
        "",
        "",
        "class MockValSer(Generic[ValSer]):",
        "    \"\"\"Mocker for `pydantic_core.SchemaValidator` or `pydantic_core.SchemaSerializer` which optionally attempts to",
        "    rebuild the thing it's mocking when one of its methods is accessed and raises an error if that fails."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 112,
      "type": "Mock Method",
      "description": "def set_type_adapter_mocks(adapter: TypeAdapter) -> None:",
      "context": [
        "",
        "",
        "def set_type_adapter_mocks(adapter: TypeAdapter) -> None:",
        "    \"\"\"Set `core_schema`, `validator` and `serializer` to mock core types on a type adapter instance.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 151,
      "type": "Mock Method",
      "description": "def set_model_mocks(cls: type[BaseModel], undefined_name: str = 'all referenced types') -> None:",
      "context": [
        "",
        "",
        "def set_model_mocks(cls: type[BaseModel], undefined_name: str = 'all referenced types') -> None:",
        "    \"\"\"Set `__pydantic_core_schema__`, `__pydantic_validator__` and `__pydantic_serializer__` to mock core types on a model.",
        ""
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 155,
      "type": "Mock Class",
      "description": "cls: The model class to set the mocks on",
      "context": [
        "",
        "    Args:",
        "        cls: The model class to set the mocks on",
        "        undefined_name: Name of the undefined thing, used in error messages",
        "    \"\"\""
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 190,
      "type": "Mock Class",
      "description": "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
      "context": [
        "",
        "",
        "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
        "    \"\"\"Set `__pydantic_validator__` and `__pydantic_serializer__` to `MockValSer`s on a dataclass.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 190,
      "type": "Mock Class",
      "description": "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
      "context": [
        "",
        "",
        "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
        "    \"\"\"Set `__pydantic_validator__` and `__pydantic_serializer__` to `MockValSer`s on a dataclass.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 194,
      "type": "Mock Class",
      "description": "cls: The model class to set the mocks on",
      "context": [
        "",
        "    Args:",
        "        cls: The model class to set the mocks on",
        "        undefined_name: Name of the undefined thing, used in error messages",
        "    \"\"\""
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_model_construction.py",
      "line": 29,
      "type": "Mock Implementation",
      "description": "from ._mock_val_ser import set_model_mocks",
      "context": [
        "from ._generics import PydanticGenericMetadata, get_model_typevars_map",
        "from ._import_utils import import_cached_base_model, import_cached_field_info",
        "from ._mock_val_ser import set_model_mocks",
        "from ._namespace_utils import NsResolver",
        "from ._signature import generate_pydantic_signature"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pip/_vendor/distlib/version.py",
      "line": 670,
      "type": "Simulation",
      "description": "# by zero-filling numeric values so simulate a numeric comparison",
      "context": [
        "            parts = s[1:].split('.')",
        "            # We can't compare ints and strings on Python 3, so fudge it",
        "            # by zero-filling numeric values so simulate a numeric comparison",
        "            result = tuple([p.zfill(8) if p.isdigit() else p for p in parts])",
        "        return result"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pip/_vendor/requests/cookies.py",
      "line": 23,
      "type": "Mock Class",
      "description": "class MockRequest:",
      "context": [
        "",
        "",
        "class MockRequest:",
        "    \"\"\"Wraps a `requests.Request` to mimic a `urllib2.Request`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pip/_vendor/requests/cookies.py",
      "line": 103,
      "type": "Mock Class",
      "description": "class MockResponse:",
      "context": [
        "",
        "",
        "class MockResponse:",
        "    \"\"\"Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pip/_vendor/requests/models.py",
      "line": 845,
      "type": "Simulation",
      "description": "# simulate reading small chunks of the content",
      "context": [
        "                f\"chunk_size must be an int, it is instead a {type(chunk_size)}.\"",
        "            )",
        "        # simulate reading small chunks of the content",
        "        reused_chunks = iter_slices(self._content, chunk_size)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pip/_internal/operations/check.py",
      "line": 118,
      "type": "Simulation",
      "description": "would_be_installed = _simulate_installation_of(to_install, package_set)",
      "context": [
        "    package_set, _ = create_package_set_from_installed()",
        "    # Install packages",
        "    would_be_installed = _simulate_installation_of(to_install, package_set)",
        "",
        "    # Only warn about directly-dependent packages; create a whitelist of them"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pip/_internal/operations/check.py",
      "line": 147,
      "type": "Mock Method",
      "description": "def _simulate_installation_of(",
      "context": [
        "",
        "",
        "def _simulate_installation_of(",
        "    to_install: List[InstallRequirement], package_set: PackageSet",
        ") -> Set[NormalizedName]:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pip/_internal/utils/misc.py",
      "line": 394,
      "type": "Simulation",
      "description": "# Simulates an enum",
      "context": [
        "",
        "",
        "# Simulates an enum",
        "def enum(*sequential: Any, **named: Any) -> Type[Any]:",
        "    enums = dict(zip(sequential, range(len(sequential))), **named)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/services/agent-orchestrator/src/main.py",
      "line": 370,
      "type": "Simulation",
      "description": "# Simulate execution - integrate with real agent_executor",
      "context": [
        "        orchestration = orchestrator.active_orchestrations[orchestration_id]",
        "        ",
        "        # Simulate execution - integrate with real agent_executor",
        "        await asyncio.sleep(5)",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/services/api-gateway/src/main.py",
      "line": 233,
      "type": "Mock Implementation",
      "description": "cost=0.001,  # Mock cost - integrate with real cost calculation",
      "context": [
        "            model_used=request.model_preference or \"llama3.2-3b\",",
        "            model_recommended=\"llama3.2-3b\",",
        "            cost=0.001,  # Mock cost - integrate with real cost calculation",
        "            latency=1000,  # Mock latency",
        "            context=request.context"
      ],
      "complexity": "Low",
      "priority": 5
    },
    {
      "file": "backups/v2-deployment-20251011-092839/services/api-gateway/src/main.py",
      "line": 234,
      "type": "Mock Implementation",
      "description": "latency=1000,  # Mock latency",
      "context": [
        "            model_recommended=\"llama3.2-3b\",",
        "            cost=0.001,  # Mock cost - integrate with real cost calculation",
        "            latency=1000,  # Mock latency",
        "            context=request.context",
        "        )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "backups/v2-deployment-20251011-092839/services/api-gateway/src/main.py",
      "line": 290,
      "type": "Simulation",
      "description": "# Simulate task processing - integrate with real agent_executor",
      "context": [
        "    \"\"\"",
        "    try:",
        "        # Simulate task processing - integrate with real agent_executor",
        "        await asyncio.sleep(2)",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/exported-assets/agent_executor_fixed.py",
      "line": 263,
      "type": "Mock Implementation",
      "description": "# Mock agent",
      "context": [
        "if __name__ == \"__main__\":",
        "    async def test_executor():",
        "        # Mock agent",
        "        class MockAgent:",
        "            async def execute(self, input_data, workspace_dir):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/exported-assets/agent_executor_fixed.py",
      "line": 264,
      "type": "Mock Class",
      "description": "class MockAgent:",
      "context": [
        "    async def test_executor():",
        "        # Mock agent",
        "        class MockAgent:",
        "            async def execute(self, input_data, workspace_dir):",
        "                await asyncio.sleep(0.5)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/exported-assets/script_2.py",
      "line": 265,
      "type": "Mock Implementation",
      "description": "# Mock agent",
      "context": [
        "if __name__ == \"__main__\":",
        "    async def test_executor():",
        "        # Mock agent",
        "        class MockAgent:",
        "            async def execute(self, input_data, workspace_dir):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/exported-assets/script_2.py",
      "line": 266,
      "type": "Mock Class",
      "description": "class MockAgent:",
      "context": [
        "    async def test_executor():",
        "        # Mock agent",
        "        class MockAgent:",
        "            async def execute(self, input_data, workspace_dir):",
        "                await asyncio.sleep(0.5)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/ai_streaming.py",
      "line": 94,
      "type": "Simulation",
      "description": "# Simulate model loading time",
      "context": [
        "            )",
        "            ",
        "            # Simulate model loading time",
        "            for i in range(3):",
        "                if self.cancel_requested:"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/simple_dashboard.py",
      "line": 96,
      "type": "Mock Method",
      "description": "def simulate_generation(self):",
      "context": [
        "        input(\"\u23ce Naci\u015bnij Enter...\")",
        "    ",
        "    def simulate_generation(self):",
        "        if not self.agents:",
        "            print(\"\u274c Brak agent\u00f3w do generacji!\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/simple_dashboard.py",
      "line": 241,
      "type": "Simulation",
      "description": "self.simulate_generation()",
      "context": [
        "                    self.add_test_agent()",
        "                elif choice == '2':",
        "                    self.simulate_generation()",
        "                elif choice == '3':",
        "                    self.show_details()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/workspace_extension.py",
      "line": 234,
      "type": "Simulation",
      "description": "# Simulate code generation (jak TW\u00d3J system)",
      "context": [
        "    print(\"\\n\ud83d\udcdd Testing workspace file creation...\")",
        "    ",
        "    # Simulate code generation (jak TW\u00d3J system)",
        "    sample_codes = [",
        "        {"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/workspace_manager.py",
      "line": 543,
      "type": "Simulation",
      "description": "# Simulate code generation (like YOUR agents would do)",
      "context": [
        "    await workspace_manager.create_project_structure(workspace_id, \"fastapi\")",
        "    ",
        "    # Simulate code generation (like YOUR agents would do)",
        "    sample_code = '''",
        "from fastapi import FastAPI, Depends, HTTPException"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/execution/agent_executor_fixed.py",
      "line": 386,
      "type": "Mock Implementation",
      "description": "# Placeholder for API call implementation",
      "context": [
        "    ) -> Any:",
        "        \"\"\"Execute API call task.\"\"\"",
        "        # Placeholder for API call implementation",
        "        # This would integrate with the Agent Zero V1 API routing system",
        "        endpoint = task_def.get(\"endpoint\", \"\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/execution/agent_executor_fixed.py",
      "line": 394,
      "type": "Mock Implementation",
      "description": "# Mock response for now - replace with actual API integration",
      "context": [
        "        self.logger.info(f\"API call: {method} {endpoint}\")",
        "        ",
        "        # Mock response for now - replace with actual API integration",
        "        return {",
        "            \"status\": \"success\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/execution/agent_executor_fixed.py",
      "line": 415,
      "type": "Mock Implementation",
      "description": "# Mock response - replace with Neo4j integration",
      "context": [
        "        self.logger.info(f\"Knowledge query: {query_type}\")",
        "        ",
        "        # Mock response - replace with Neo4j integration",
        "        return {",
        "            \"status\": \"success\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/execution/project_orchestrator_enhanced.py",
      "line": 47,
      "type": "Simulation",
      "description": "# Simulate project execution",
      "context": [
        "        start_time = time.time()",
        "        ",
        "        # Simulate project execution",
        "        print(\"\ud83d\udccb Decomposing requirements into tasks...\")",
        "        await asyncio.sleep(1)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/integrations/test_integrations.py",
      "line": 14,
      "type": "Mock Method",
      "description": "def test_github_mock():",
      "context": [
        "",
        "",
        "def test_github_mock():",
        "    \"\"\"Test GitHub integration (mock - bez prawdziwych API calls)\"\"\"",
        "    print(\"=\"*70)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/interactive_control_system.py",
      "line": 206,
      "type": "Simulation",
      "description": "# For demonstration, we'll simulate the execution process",
      "context": [
        "        ",
        "        # This would integrate with the actual ProjectOrchestrator",
        "        # For demonstration, we'll simulate the execution process",
        "        ",
        "        print(\"\ud83d\udd04 Integrating with ProjectOrchestrator...\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/interactive_control_system.py",
      "line": 210,
      "type": "Simulation",
      "description": "# Simulate task execution phases",
      "context": [
        "        print(\"\ud83d\udd04 Integrating with ProjectOrchestrator...\")",
        "        ",
        "        # Simulate task execution phases",
        "        phases = [",
        "            (\"Analysis\", \"Analyzing requirements and architecture\", 15),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/interactive_control_system.py",
      "line": 236,
      "type": "Simulation",
      "description": "# Simulate agent execution with real-time updates",
      "context": [
        "            })",
        "            ",
        "            # Simulate agent execution with real-time updates",
        "            await self._simulate_phase_execution(session, phase_name, phase_desc, duration)",
        "            "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/interactive_control_system.py",
      "line": 237,
      "type": "Simulation",
      "description": "await self._simulate_phase_execution(session, phase_name, phase_desc, duration)",
      "context": [
        "            ",
        "            # Simulate agent execution with real-time updates",
        "            await self._simulate_phase_execution(session, phase_name, phase_desc, duration)",
        "            ",
        "            completed_tasks.append(phase_name)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/interactive_control_system.py",
      "line": 258,
      "type": "Mock Method",
      "description": "async def _simulate_phase_execution(self,",
      "context": [
        "        }",
        "        ",
        "    async def _simulate_phase_execution(self,",
        "                                      session: InteractiveControlSession,",
        "                                      phase_name: str,"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/interactive_control_system.py",
      "line": 263,
      "type": "Simulation",
      "description": "\"\"\"Simulate phase execution with agent updates\"\"\"",
      "context": [
        "                                      phase_desc: str,",
        "                                      duration: int):",
        "        \"\"\"Simulate phase execution with agent updates\"\"\"",
        "        ",
        "        # Simulate different agents working on the phase"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/interactive_control_system.py",
      "line": 265,
      "type": "Simulation",
      "description": "# Simulate different agents working on the phase",
      "context": [
        "        \"\"\"Simulate phase execution with agent updates\"\"\"",
        "        ",
        "        # Simulate different agents working on the phase",
        "        agents = [",
        "            (\"architect\", \"Designing system architecture\"),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/interactive_control_system.py",
      "line": 306,
      "type": "Simulation",
      "description": "tokens_generated=progress * 3,  # Simulate token generation",
      "context": [
        "                    progress_percent=progress,",
        "                    current_step=task_desc,",
        "                    tokens_generated=progress * 3,  # Simulate token generation",
        "                    time_elapsed=progress * 0.1,",
        "                    memory_usage_mb=256 + progress * 2"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/interactive_control_system.py",
      "line": 340,
      "type": "Simulation",
      "description": "# Simulate quality check",
      "context": [
        "                await asyncio.sleep(30)  # Check every 30 seconds",
        "                ",
        "                # Simulate quality check",
        "                print(\"\ud83d\udd0d Performing quality check...\")",
        "                "
      ],
      "complexity": "Low",
      "priority": 5
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/interactive_control_system.py",
      "line": 356,
      "type": "Simulation",
      "description": "# For demo, we'll create a simulated quality report",
      "context": [
        "        ",
        "        # In real implementation, this would analyze the actual generated project",
        "        # For demo, we'll create a simulated quality report",
        "        ",
        "        sample_report = QualityReport("
      ],
      "complexity": "Low",
      "priority": 5
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/interactive_control_system.py",
      "line": 555,
      "type": "Simulation",
      "description": "# Simulate project execution (would integrate with real ProjectOrchestrator)",
      "context": [
        "        )",
        "        ",
        "        # Simulate project execution (would integrate with real ProjectOrchestrator)",
        "        class MockOrchestrator:",
        "            async def execute_project(self, requirements, project_name):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/interactive_control_system.py",
      "line": 556,
      "type": "Mock Class",
      "description": "class MockOrchestrator:",
      "context": [
        "        ",
        "        # Simulate project execution (would integrate with real ProjectOrchestrator)",
        "        class MockOrchestrator:",
        "            async def execute_project(self, requirements, project_name):",
        "                return {\"status\": \"completed\", \"artifacts\": [\"main.py\", \"models.py\", \"api.py\"]}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/interactive_control_system.py",
      "line": 560,
      "type": "Mock Implementation",
      "description": "mock_orchestrator = MockOrchestrator()",
      "context": [
        "                return {\"status\": \"completed\", \"artifacts\": [\"main.py\", \"models.py\", \"api.py\"]}",
        "                ",
        "        mock_orchestrator = MockOrchestrator()",
        "        ",
        "        # Execute with full interactive control"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/interactive_control_system.py",
      "line": 565,
      "type": "Mock Implementation",
      "description": "project_orchestrator=mock_orchestrator,",
      "context": [
        "        result = await control_system.execute_project_with_control(",
        "            session=session,",
        "            project_orchestrator=mock_orchestrator,",
        "            requirements=\"Build a FastAPI REST API for user management with authentication\"",
        "        )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/websocket_monitor_fixed.py",
      "line": 513,
      "type": "Simulation",
      "description": "# Simulate agent status updates",
      "context": [
        "    while True:",
        "        try:",
        "            # Simulate agent status updates",
        "            for i, agent in enumerate(agents):",
        "                is_active = (counter + i) % 3 != 0  # Simulate some agents being inactive"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/monitoring/websocket_monitor_fixed.py",
      "line": 515,
      "type": "Simulation",
      "description": "is_active = (counter + i) % 3 != 0  # Simulate some agents being inactive",
      "context": [
        "            # Simulate agent status updates",
        "            for i, agent in enumerate(agents):",
        "                is_active = (counter + i) % 3 != 0  # Simulate some agents being inactive",
        "                status_messages = [",
        "                    \"Idle - waiting for tasks\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/orchestration/task_decomposer_fixed.py",
      "line": 223,
      "type": "Mock Implementation",
      "description": "# Return mock response for testing",
      "context": [
        "        \"\"\"",
        "        if not self.llm_client:",
        "            # Return mock response for testing",
        "            return self._generate_mock_llm_response(task_description)",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/orchestration/task_decomposer_fixed.py",
      "line": 224,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        if not self.llm_client:",
        "            # Return mock response for testing",
        "            return self._generate_mock_llm_response(task_description)",
        "        ",
        "        # Enhanced prompt for better JSON output"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/orchestration/task_decomposer_fixed.py",
      "line": 224,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        if not self.llm_client:",
        "            # Return mock response for testing",
        "            return self._generate_mock_llm_response(task_description)",
        "        ",
        "        # Enhanced prompt for better JSON output"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/orchestration/task_decomposer_fixed.py",
      "line": 259,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        except Exception as e:",
        "            logger.error(f\"LLM call failed: {e}\")",
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/orchestration/task_decomposer_fixed.py",
      "line": 259,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        except Exception as e:",
        "            logger.error(f\"LLM call failed: {e}\")",
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/orchestration/task_decomposer_fixed.py",
      "line": 261,
      "type": "Mock Method",
      "description": "def _generate_mock_llm_response(self, task_description: str) -> str:",
      "context": [
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:",
        "        \"\"\"Generate mock response for testing purposes\"\"\"",
        "        return f\"\"\"{{"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/orchestration/task_decomposer_fixed.py",
      "line": 261,
      "type": "Mock Method",
      "description": "def _generate_mock_llm_response(self, task_description: str) -> str:",
      "context": [
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:",
        "        \"\"\"Generate mock response for testing purposes\"\"\"",
        "        return f\"\"\"{{"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/performance/optimizer.py",
      "line": 820,
      "type": "Simulation",
      "description": "# Simulate agent performance data analysis",
      "context": [
        "        suggestions = []",
        "        ",
        "        # Simulate agent performance data analysis",
        "        # In real implementation, this would analyze actual agent metrics",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/performance/optimizer.py",
      "line": 902,
      "type": "Mock Implementation",
      "description": "# Implement optimization (placeholder - actual implementation would vary)",
      "context": [
        "                suggestion.optimization_id not in self.implemented_optimizations):",
        "                ",
        "                # Implement optimization (placeholder - actual implementation would vary)",
        "                await self._implement_optimization(suggestion)",
        "                self.implemented_optimizations.add(suggestion.optimization_id)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/performance/optimizer.py",
      "line": 911,
      "type": "Mock Implementation",
      "description": "# Placeholder implementation - real implementation would depend on optimization type",
      "context": [
        "        print(f\"[AUTO-OPTIMIZATION] Implementing: {suggestion.title}\")",
        "        ",
        "        # Placeholder implementation - real implementation would depend on optimization type",
        "        if suggestion.type == OptimizationType.CACHING:",
        "            print(\"  - Enabling result caching\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "agent-zero-v1.backup/shared/performance/optimizer.py",
      "line": 1031,
      "type": "Simulation",
      "description": "# Simulate some LLM executions",
      "context": [
        "        resource_task, optimization_task = await optimizer.start_optimization_monitoring()",
        "        ",
        "        # Simulate some LLM executions",
        "        sample_executions = [",
        "            LLMPerformanceData("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/typing_extensions.py",
      "line": 4097,
      "type": "Simulation",
      "description": "# between the locals and the globals. We simulate this by adding",
      "context": [
        "",
        "        # Type parameters exist in their own scope, which is logically",
        "        # between the locals and the globals. We simulate this by adding",
        "        # them to the globals.",
        "        if type_params is not None:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 52,
      "type": "Mock Implementation",
      "description": "_mock_val_ser,",
      "context": [
        "    _decorators,",
        "    _internal_dataclass,",
        "    _mock_val_ser,",
        "    _schema_generation_shared,",
        ")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 2406,
      "type": "Mock Implementation",
      "description": "if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
      "context": [
        "    schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)",
        "",
        "    if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
        "        cls.__pydantic_core_schema__.rebuild()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 2412,
      "type": "Mock Implementation",
      "description": "assert not isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
      "context": [
        "        raise AttributeError('model_json_schema() must be called on a subclass of BaseModel, not BaseModel itself.')",
        "",
        "    assert not isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
        "    return schema_generator_instance.generate(cls.__pydantic_core_schema__, mode=mode)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 2444,
      "type": "Mock Implementation",
      "description": "if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
      "context": [
        "    \"\"\"",
        "    for cls, _ in models:",
        "        if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
        "            cls.__pydantic_core_schema__.rebuild()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 42,
      "type": "Mock Implementation",
      "description": "_mock_val_ser,",
      "context": [
        "    _forward_ref,",
        "    _generics,",
        "    _mock_val_ser,",
        "    _model_construction,",
        "    _namespace_utils,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 106,
      "type": "Mock Method",
      "description": "# is initialized, by wrapping the user-defined `model_post_init()`), e.g. if they mock",
      "context": [
        "        # While the attribute should be present at this point, this may not be the case if",
        "        # users do unusual stuff with `model_post_init()` (which is where the  `__pydantic_private__`",
        "        # is initialized, by wrapping the user-defined `model_post_init()`), e.g. if they mock",
        "        # the `model_post_init()` call. Ideally we should find a better way to init private attrs.",
        "        object.__setattr__(model, '__pydantic_private__', {})"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 226,
      "type": "Mock Implementation",
      "description": "__pydantic_core_schema__ = _mock_val_ser.MockCoreSchema(",
      "context": [
        "        # Prevent `BaseModel` from being instantiated directly",
        "        # (defined in an `if not TYPE_CHECKING` block for clarity and to avoid type checking errors):",
        "        __pydantic_core_schema__ = _mock_val_ser.MockCoreSchema(",
        "            'Pydantic models should inherit from BaseModel, BaseModel cannot be instantiated directly',",
        "            code='base-model-instantiated',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 230,
      "type": "Mock Implementation",
      "description": "__pydantic_validator__ = _mock_val_ser.MockValSer(",
      "context": [
        "            code='base-model-instantiated',",
        "        )",
        "        __pydantic_validator__ = _mock_val_ser.MockValSer(",
        "            'Pydantic models should inherit from BaseModel, BaseModel cannot be instantiated directly',",
        "            val_or_ser='validator',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 235,
      "type": "Mock Implementation",
      "description": "__pydantic_serializer__ = _mock_val_ser.MockValSer(",
      "context": [
        "            code='base-model-instantiated',",
        "        )",
        "        __pydantic_serializer__ = _mock_val_ser.MockValSer(",
        "            'Pydantic models should inherit from BaseModel, BaseModel cannot be instantiated directly',",
        "            val_or_ser='serializer',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 620,
      "type": "Mock Implementation",
      "description": "if attr in cls.__dict__ and not isinstance(getattr(cls, attr), _mock_val_ser.MockValSer):",
      "context": [
        "",
        "        for attr in ('__pydantic_core_schema__', '__pydantic_validator__', '__pydantic_serializer__'):",
        "            if attr in cls.__dict__ and not isinstance(getattr(cls, attr), _mock_val_ser.MockValSer):",
        "                # Deleting the validator/serializer is necessary as otherwise they can get reused in",
        "                # pydantic-core. We do so only if they aren't mock instances, otherwise \u2014 as `model_rebuild()`"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 652,
      "type": "Mock Implementation",
      "description": "_mock_val_ser.set_model_mocks(cls, f'`{exc.name}`')",
      "context": [
        "            except NameError as e:",
        "                exc = PydanticUndefinedAnnotation.from_name_error(e)",
        "                _mock_val_ser.set_model_mocks(cls, f'`{exc.name}`')",
        "                if raise_errors:",
        "                    raise exc from e"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 800,
      "type": "Mock Implementation",
      "description": "if schema is not None and not isinstance(schema, _mock_val_ser.MockCoreSchema):",
      "context": [
        "        # Logic copied over from `GenerateSchema._model_schema`:",
        "        schema = cls.__dict__.get('__pydantic_core_schema__')",
        "        if schema is not None and not isinstance(schema, _mock_val_ser.MockCoreSchema):",
        "            return cls.__pydantic_core_schema__",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 25,
      "type": "Mock Implementation",
      "description": "from ._internal import _config, _generate_schema, _mock_val_ser, _namespace_utils, _repr, _typing_extra, _utils",
      "context": [
        "from pydantic.main import BaseModel, IncEx",
        "",
        "from ._internal import _config, _generate_schema, _mock_val_ser, _namespace_utils, _repr, _typing_extra, _utils",
        "from .config import ConfigDict",
        "from .errors import PydanticUndefinedAnnotation"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 254,
      "type": "Mock Method",
      "description": "If `force` is set to `False` and `_defer_build` is `True`, the core schema, validator, and serializer will be set to mocks.",
      "context": [
        "            ns_resolver: The namespace resolver to use when building the core schema for the adapted type.",
        "            force: Whether to force the construction of the core schema, validator, and serializer.",
        "                If `force` is set to `False` and `_defer_build` is `True`, the core schema, validator, and serializer will be set to mocks.",
        "            raise_errors: Whether to raise errors if initializing any of the core attrs fails.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 265,
      "type": "Mock Implementation",
      "description": "_mock_val_ser.set_type_adapter_mocks(self)",
      "context": [
        "        \"\"\"",
        "        if not force and self._defer_build:",
        "            _mock_val_ser.set_type_adapter_mocks(self)",
        "            self.pydantic_complete = False",
        "            return False"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 278,
      "type": "Mock Implementation",
      "description": "isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
      "context": [
        "            # so we simply skip to the block below that does the actual schema generation",
        "            if (",
        "                isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
        "                or isinstance(self.validator, _mock_val_ser.MockValSer)",
        "                or isinstance(self.serializer, _mock_val_ser.MockValSer)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 279,
      "type": "Mock Implementation",
      "description": "or isinstance(self.validator, _mock_val_ser.MockValSer)",
      "context": [
        "            if (",
        "                isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
        "                or isinstance(self.validator, _mock_val_ser.MockValSer)",
        "                or isinstance(self.serializer, _mock_val_ser.MockValSer)",
        "            ):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 280,
      "type": "Mock Implementation",
      "description": "or isinstance(self.serializer, _mock_val_ser.MockValSer)",
      "context": [
        "                isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
        "                or isinstance(self.validator, _mock_val_ser.MockValSer)",
        "                or isinstance(self.serializer, _mock_val_ser.MockValSer)",
        "            ):",
        "                raise AttributeError()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 293,
      "type": "Mock Implementation",
      "description": "_mock_val_ser.set_type_adapter_mocks(self)",
      "context": [
        "                if raise_errors:",
        "                    raise",
        "                _mock_val_ser.set_type_adapter_mocks(self)",
        "                return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 299,
      "type": "Mock Implementation",
      "description": "_mock_val_ser.set_type_adapter_mocks(self)",
      "context": [
        "                self.core_schema = schema_generator.clean_schema(core_schema)",
        "            except _generate_schema.InvalidSchemaError:",
        "                _mock_val_ser.set_type_adapter_mocks(self)",
        "                return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 667,
      "type": "Mock Implementation",
      "description": "if isinstance(self.core_schema, _mock_val_ser.MockCoreSchema):",
      "context": [
        "        \"\"\"",
        "        schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)",
        "        if isinstance(self.core_schema, _mock_val_ser.MockCoreSchema):",
        "            self.core_schema.rebuild()",
        "            assert not isinstance(self.core_schema, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 669,
      "type": "Mock Implementation",
      "description": "assert not isinstance(self.core_schema, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
      "context": [
        "        if isinstance(self.core_schema, _mock_val_ser.MockCoreSchema):",
        "            self.core_schema.rebuild()",
        "            assert not isinstance(self.core_schema, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
        "        return schema_generator_instance.generate(self.core_schema, mode=mode)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 710,
      "type": "Mock Implementation",
      "description": "if isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema):",
      "context": [
        "        for key, mode, adapter in inputs:",
        "            # This is the same pattern we follow for model json schemas - we attempt a core schema rebuild if we detect a mock",
        "            if isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema):",
        "                adapter.core_schema.rebuild()",
        "                assert not isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema), ("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 712,
      "type": "Mock Implementation",
      "description": "assert not isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema), (",
      "context": [
        "            if isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema):",
        "                adapter.core_schema.rebuild()",
        "                assert not isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema), (",
        "                    'this is a bug! please report it'",
        "                )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/uvloop/_testbase.py",
      "line": 24,
      "type": "Mock Class",
      "description": "class MockPattern(str):",
      "context": [
        "",
        "",
        "class MockPattern(str):",
        "    def __eq__(self, other):",
        "        return bool(re.search(str(self), other, re.S))"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/uvloop/_testbase.py",
      "line": 70,
      "type": "Mock Method",
      "description": "def mock_pattern(self, str):",
      "context": [
        "        raise NotImplementedError",
        "",
        "    def mock_pattern(self, str):",
        "        return MockPattern(str)",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/uvloop/_testbase.py",
      "line": 70,
      "type": "Mock Method",
      "description": "def mock_pattern(self, str):",
      "context": [
        "        raise NotImplementedError",
        "",
        "    def mock_pattern(self, str):",
        "        return MockPattern(str)",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/uvloop/_testbase.py",
      "line": 71,
      "type": "Mock Implementation",
      "description": "return MockPattern(str)",
      "context": [
        "",
        "    def mock_pattern(self, str):",
        "        return MockPattern(str)",
        "",
        "    async def wait_closed(self, obj):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/click/utils.py",
      "line": 585,
      "type": "Simulation",
      "description": "\"\"\"Simulate Unix shell expansion with Python functions.",
      "context": [
        "    glob_recursive: bool = True,",
        ") -> list[str]:",
        "    \"\"\"Simulate Unix shell expansion with Python functions.",
        "",
        "    See :func:`glob.glob`, :func:`os.path.expanduser`, and"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/tenacity/nap.py",
      "line": 29,
      "type": "Mock Method",
      "description": "This is the default strategy, and may be mocked out for unit testing.",
      "context": [
        "    Sleep strategy that delays execution for a given number of seconds.",
        "",
        "    This is the default strategy, and may be mocked out for unit testing.",
        "    \"\"\"",
        "    time.sleep(seconds)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/mako/codegen.py",
      "line": 904,
      "type": "Simulation",
      "description": "# to simulate \"enclosing scope\"",
      "context": [
        "                # declared/modified variables into the \"__M_locals\" dictionary,",
        "                # which is used for def calls within the same template,",
        "                # to simulate \"enclosing scope\"",
        "                self.printer.writeline(",
        "                    \"__M_locals_builtin_stored = __M_locals_builtin()\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/__init__.py",
      "line": 20,
      "type": "Mock Implementation",
      "description": "from .engine import create_mock_engine as create_mock_engine",
      "context": [
        "from .engine import Connection as Connection",
        "from .engine import create_engine as create_engine",
        "from .engine import create_mock_engine as create_mock_engine",
        "from .engine import create_pool_from_url as create_pool_from_url",
        "from .engine import CreateEnginePlugin as CreateEnginePlugin"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/mypy/checker.py",
      "line": 2754,
      "type": "Mock Class",
      "description": "Base.__init_subclass__(thing=5) is called at line 4. This is what we simulate here.",
      "context": [
        "            7   Child()",
        "",
        "        Base.__init_subclass__(thing=5) is called at line 4. This is what we simulate here.",
        "        Child.__init_subclass__ is never called.",
        "        \"\"\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/mypy/meet.py",
      "line": 415,
      "type": "Simulation",
      "description": "# Handling the TypeVarLikes now lets us simulate having them bind to the corresponding",
      "context": [
        "    # the same logic if either type happens to be a TypeVar/ParamSpec/TypeVarTuple.",
        "    #",
        "    # Handling the TypeVarLikes now lets us simulate having them bind to the corresponding",
        "    # type -- if we deferred these checks, the \"return-early\" logic of the other",
        "    # checks will prevent us from detecting certain overlaps."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/mypy/metastore.py",
      "line": 6,
      "type": "Simulation",
      "description": "* A hokey sqlite backed implementation, which basically simulates",
      "context": [
        " * The \"classic\" file system implementation, which uses a directory",
        "   structure of files.",
        " * A hokey sqlite backed implementation, which basically simulates",
        "   the file system in an effort to work around poor file system performance",
        "   on OS X."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pyparsing/helpers.py",
      "line": 606,
      "type": "Simulation",
      "description": "# for these internally-created context expressions, simulate whitespace-skipping",
      "context": [
        "            )",
        "",
        "        # for these internally-created context expressions, simulate whitespace-skipping",
        "        if ParserElement.DEFAULT_WHITE_CHARS:",
        "            content.set_parse_action("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/googleapiclient/http.py",
      "line": 1609,
      "type": "Mock Class",
      "description": "class HttpRequestMock(object):",
      "context": [
        "",
        "",
        "class HttpRequestMock(object):",
        "    \"\"\"Mock of HttpRequest.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/googleapiclient/http.py",
      "line": 1641,
      "type": "Mock Class",
      "description": "class RequestMockBuilder(object):",
      "context": [
        "",
        "",
        "class RequestMockBuilder(object):",
        "    \"\"\"A simple mock of HttpRequest",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/googleapiclient/http.py",
      "line": 1715,
      "type": "Mock Implementation",
      "description": "return HttpRequestMock(resp, content, postproc)",
      "context": [
        "                if body != expected_body:",
        "                    raise UnexpectedBodyError(expected_body, body)",
        "            return HttpRequestMock(resp, content, postproc)",
        "        elif self.check_unexpected:",
        "            raise UnexpectedMethodError(methodId=methodId)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/googleapiclient/http.py",
      "line": 1720,
      "type": "Mock Implementation",
      "description": "return HttpRequestMock(None, \"{}\", model.response)",
      "context": [
        "        else:",
        "            model = JsonModel(False)",
        "            return HttpRequestMock(None, \"{}\", model.response)",
        "",
        ""
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/googleapiclient/http.py",
      "line": 1723,
      "type": "Mock Class",
      "description": "class HttpMock(object):",
      "context": [
        "",
        "",
        "class HttpMock(object):",
        "    \"\"\"Mock of httplib2.Http\"\"\"",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/googleapiclient/http.py",
      "line": 1765,
      "type": "Mock Class",
      "description": "class HttpMockSequence(object):",
      "context": [
        "",
        "",
        "class HttpMockSequence(object):",
        "    \"\"\"Mock of httplib2.Http",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/aiofiles/base.py",
      "line": 25,
      "type": "Simulation",
      "description": "\"\"\"Simulate normal file iteration.\"\"\"",
      "context": [
        "",
        "    async def __anext__(self):",
        "        \"\"\"Simulate normal file iteration.\"\"\"",
        "        line = await self.readline()",
        "        if line:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/msvc.py",
      "line": 30,
      "type": "Mock Implementation",
      "description": "# Mock winreg and environ so the module can be imported on this platform.",
      "context": [
        "    from os import environ",
        "else:",
        "    # Mock winreg and environ so the module can be imported on this platform.",
        "",
        "    class winreg:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 542,
      "type": "Mock Method",
      "description": "def _create_app_mock() -> mock.MagicMock:",
      "context": [
        "",
        "",
        "def _create_app_mock() -> mock.MagicMock:",
        "    def get_dict(app: Any, key: str) -> Any:",
        "        return app.__app_dict[key]"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 560,
      "type": "Mock Method",
      "description": "def _create_transport(sslcontext: Optional[SSLContext] = None) -> mock.Mock:",
      "context": [
        "",
        "",
        "def _create_transport(sslcontext: Optional[SSLContext] = None) -> mock.Mock:",
        "    transport = mock.Mock()",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 573,
      "type": "Mock Method",
      "description": "def make_mocked_request(",
      "context": [
        "",
        "",
        "def make_mocked_request(",
        "    method: str,",
        "    path: str,"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 663,
      "type": "Mock Method",
      "description": "def make_mocked_coro(",
      "context": [
        "",
        "",
        "def make_mocked_coro(",
        "    return_value: Any = sentinel, raise_exception: Any = sentinel",
        ") -> Any:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 668,
      "type": "Mock Method",
      "description": "async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
      "context": [
        "    \"\"\"Creates a coroutine mock.\"\"\"",
        "",
        "    async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
        "        if raise_exception is not sentinel:",
        "            raise raise_exception"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 668,
      "type": "Mock Method",
      "description": "async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
      "context": [
        "    \"\"\"Creates a coroutine mock.\"\"\"",
        "",
        "    async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
        "        if raise_exception is not sentinel:",
        "            raise raise_exception"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 675,
      "type": "Mock Implementation",
      "description": "return mock.Mock(wraps=mock_coro)",
      "context": [
        "        await return_value",
        "",
        "    return mock.Mock(wraps=mock_coro)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 675,
      "type": "Mock Implementation",
      "description": "return mock.Mock(wraps=mock_coro)",
      "context": [
        "        await return_value",
        "",
        "    return mock.Mock(wraps=mock_coro)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/requests/cookies.py",
      "line": 23,
      "type": "Mock Class",
      "description": "class MockRequest:",
      "context": [
        "",
        "",
        "class MockRequest:",
        "    \"\"\"Wraps a `requests.Request` to mimic a `urllib2.Request`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/requests/cookies.py",
      "line": 103,
      "type": "Mock Class",
      "description": "class MockResponse:",
      "context": [
        "",
        "",
        "class MockResponse:",
        "    \"\"\"Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/requests/models.py",
      "line": 841,
      "type": "Simulation",
      "description": "# simulate reading small chunks of the content",
      "context": [
        "                f\"chunk_size must be an int, it is instead a {type(chunk_size)}.\"",
        "            )",
        "        # simulate reading small chunks of the content",
        "        reused_chunks = iter_slices(self._content, chunk_size)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 110,
      "type": "Mock Method",
      "description": "def num_mock_patch_args(function) -> int:",
      "context": [
        "",
        "",
        "def num_mock_patch_args(function) -> int:",
        "    \"\"\"Return number of arguments used up by mock arguments (if any).\"\"\"",
        "    patchings = getattr(function, \"patchings\", None)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 110,
      "type": "Mock Method",
      "description": "def num_mock_patch_args(function) -> int:",
      "context": [
        "",
        "",
        "def num_mock_patch_args(function) -> int:",
        "    \"\"\"Return number of arguments used up by mock arguments (if any).\"\"\"",
        "    patchings = getattr(function, \"patchings\", None)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 111,
      "type": "Mock Implementation",
      "description": "\"\"\"Return number of arguments used up by mock arguments (if any).\"\"\"",
      "context": [
        "",
        "def num_mock_patch_args(function) -> int:",
        "    \"\"\"Return number of arguments used up by mock arguments (if any).\"\"\"",
        "    patchings = getattr(function, \"patchings\", None)",
        "    if not patchings:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 116,
      "type": "Mock Method",
      "description": "mock_sentinel = getattr(sys.modules.get(\"mock\"), \"DEFAULT\", object())",
      "context": [
        "        return 0",
        "",
        "    mock_sentinel = getattr(sys.modules.get(\"mock\"), \"DEFAULT\", object())",
        "    ut_mock_sentinel = getattr(sys.modules.get(\"unittest.mock\"), \"DEFAULT\", object())",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 117,
      "type": "Mock Method",
      "description": "ut_mock_sentinel = getattr(sys.modules.get(\"unittest.mock\"), \"DEFAULT\", object())",
      "context": [
        "",
        "    mock_sentinel = getattr(sys.modules.get(\"mock\"), \"DEFAULT\", object())",
        "    ut_mock_sentinel = getattr(sys.modules.get(\"unittest.mock\"), \"DEFAULT\", object())",
        "",
        "    return len("
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 124,
      "type": "Mock Implementation",
      "description": "and (p.new is mock_sentinel or p.new is ut_mock_sentinel)",
      "context": [
        "            for p in patchings",
        "            if not p.attribute_name",
        "            and (p.new is mock_sentinel or p.new is ut_mock_sentinel)",
        "        ]",
        "    )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 195,
      "type": "Mock Implementation",
      "description": "arg_names = arg_names[num_mock_patch_args(function) :]",
      "context": [
        "    # Remove any names that will be replaced with mocks.",
        "    if hasattr(function, \"__wrapped__\"):",
        "        arg_names = arg_names[num_mock_patch_args(function) :]",
        "    return arg_names",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 459,
      "type": "Mock Method",
      "description": "def _is_mocked(obj: object) -> bool:",
      "context": [
        "",
        "",
        "def _is_mocked(obj: object) -> bool:",
        "    \"\"\"Return if an object is possibly a mock object by checking the",
        "    existence of a highly improbable attribute.\"\"\""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 460,
      "type": "Mock Implementation",
      "description": "\"\"\"Return if an object is possibly a mock object by checking the",
      "context": [
        "",
        "def _is_mocked(obj: object) -> bool:",
        "    \"\"\"Return if an object is possibly a mock object by checking the",
        "    existence of a highly improbable attribute.\"\"\"",
        "    return ("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 463,
      "type": "Mock Implementation",
      "description": "safe_getattr(obj, \"pytest_mock_example_attribute_that_shouldnt_exist\", None)",
      "context": [
        "    existence of a highly improbable attribute.\"\"\"",
        "    return (",
        "        safe_getattr(obj, \"pytest_mock_example_attribute_that_shouldnt_exist\", None)",
        "        is not None",
        "    )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 469,
      "type": "Mock Method",
      "description": "def _patch_unwrap_mock_aware() -> Generator[None, None, None]:",
      "context": [
        "",
        "@contextmanager",
        "def _patch_unwrap_mock_aware() -> Generator[None, None, None]:",
        "    \"\"\"Context manager which replaces ``inspect.unwrap`` with a version",
        "    that's aware of mock objects and doesn't recurse into them.\"\"\""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 469,
      "type": "Mock Method",
      "description": "def _patch_unwrap_mock_aware() -> Generator[None, None, None]:",
      "context": [
        "",
        "@contextmanager",
        "def _patch_unwrap_mock_aware() -> Generator[None, None, None]:",
        "    \"\"\"Context manager which replaces ``inspect.unwrap`` with a version",
        "    that's aware of mock objects and doesn't recurse into them.\"\"\""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 474,
      "type": "Mock Method",
      "description": "def _mock_aware_unwrap(",
      "context": [
        "    real_unwrap = inspect.unwrap",
        "",
        "    def _mock_aware_unwrap(",
        "        func: Callable[..., Any], *, stop: Optional[Callable[[Any], Any]] = None",
        "    ) -> Any:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 474,
      "type": "Mock Method",
      "description": "def _mock_aware_unwrap(",
      "context": [
        "    real_unwrap = inspect.unwrap",
        "",
        "    def _mock_aware_unwrap(",
        "        func: Callable[..., Any], *, stop: Optional[Callable[[Any], Any]] = None",
        "    ) -> Any:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 479,
      "type": "Mock Implementation",
      "description": "return real_unwrap(func, stop=_is_mocked)",
      "context": [
        "        try:",
        "            if stop is None or stop is _is_mocked:",
        "                return real_unwrap(func, stop=_is_mocked)",
        "            _stop = stop",
        "            return real_unwrap(func, stop=lambda obj: _is_mocked(obj) or _stop(func))"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 481,
      "type": "Mock Implementation",
      "description": "return real_unwrap(func, stop=lambda obj: _is_mocked(obj) or _stop(func))",
      "context": [
        "                return real_unwrap(func, stop=_is_mocked)",
        "            _stop = stop",
        "            return real_unwrap(func, stop=lambda obj: _is_mocked(obj) or _stop(func))",
        "        except Exception as e:",
        "            warnings.warn("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 491,
      "type": "Mock Implementation",
      "description": "inspect.unwrap = _mock_aware_unwrap",
      "context": [
        "            raise",
        "",
        "    inspect.unwrap = _mock_aware_unwrap",
        "    try:",
        "        yield"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 502,
      "type": "Mock Class",
      "description": "class MockAwareDocTestFinder(doctest.DocTestFinder):",
      "context": [
        "        import doctest",
        "",
        "        class MockAwareDocTestFinder(doctest.DocTestFinder):",
        "            \"\"\"A hackish doctest finder that overrides stdlib internals to fix a stdlib bug.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 534,
      "type": "Mock Implementation",
      "description": "with _patch_unwrap_mock_aware():",
      "context": [
        "                if _is_mocked(obj):",
        "                    return",
        "                with _patch_unwrap_mock_aware():",
        "                    # Type ignored because this is a private function.",
        "                    super()._find(  # type:ignore[misc]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/python.py",
      "line": 246,
      "type": "Mock Implementation",
      "description": "# mock seems to store unbound methods (issue473), normalize it.",
      "context": [
        "            return klass",
        "    elif collector.istestfunction(obj, name):",
        "        # mock seems to store unbound methods (issue473), normalize it.",
        "        obj = getattr(obj, \"__func__\", obj)",
        "        # We need to try and unwrap the function if it's a functools.partial"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/_pytest/timing.py",
      "line": 6,
      "type": "Mock Implementation",
      "description": "Fixture \"mock_timing\" also interacts with this module for pytest's own tests.",
      "context": [
        "pytest runtime information (issue #185).",
        "",
        "Fixture \"mock_timing\" also interacts with this module for pytest's own tests.",
        "\"\"\"",
        "from time import perf_counter"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 208,
      "type": "Mock Method",
      "description": "def mock_open_content(for_path, content):",
      "context": [
        "",
        "@contextlib.contextmanager",
        "def mock_open_content(for_path, content):",
        "    \"\"\"Mock open() builtin and forces it to return a certain `content`",
        "    on read() if the path being opened matches `for_path`."
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 208,
      "type": "Mock Method",
      "description": "def mock_open_content(for_path, content):",
      "context": [
        "",
        "@contextlib.contextmanager",
        "def mock_open_content(for_path, content):",
        "    \"\"\"Mock open() builtin and forces it to return a certain `content`",
        "    on read() if the path being opened matches `for_path`."
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 212,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "    on read() if the path being opened matches `for_path`.",
        "    \"\"\"",
        "    def open_mock(name, *args, **kwargs):",
        "        if name == for_path:",
        "            if PY3:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 231,
      "type": "Mock Method",
      "description": "def mock_open_exception(for_path, exc):",
      "context": [
        "",
        "@contextlib.contextmanager",
        "def mock_open_exception(for_path, exc):",
        "    \"\"\"Mock open() builtin and raises `exc` if the path being opened",
        "    matches `for_path`."
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 231,
      "type": "Mock Method",
      "description": "def mock_open_exception(for_path, exc):",
      "context": [
        "",
        "@contextlib.contextmanager",
        "def mock_open_exception(for_path, exc):",
        "    \"\"\"Mock open() builtin and raises `exc` if the path being opened",
        "    matches `for_path`."
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 235,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "    matches `for_path`.",
        "    \"\"\"",
        "    def open_mock(name, *args, **kwargs):",
        "        if name == for_path:",
        "            raise exc"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 359,
      "type": "Mock Class",
      "description": "class TestSystemVirtualMemoryMocks(PsutilTestCase):",
      "context": [
        "",
        "@unittest.skipIf(not LINUX, \"LINUX only\")",
        "class TestSystemVirtualMemoryMocks(PsutilTestCase):",
        "",
        "    def test_warnings_on_misses(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 365,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "        # psutil is supposed to set the missing fields to 0 and",
        "        # raise a warning.",
        "        with mock_open_content(",
        "            '/proc/meminfo',",
        "            textwrap.dedent(\"\"\"\\"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 418,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "        # Make sure \"MemAvailable:\" coluimn is used instead of relying",
        "        # on our internal algorithm to calculate avail mem.",
        "        with mock_open_content(",
        "            '/proc/meminfo',",
        "            textwrap.dedent(\"\"\"\\"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 447,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "        # from /proc/meminfo and make sure the fallback is used",
        "        # (free + cached),",
        "        with mock_open_content(",
        "            \"/proc/meminfo\",",
        "            textwrap.dedent(\"\"\"\\"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 471,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "        # Remove /proc/zoneinfo file. Make sure fallback is used",
        "        # (free + cached).",
        "        with mock_open_content(",
        "                \"/proc/meminfo\",",
        "                textwrap.dedent(\"\"\"\\"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 487,
      "type": "Mock Implementation",
      "description": "with mock_open_exception(",
      "context": [
        "                    SReclaimable:     346648 kB",
        "                    \"\"\").encode()):",
        "            with mock_open_exception(",
        "                    \"/proc/zoneinfo\",",
        "                    IOError(errno.ENOENT, 'no such file or directory')):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 499,
      "type": "Mock Method",
      "description": "def test_virtual_memory_mocked(self):",
      "context": [
        "                        str(w.message))",
        "",
        "    def test_virtual_memory_mocked(self):",
        "        # Emulate /proc/meminfo because neither vmstat nor free return slab.",
        "        def open_mock(name, *args, **kwargs):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 501,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "    def test_virtual_memory_mocked(self):",
        "        # Emulate /proc/meminfo because neither vmstat nor free return slab.",
        "        def open_mock(name, *args, **kwargs):",
        "            if name == '/proc/meminfo':",
        "                return io.BytesIO(textwrap.dedent(\"\"\"\\"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 622,
      "type": "Mock Method",
      "description": "def test_no_vmstat_mocked(self):",
      "context": [
        "                self.assertEqual(ret.sout, 0)",
        "",
        "    def test_no_vmstat_mocked(self):",
        "        # see https://github.com/giampaolo/psutil/issues/722",
        "        with mock_open_exception("
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 624,
      "type": "Mock Implementation",
      "description": "with mock_open_exception(",
      "context": [
        "    def test_no_vmstat_mocked(self):",
        "        # see https://github.com/giampaolo/psutil/issues/722",
        "        with mock_open_exception(",
        "                \"/proc/vmstat\",",
        "                IOError(errno.ENOENT, 'no such file or directory')) as m:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 660,
      "type": "Mock Implementation",
      "description": "with mock_open_content(\"/proc/meminfo\", b\"\") as m:",
      "context": [
        "        # in which case sysinfo() syscall is supposed to be used",
        "        # as a fallback.",
        "        with mock_open_content(\"/proc/meminfo\", b\"\") as m:",
        "            psutil.swap_memory()",
        "            assert m.called"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 750,
      "type": "Mock Implementation",
      "description": "with mock_open_content('/proc/cpuinfo', b\"\") as m:",
      "context": [
        "            # Finally, let's make /proc/cpuinfo return meaningless data;",
        "            # this way we'll fall back on relying on /proc/stat",
        "            with mock_open_content('/proc/cpuinfo', b\"\") as m:",
        "                self.assertEqual(psutil._pslinux.cpu_count_logical(), original)",
        "                assert m.called"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 790,
      "type": "Mock Method",
      "description": "def path_exists_mock(path):",
      "context": [
        "    def test_emulate_use_second_file(self):",
        "        # https://github.com/giampaolo/psutil/issues/981",
        "        def path_exists_mock(path):",
        "            if path.startswith(\"/sys/devices/system/cpu/cpufreq/policy\"):",
        "                return False"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 805,
      "type": "Mock Method",
      "description": "def path_exists_mock(path):",
      "context": [
        "        # Emulate a case where /sys/devices/system/cpu/cpufreq* does not",
        "        # exist and /proc/cpuinfo is used instead.",
        "        def path_exists_mock(path):",
        "            if path.startswith('/sys/devices/system/cpu/'):",
        "                return False"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 828,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "    @unittest.skipIf(not HAS_CPU_FREQ, \"not supported\")",
        "    def test_emulate_data(self):",
        "        def open_mock(name, *args, **kwargs):",
        "            if (name.endswith('/scaling_cur_freq') and",
        "                    name.startswith(\"/sys/devices/system/cpu/cpufreq/policy\")):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 859,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "    @unittest.skipIf(not HAS_CPU_FREQ, \"not supported\")",
        "    def test_emulate_multi_cpu(self):",
        "        def open_mock(name, *args, **kwargs):",
        "            n = name",
        "            if (n.endswith('/scaling_cur_freq') and"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 906,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "    def test_emulate_no_scaling_cur_freq_file(self):",
        "        # See: https://github.com/giampaolo/psutil/issues/1071",
        "        def open_mock(name, *args, **kwargs):",
        "            if name.endswith('/scaling_cur_freq'):",
        "                raise IOError(errno.ENOENT, \"\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1115,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "",
        "    def test_emulate_unix(self):",
        "        with mock_open_content(",
        "            '/proc/net/unix',",
        "            textwrap.dedent(\"\"\"\\"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1202,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "        # Tests /proc/diskstats parsing format for 2.4 kernels, see:",
        "        # https://github.com/giampaolo/psutil/issues/767",
        "        with mock_open_content(",
        "                '/proc/diskstats',",
        "                \"   3     0   1 hda 2 3 4 5 6 7 8 9 10 11 12\"):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1222,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "        # lines reporting all metrics:",
        "        # https://github.com/giampaolo/psutil/issues/767",
        "        with mock_open_content(",
        "                '/proc/diskstats',",
        "                \"   3    0   hda 1 2 3 4 5 6 7 8 9 10 11\"):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1244,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "        # (instead of a disk). See:",
        "        # https://github.com/giampaolo/psutil/issues/767",
        "        with mock_open_content(",
        "                '/proc/diskstats',",
        "                \"   3    1   hda 1 2 3 4\"):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1265,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "        # see:",
        "        # https://github.com/giampaolo/psutil/pull/1313#issuecomment-408626842",
        "        with mock_open_content(",
        "                '/proc/diskstats',",
        "                textwrap.dedent(\"\"\"\\"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1284,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "        # 'nvme0n1p1') are skipped and not included in the total count.",
        "        # https://github.com/giampaolo/psutil/pull/1313#issuecomment-408626842",
        "        with mock_open_content(",
        "                '/proc/diskstats',",
        "                textwrap.dedent(\"\"\"\\"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1299,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "            return name == 'nvme0n1'",
        "",
        "        with mock_open_content(",
        "                '/proc/diskstats',",
        "                textwrap.dedent(\"\"\"\\"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1381,
      "type": "Mock Method",
      "description": "def test_disk_partitions_mocked(self):",
      "context": [
        "        self.assertEqual(psutil_value, findmnt_value)",
        "",
        "    def test_disk_partitions_mocked(self):",
        "        with mock.patch(",
        "                'psutil._pslinux.cext.disk_partitions',"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1419,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "            orig_open = open",
        "",
        "            def open_mock(name, *args, **kwargs):",
        "                if name.startswith('/proc'):",
        "                    raise IOError(errno.ENOENT, 'rejecting access for test')"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1471,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "        # Test cumulative cpu stats decrease. We should ignore this.",
        "        # See issue #1210.",
        "        with mock_open_content(",
        "            \"/proc/stat\",",
        "            textwrap.dedent(\"\"\"\\"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1487,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "            psutil.cpu_times_percent(percpu=True)",
        "",
        "        with mock_open_content(",
        "            \"/proc/stat\",",
        "            textwrap.dedent(\"\"\"\\"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1509,
      "type": "Mock Method",
      "description": "def test_boot_time_mocked(self):",
      "context": [
        "            self.assertNotEqual(cpu_times_percent.user, 0)",
        "",
        "    def test_boot_time_mocked(self):",
        "        with mock.patch('psutil._common.open', create=True) as m:",
        "            self.assertRaises("
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1516,
      "type": "Mock Method",
      "description": "def test_users_mocked(self):",
      "context": [
        "            assert m.called",
        "",
        "    def test_users_mocked(self):",
        "        # Make sure ':0' and ':0.0' (returned by C ext) are converted",
        "        # to 'localhost'."
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1576,
      "type": "Mock Implementation",
      "description": "with mock_open_content(\"/proc/%s/status\", \"\") as m:",
      "context": [
        "        # Emulate a case where this file is empty in which case",
        "        # psutil is supposed to fall back on using pids().",
        "        with mock_open_content(\"/proc/%s/status\", \"\") as m:",
        "            assert psutil.pid_exists(os.getpid())",
        "            assert m.called"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1599,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "    def test_emulate_power_plugged(self):",
        "        # Pretend the AC power cable is connected.",
        "        def open_mock(name, *args, **kwargs):",
        "            if name.endswith(('AC0/online', 'AC/online')):",
        "                return io.BytesIO(b\"1\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1616,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "        # Same as above but pretend /AC0/online does not exist in which",
        "        # case code relies on /status file.",
        "        def open_mock(name, *args, **kwargs):",
        "            if name.endswith(('AC0/online', 'AC/online')):",
        "                raise IOError(errno.ENOENT, \"\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1632,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "    def test_emulate_power_not_plugged(self):",
        "        # Pretend the AC power cable is not connected.",
        "        def open_mock(name, *args, **kwargs):",
        "            if name.endswith(('AC0/online', 'AC/online')):",
        "                return io.BytesIO(b\"0\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1647,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "        # Same as above but pretend /AC0/online does not exist in which",
        "        # case code relies on /status file.",
        "        def open_mock(name, *args, **kwargs):",
        "            if name.endswith(('AC0/online', 'AC/online')):",
        "                raise IOError(errno.ENOENT, \"\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1664,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "        # Pretend we can't know whether the AC power cable not",
        "        # connected (assert fallback to False).",
        "        def open_mock(name, *args, **kwargs):",
        "            if name.startswith(",
        "                ('/sys/class/power_supply/AC0/online',"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1683,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "    def test_emulate_energy_full_0(self):",
        "        # Emulate a case where energy_full files returns 0.",
        "        with mock_open_content(",
        "                \"/sys/class/power_supply/BAT0/energy_full\", b\"0\") as m:",
        "            self.assertEqual(psutil.sensors_battery().percent, 0)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1691,
      "type": "Mock Implementation",
      "description": "with mock_open_exception(",
      "context": [
        "        # Emulate a case where energy_full file does not exist.",
        "        # Expected fallback on /capacity.",
        "        with mock_open_exception(",
        "                \"/sys/class/power_supply/BAT0/energy_full\",",
        "                IOError(errno.ENOENT, \"\")):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1694,
      "type": "Mock Implementation",
      "description": "with mock_open_exception(",
      "context": [
        "                \"/sys/class/power_supply/BAT0/energy_full\",",
        "                IOError(errno.ENOENT, \"\")):",
        "            with mock_open_exception(",
        "                    \"/sys/class/power_supply/BAT0/charge_full\",",
        "                    IOError(errno.ENOENT, \"\")):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1697,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "                    \"/sys/class/power_supply/BAT0/charge_full\",",
        "                    IOError(errno.ENOENT, \"\")):",
        "                with mock_open_content(",
        "                        \"/sys/class/power_supply/BAT0/capacity\", b\"88\"):",
        "                    self.assertEqual(psutil.sensors_battery().percent, 88)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1703,
      "type": "Mock Implementation",
      "description": "with mock_open_exception(",
      "context": [
        "    def test_emulate_no_power(self):",
        "        # Emulate a case where /AC0/online file nor /BAT0/status exist.",
        "        with mock_open_exception(",
        "                \"/sys/class/power_supply/AC/online\",",
        "                IOError(errno.ENOENT, \"\")):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1706,
      "type": "Mock Implementation",
      "description": "with mock_open_exception(",
      "context": [
        "                \"/sys/class/power_supply/AC/online\",",
        "                IOError(errno.ENOENT, \"\")):",
        "            with mock_open_exception(",
        "                    \"/sys/class/power_supply/AC0/online\",",
        "                    IOError(errno.ENOENT, \"\")):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1709,
      "type": "Mock Implementation",
      "description": "with mock_open_exception(",
      "context": [
        "                    \"/sys/class/power_supply/AC0/online\",",
        "                    IOError(errno.ENOENT, \"\")):",
        "                with mock_open_exception(",
        "                        \"/sys/class/power_supply/BAT0/status\",",
        "                        IOError(errno.ENOENT, \"\")):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1719,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "",
        "    def test_it(self):",
        "        def open_mock(name, *args, **kwargs):",
        "            if name.endswith(\"/energy_now\"):",
        "                return io.StringIO(u(\"60000000\"))"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1742,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "",
        "    def test_emulate_class_hwmon(self):",
        "        def open_mock(name, *args, **kwargs):",
        "            if name.endswith('/name'):",
        "                return io.StringIO(u(\"name\"))"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1769,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "",
        "    def test_emulate_class_thermal(self):",
        "        def open_mock(name, *args, **kwargs):",
        "            if name.endswith('0_temp'):",
        "                return io.BytesIO(b\"50000\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1781,
      "type": "Mock Method",
      "description": "def glob_mock(path):",
      "context": [
        "                return orig_open(name, *args, **kwargs)",
        "",
        "        def glob_mock(path):",
        "            if path == '/sys/class/hwmon/hwmon*/temp*_*':  # noqa",
        "                return []"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1808,
      "type": "Mock Method",
      "description": "def open_mock(name, *args, **kwargs):",
      "context": [
        "",
        "    def test_emulate_data(self):",
        "        def open_mock(name, *args, **kwargs):",
        "            if name.endswith('/name'):",
        "                return io.StringIO(u(\"name\"))"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1849,
      "type": "Mock Method",
      "description": "def test_parse_smaps_mocked(self):",
      "context": [
        "            swap, sum([x.swap for x in maps]), delta=4096)",
        "",
        "    def test_parse_smaps_mocked(self):",
        "        # See: https://github.com/giampaolo/psutil/issues/1222",
        "        with mock_open_content("
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1851,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "    def test_parse_smaps_mocked(self):",
        "        # See: https://github.com/giampaolo/psutil/issues/1222",
        "        with mock_open_content(",
        "            \"/proc/%s/smaps\" % os.getpid(),",
        "            textwrap.dedent(\"\"\"\\"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1922,
      "type": "Simulation",
      "description": "# simulates a file which gets deleted during open_files()",
      "context": [
        "",
        "    def test_open_files_file_gone(self):",
        "        # simulates a file which gets deleted during open_files()",
        "        # execution",
        "        p = psutil.Process()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1934,
      "type": "Simulation",
      "description": "# also simulate the case where os.readlink() returns EINVAL",
      "context": [
        "                assert not files",
        "                assert m.called",
        "            # also simulate the case where os.readlink() returns EINVAL",
        "            # in which case psutil is supposed to 'continue'",
        "            with mock.patch('psutil._pslinux.os.readlink',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1942,
      "type": "Simulation",
      "description": "# Simulate a case where /proc/{pid}/fdinfo/{fd} disappears",
      "context": [
        "",
        "    def test_open_files_fd_gone(self):",
        "        # Simulate a case where /proc/{pid}/fdinfo/{fd} disappears",
        "        # while iterating through fds.",
        "        # https://travis-ci.org/giampaolo/psutil/jobs/225694530"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1958,
      "type": "Simulation",
      "description": "# Simulate a case where /proc/{pid}/fd/{fd} symlink",
      "context": [
        "",
        "    def test_open_files_enametoolong(self):",
        "        # Simulate a case where /proc/{pid}/fd/{fd} symlink",
        "        # points to a file with full path longer than PATH_MAX, see:",
        "        # https://github.com/giampaolo/psutil/issues/1940"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1976,
      "type": "Mock Method",
      "description": "def test_terminal_mocked(self):",
      "context": [
        "    # --- mocked tests",
        "",
        "    def test_terminal_mocked(self):",
        "        with mock.patch('psutil._pslinux._psposix.get_terminal_map',",
        "                        return_value={}) as m:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1983,
      "type": "Mock Method",
      "description": "# def test_num_ctx_switches_mocked(self):",
      "context": [
        "",
        "    # TODO: re-enable this test.",
        "    # def test_num_ctx_switches_mocked(self):",
        "    #     with mock.patch('psutil._common.open', create=True) as m:",
        "    #         self.assertRaises("
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 1990,
      "type": "Mock Method",
      "description": "def test_cmdline_mocked(self):",
      "context": [
        "    #         assert m.called",
        "",
        "    def test_cmdline_mocked(self):",
        "        # see: https://github.com/giampaolo/psutil/issues/639",
        "        p = psutil.Process()"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 2004,
      "type": "Mock Method",
      "description": "def test_cmdline_spaces_mocked(self):",
      "context": [
        "            assert m.called",
        "",
        "    def test_cmdline_spaces_mocked(self):",
        "        # see: https://github.com/giampaolo/psutil/issues/1179",
        "        p = psutil.Process()"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 2028,
      "type": "Mock Method",
      "description": "def test_readlink_path_deleted_mocked(self):",
      "context": [
        "            assert m.called",
        "",
        "    def test_readlink_path_deleted_mocked(self):",
        "        with mock.patch('psutil._pslinux.os.readlink',",
        "                        return_value='/home/foo (deleted)'):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 2034,
      "type": "Mock Method",
      "description": "def test_threads_mocked(self):",
      "context": [
        "            self.assertEqual(psutil.Process().cwd(), \"/home/foo\")",
        "",
        "    def test_threads_mocked(self):",
        "        # Test the case where os.listdir() returns a file (thread)",
        "        # which no longer exists by the time we open() it (race"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 2039,
      "type": "Mock Method",
      "description": "def open_mock_1(name, *args, **kwargs):",
      "context": [
        "        # condition). threads() is supposed to ignore that instead",
        "        # of raising NSP.",
        "        def open_mock_1(name, *args, **kwargs):",
        "            if name.startswith('/proc/%s/task' % os.getpid()):",
        "                raise IOError(errno.ENOENT, \"\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 2039,
      "type": "Mock Method",
      "description": "def open_mock_1(name, *args, **kwargs):",
      "context": [
        "        # condition). threads() is supposed to ignore that instead",
        "        # of raising NSP.",
        "        def open_mock_1(name, *args, **kwargs):",
        "            if name.startswith('/proc/%s/task' % os.getpid()):",
        "                raise IOError(errno.ENOENT, \"\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 2047,
      "type": "Mock Implementation",
      "description": "with mock.patch(patch_point, side_effect=open_mock_1) as m:",
      "context": [
        "        orig_open = open",
        "        patch_point = 'builtins.open' if PY3 else '__builtin__.open'",
        "        with mock.patch(patch_point, side_effect=open_mock_1) as m:",
        "            ret = psutil.Process().threads()",
        "            assert m.called"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 2054,
      "type": "Mock Method",
      "description": "def open_mock_2(name, *args, **kwargs):",
      "context": [
        "        # ...but if it bumps into something != ENOENT we want an",
        "        # exception.",
        "        def open_mock_2(name, *args, **kwargs):",
        "            if name.startswith('/proc/%s/task' % os.getpid()):",
        "                raise IOError(errno.EPERM, \"\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 2054,
      "type": "Mock Method",
      "description": "def open_mock_2(name, *args, **kwargs):",
      "context": [
        "        # ...but if it bumps into something != ENOENT we want an",
        "        # exception.",
        "        def open_mock_2(name, *args, **kwargs):",
        "            if name.startswith('/proc/%s/task' % os.getpid()):",
        "                raise IOError(errno.EPERM, \"\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 2060,
      "type": "Mock Implementation",
      "description": "with mock.patch(patch_point, side_effect=open_mock_2):",
      "context": [
        "                return orig_open(name, *args, **kwargs)",
        "",
        "        with mock.patch(patch_point, side_effect=open_mock_2):",
        "            self.assertRaises(psutil.AccessDenied, psutil.Process().threads)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 2063,
      "type": "Mock Method",
      "description": "def test_exe_mocked(self):",
      "context": [
        "            self.assertRaises(psutil.AccessDenied, psutil.Process().threads)",
        "",
        "    def test_exe_mocked(self):",
        "        with mock.patch('psutil._pslinux.readlink',",
        "                        side_effect=OSError(errno.ENOENT, \"\")) as m:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 2073,
      "type": "Mock Implementation",
      "description": "with mock_open_exception(",
      "context": [
        "        # Emulates a case where smaps file does not exist. In this case",
        "        # wrap_exception decorator should not raise NoSuchProcess.",
        "        with mock_open_exception(",
        "                '/proc/%s/smaps' % os.getpid(),",
        "                IOError(errno.ENOENT, \"\")) as m:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 2145,
      "type": "Mock Implementation",
      "description": "with mock_open_content('/proc/%s/stat' % os.getpid(), content):",
      "context": [
        "        ]",
        "        content = \" \".join(args).encode()",
        "        with mock_open_content('/proc/%s/stat' % os.getpid(), content):",
        "            p = psutil.Process()",
        "            self.assertEqual(p.name(), 'cat')"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 2161,
      "type": "Mock Implementation",
      "description": "with mock_open_content(",
      "context": [
        "",
        "    def test_status_file_parsing(self):",
        "        with mock_open_content(",
        "            '/proc/%s/status' % os.getpid(),",
        "            textwrap.dedent(\"\"\"\\"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
      "line": 2186,
      "type": "Simulation",
      "description": "# Simulate a case where /proc/{pid}/fd/{fd} symlink points to",
      "context": [
        "",
        "    def test_connections_enametoolong(self):",
        "        # Simulate a case where /proc/{pid}/fd/{fd} symlink points to",
        "        # a file with full path longer than PATH_MAX, see:",
        "        # https://github.com/giampaolo/psutil/issues/1940"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_posix.py",
      "line": 413,
      "type": "Simulation",
      "description": "# Simulate os.waitpid() returning a bad status.",
      "context": [
        "",
        "    def test_os_waitpid_bad_ret_status(self):",
        "        # Simulate os.waitpid() returning a bad status.",
        "        with mock.patch(\"psutil._psposix.os.waitpid\",",
        "                        return_value=(1, -1)) as m:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_process.py",
      "line": 123,
      "type": "Mock Method",
      "description": "def test_send_signal_mocked(self):",
      "context": [
        "",
        "    @unittest.skipIf(not POSIX, \"not POSIX\")",
        "    def test_send_signal_mocked(self):",
        "        sig = signal.SIGTERM",
        "        p = self.spawn_psproc()"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_system.py",
      "line": 422,
      "type": "Simulation",
      "description": "# Simulate some work load then make sure time have increased",
      "context": [
        "",
        "    def test_per_cpu_times_2(self):",
        "        # Simulate some work load then make sure time have increased",
        "        # between calls.",
        "        tot1 = psutil.cpu_times(percpu=True)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/psutil/tests/test_system.py",
      "line": 800,
      "type": "Simulation",
      "description": "# Simulate that the underlying C function returns an incomplete",
      "context": [
        "",
        "    def test_net_if_addrs_mac_null_bytes(self):",
        "        # Simulate that the underlying C function returns an incomplete",
        "        # MAC address. psutil is supposed to fill it with null bytes.",
        "        # https://github.com/giampaolo/psutil/issues/786"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 35,
      "type": "Mock Class",
      "description": "class MockApp:",
      "context": [
        "\"\"\"",
        "",
        "class MockApp:",
        "    \"\"\"Mock WebSocketApp for testing\"\"\"",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 44,
      "type": "Mock Class",
      "description": "class MockSocket:",
      "context": [
        "",
        "",
        "class MockSocket:",
        "    \"\"\"Mock socket for testing\"\"\"",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 54,
      "type": "Mock Class",
      "description": "class MockDispatcher:",
      "context": [
        "",
        "",
        "class MockDispatcher:",
        "    \"\"\"Mock external dispatcher for WrappedDispatcher testing\"\"\"",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 128,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "        \"\"\"Test DispatcherBase send method\"\"\"",
        "        dispatcher = DispatcherBase(self.app, 30.0)",
        "        mock_sock = Mock()",
        "        test_data = b\"test data\"",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 131,
      "type": "Mock Implementation",
      "description": "with patch(\"websocket._dispatcher.send\") as mock_send:",
      "context": [
        "        test_data = b\"test data\"",
        "",
        "        with patch(\"websocket._dispatcher.send\") as mock_send:",
        "            mock_send.return_value = len(test_data)",
        "            result = dispatcher.send(mock_sock, test_data)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 132,
      "type": "Mock Implementation",
      "description": "mock_send.return_value = len(test_data)",
      "context": [
        "",
        "        with patch(\"websocket._dispatcher.send\") as mock_send:",
        "            mock_send.return_value = len(test_data)",
        "            result = dispatcher.send(mock_sock, test_data)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 133,
      "type": "Mock Implementation",
      "description": "result = dispatcher.send(mock_sock, test_data)",
      "context": [
        "        with patch(\"websocket._dispatcher.send\") as mock_send:",
        "            mock_send.return_value = len(test_data)",
        "            result = dispatcher.send(mock_sock, test_data)",
        "",
        "            mock_send.assert_called_once_with(mock_sock, test_data)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 135,
      "type": "Mock Implementation",
      "description": "mock_send.assert_called_once_with(mock_sock, test_data)",
      "context": [
        "            result = dispatcher.send(mock_sock, test_data)",
        "",
        "            mock_send.assert_called_once_with(mock_sock, test_data)",
        "            self.assertEqual(result, len(test_data))",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 143,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "        read_callback = Mock(return_value=True)",
        "        check_callback = Mock()",
        "        mock_sock = Mock()",
        "",
        "        # Mock the selector to control the loop"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 145,
      "type": "Mock Implementation",
      "description": "# Mock the selector to control the loop",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        # Mock the selector to control the loop",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 146,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "",
        "        # Mock the selector to control the loop",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 146,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "",
        "        # Mock the selector to control the loop",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 147,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "        # Mock the selector to control the loop",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 148,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "",
        "            # Make select return immediately (timeout)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 148,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "",
        "            # Make select return immediately (timeout)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 148,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "",
        "            # Make select return immediately (timeout)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 151,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = []",
      "context": [
        "",
        "            # Make select return immediately (timeout)",
        "            mock_selector.select.return_value = []",
        "",
        "            # Stop after first iteration"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 158,
      "type": "Mock Implementation",
      "description": "mock_selector.select.side_effect = side_effect",
      "context": [
        "                return []",
        "",
        "            mock_selector.select.side_effect = side_effect",
        "",
        "            dispatcher.read(mock_sock, read_callback, check_callback)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 160,
      "type": "Mock Implementation",
      "description": "dispatcher.read(mock_sock, read_callback, check_callback)",
      "context": [
        "            mock_selector.select.side_effect = side_effect",
        "",
        "            dispatcher.read(mock_sock, read_callback, check_callback)",
        "",
        "            # Verify selector was used correctly"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 163,
      "type": "Mock Implementation",
      "description": "mock_selector.register.assert_called()",
      "context": [
        "",
        "            # Verify selector was used correctly",
        "            mock_selector.register.assert_called()",
        "            mock_selector.select.assert_called_with(5.0)",
        "            mock_selector.close.assert_called()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 164,
      "type": "Mock Implementation",
      "description": "mock_selector.select.assert_called_with(5.0)",
      "context": [
        "            # Verify selector was used correctly",
        "            mock_selector.register.assert_called()",
        "            mock_selector.select.assert_called_with(5.0)",
        "            mock_selector.close.assert_called()",
        "            check_callback.assert_called()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 165,
      "type": "Mock Implementation",
      "description": "mock_selector.close.assert_called()",
      "context": [
        "            mock_selector.register.assert_called()",
        "            mock_selector.select.assert_called_with(5.0)",
        "            mock_selector.close.assert_called()",
        "            check_callback.assert_called()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 173,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "        read_callback = Mock(return_value=True)",
        "        check_callback = Mock()",
        "        mock_sock = Mock()",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 175,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 175,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 176,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 177,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "",
        "            # First call returns data, second call stops the loop"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 177,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "",
        "            # First call returns data, second call stops the loop"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 177,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "",
        "            # First call returns data, second call stops the loop"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 191,
      "type": "Mock Implementation",
      "description": "mock_selector.select.side_effect = select_side_effect",
      "context": [
        "                    return []",
        "",
        "            mock_selector.select.side_effect = select_side_effect",
        "",
        "            dispatcher.read(mock_sock, read_callback, check_callback)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 193,
      "type": "Mock Implementation",
      "description": "dispatcher.read(mock_sock, read_callback, check_callback)",
      "context": [
        "            mock_selector.select.side_effect = select_side_effect",
        "",
        "            dispatcher.read(mock_sock, read_callback, check_callback)",
        "",
        "            read_callback.assert_called()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 204,
      "type": "Mock Implementation",
      "description": "# Mock socket with pending data",
      "context": [
        "        check_callback = Mock()",
        "",
        "        # Mock socket with pending data",
        "        mock_ssl_sock = MockSocket()",
        "        self.app.sock.sock = mock_ssl_sock"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 205,
      "type": "Mock Implementation",
      "description": "mock_ssl_sock = MockSocket()",
      "context": [
        "",
        "        # Mock socket with pending data",
        "        mock_ssl_sock = MockSocket()",
        "        self.app.sock.sock = mock_ssl_sock",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 206,
      "type": "Mock Implementation",
      "description": "self.app.sock.sock = mock_ssl_sock",
      "context": [
        "        # Mock socket with pending data",
        "        mock_ssl_sock = MockSocket()",
        "        self.app.sock.sock = mock_ssl_sock",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 208,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        self.app.sock.sock = mock_ssl_sock",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 208,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        self.app.sock.sock = mock_ssl_sock",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 209,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 210,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 210,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 210,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 211,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = []",
      "context": [
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []",
        "",
        "            # Stop after first iteration"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 218,
      "type": "Mock Implementation",
      "description": "mock_selector.select.side_effect = side_effect",
      "context": [
        "                return []",
        "",
        "            mock_selector.select.side_effect = side_effect",
        "",
        "            dispatcher.read(None, read_callback, check_callback)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 222,
      "type": "Mock Implementation",
      "description": "mock_selector.register.assert_called()",
      "context": [
        "            dispatcher.read(None, read_callback, check_callback)",
        "",
        "            mock_selector.register.assert_called()",
        "            check_callback.assert_called()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 228,
      "type": "Mock Implementation",
      "description": "mock_ssl_sock = MockSocket()",
      "context": [
        "        \"\"\"Test SSLDispatcher select method with pending data\"\"\"",
        "        dispatcher = SSLDispatcher(self.app, 5.0)",
        "        mock_ssl_sock = MockSocket()",
        "        mock_ssl_sock.pending_return = True",
        "        self.app.sock.sock = mock_ssl_sock"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 229,
      "type": "Mock Implementation",
      "description": "mock_ssl_sock.pending_return = True",
      "context": [
        "        dispatcher = SSLDispatcher(self.app, 5.0)",
        "        mock_ssl_sock = MockSocket()",
        "        mock_ssl_sock.pending_return = True",
        "        self.app.sock.sock = mock_ssl_sock",
        "        mock_selector = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 230,
      "type": "Mock Implementation",
      "description": "self.app.sock.sock = mock_ssl_sock",
      "context": [
        "        mock_ssl_sock = MockSocket()",
        "        mock_ssl_sock.pending_return = True",
        "        self.app.sock.sock = mock_ssl_sock",
        "        mock_selector = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 231,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "        mock_ssl_sock.pending_return = True",
        "        self.app.sock.sock = mock_ssl_sock",
        "        mock_selector = Mock()",
        "",
        "        result = dispatcher.select(None, mock_selector)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 233,
      "type": "Mock Implementation",
      "description": "result = dispatcher.select(None, mock_selector)",
      "context": [
        "        mock_selector = Mock()",
        "",
        "        result = dispatcher.select(None, mock_selector)",
        "",
        "        # When pending() returns True, should return [sock]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 236,
      "type": "Mock Implementation",
      "description": "self.assertEqual(result, [mock_ssl_sock])",
      "context": [
        "",
        "        # When pending() returns True, should return [sock]",
        "        self.assertEqual(result, [mock_ssl_sock])",
        "",
        "    def test_ssl_dispatcher_select_without_pending(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 241,
      "type": "Mock Implementation",
      "description": "mock_ssl_sock = MockSocket()",
      "context": [
        "        \"\"\"Test SSLDispatcher select method without pending data\"\"\"",
        "        dispatcher = SSLDispatcher(self.app, 5.0)",
        "        mock_ssl_sock = MockSocket()",
        "        mock_ssl_sock.pending_return = False",
        "        self.app.sock.sock = mock_ssl_sock"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 242,
      "type": "Mock Implementation",
      "description": "mock_ssl_sock.pending_return = False",
      "context": [
        "        dispatcher = SSLDispatcher(self.app, 5.0)",
        "        mock_ssl_sock = MockSocket()",
        "        mock_ssl_sock.pending_return = False",
        "        self.app.sock.sock = mock_ssl_sock",
        "        mock_selector = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 243,
      "type": "Mock Implementation",
      "description": "self.app.sock.sock = mock_ssl_sock",
      "context": [
        "        mock_ssl_sock = MockSocket()",
        "        mock_ssl_sock.pending_return = False",
        "        self.app.sock.sock = mock_ssl_sock",
        "        mock_selector = Mock()",
        "        mock_selector.select.return_value = [(mock_ssl_sock, None)]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 244,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "        mock_ssl_sock.pending_return = False",
        "        self.app.sock.sock = mock_ssl_sock",
        "        mock_selector = Mock()",
        "        mock_selector.select.return_value = [(mock_ssl_sock, None)]",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 245,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = [(mock_ssl_sock, None)]",
      "context": [
        "        self.app.sock.sock = mock_ssl_sock",
        "        mock_selector = Mock()",
        "        mock_selector.select.return_value = [(mock_ssl_sock, None)]",
        "",
        "        result = dispatcher.select(None, mock_selector)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 245,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = [(mock_ssl_sock, None)]",
      "context": [
        "        self.app.sock.sock = mock_ssl_sock",
        "        mock_selector = Mock()",
        "        mock_selector.select.return_value = [(mock_ssl_sock, None)]",
        "",
        "        result = dispatcher.select(None, mock_selector)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 247,
      "type": "Mock Implementation",
      "description": "result = dispatcher.select(None, mock_selector)",
      "context": [
        "        mock_selector.select.return_value = [(mock_ssl_sock, None)]",
        "",
        "        result = dispatcher.select(None, mock_selector)",
        "",
        "        # Should return the first element of first result tuple"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 250,
      "type": "Mock Implementation",
      "description": "self.assertEqual(result, mock_ssl_sock)",
      "context": [
        "",
        "        # Should return the first element of first result tuple",
        "        self.assertEqual(result, mock_ssl_sock)",
        "        mock_selector.select.assert_called_with(5.0)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 251,
      "type": "Mock Implementation",
      "description": "mock_selector.select.assert_called_with(5.0)",
      "context": [
        "        # Should return the first element of first result tuple",
        "        self.assertEqual(result, mock_ssl_sock)",
        "        mock_selector.select.assert_called_with(5.0)",
        "",
        "    def test_ssl_dispatcher_select_no_results(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 256,
      "type": "Mock Implementation",
      "description": "mock_ssl_sock = MockSocket()",
      "context": [
        "        \"\"\"Test SSLDispatcher select method with no results\"\"\"",
        "        dispatcher = SSLDispatcher(self.app, 5.0)",
        "        mock_ssl_sock = MockSocket()",
        "        mock_ssl_sock.pending_return = False",
        "        self.app.sock.sock = mock_ssl_sock"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 257,
      "type": "Mock Implementation",
      "description": "mock_ssl_sock.pending_return = False",
      "context": [
        "        dispatcher = SSLDispatcher(self.app, 5.0)",
        "        mock_ssl_sock = MockSocket()",
        "        mock_ssl_sock.pending_return = False",
        "        self.app.sock.sock = mock_ssl_sock",
        "        mock_selector = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 258,
      "type": "Mock Implementation",
      "description": "self.app.sock.sock = mock_ssl_sock",
      "context": [
        "        mock_ssl_sock = MockSocket()",
        "        mock_ssl_sock.pending_return = False",
        "        self.app.sock.sock = mock_ssl_sock",
        "        mock_selector = Mock()",
        "        mock_selector.select.return_value = []"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 259,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "        mock_ssl_sock.pending_return = False",
        "        self.app.sock.sock = mock_ssl_sock",
        "        mock_selector = Mock()",
        "        mock_selector.select.return_value = []",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 260,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = []",
      "context": [
        "        self.app.sock.sock = mock_ssl_sock",
        "        mock_selector = Mock()",
        "        mock_selector.select.return_value = []",
        "",
        "        result = dispatcher.select(None, mock_selector)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 262,
      "type": "Mock Implementation",
      "description": "result = dispatcher.select(None, mock_selector)",
      "context": [
        "        mock_selector.select.return_value = []",
        "",
        "        result = dispatcher.select(None, mock_selector)",
        "",
        "        # Should return None when no results (function doesn't return anything when len(r) == 0)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 269,
      "type": "Mock Implementation",
      "description": "mock_dispatcher = MockDispatcher()",
      "context": [
        "    def test_wrapped_dispatcher_init(self):",
        "        \"\"\"Test WrappedDispatcher initialization\"\"\"",
        "        mock_dispatcher = MockDispatcher()",
        "        handle_disconnect = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 272,
      "type": "Mock Implementation",
      "description": "wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)",
      "context": [
        "        handle_disconnect = Mock()",
        "",
        "        wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)",
        "",
        "        self.assertEqual(wrapped.app, self.app)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 276,
      "type": "Mock Implementation",
      "description": "self.assertEqual(wrapped.dispatcher, mock_dispatcher)",
      "context": [
        "        self.assertEqual(wrapped.app, self.app)",
        "        self.assertEqual(wrapped.ping_timeout, 10.0)",
        "        self.assertEqual(wrapped.dispatcher, mock_dispatcher)",
        "        self.assertEqual(wrapped.handleDisconnect, handle_disconnect)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 280,
      "type": "Mock Implementation",
      "description": "self.assertEqual(len(mock_dispatcher.signal_calls), 1)",
      "context": [
        "",
        "        # Should have set up signal handler",
        "        self.assertEqual(len(mock_dispatcher.signal_calls), 1)",
        "        sig, handler = mock_dispatcher.signal_calls[0]",
        "        self.assertEqual(sig, 2)  # SIGINT"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 281,
      "type": "Mock Implementation",
      "description": "sig, handler = mock_dispatcher.signal_calls[0]",
      "context": [
        "        # Should have set up signal handler",
        "        self.assertEqual(len(mock_dispatcher.signal_calls), 1)",
        "        sig, handler = mock_dispatcher.signal_calls[0]",
        "        self.assertEqual(sig, 2)  # SIGINT",
        "        self.assertEqual(handler, mock_dispatcher.abort)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 283,
      "type": "Mock Implementation",
      "description": "self.assertEqual(handler, mock_dispatcher.abort)",
      "context": [
        "        sig, handler = mock_dispatcher.signal_calls[0]",
        "        self.assertEqual(sig, 2)  # SIGINT",
        "        self.assertEqual(handler, mock_dispatcher.abort)",
        "",
        "    def test_wrapped_dispatcher_read(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 287,
      "type": "Mock Implementation",
      "description": "mock_dispatcher = MockDispatcher()",
      "context": [
        "    def test_wrapped_dispatcher_read(self):",
        "        \"\"\"Test WrappedDispatcher read method\"\"\"",
        "        mock_dispatcher = MockDispatcher()",
        "        handle_disconnect = Mock()",
        "        wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 289,
      "type": "Mock Implementation",
      "description": "wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)",
      "context": [
        "        mock_dispatcher = MockDispatcher()",
        "        handle_disconnect = Mock()",
        "        wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)",
        "",
        "        mock_sock = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 291,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "        wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)",
        "",
        "        mock_sock = Mock()",
        "        read_callback = Mock()",
        "        check_callback = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 295,
      "type": "Mock Implementation",
      "description": "wrapped.read(mock_sock, read_callback, check_callback)",
      "context": [
        "        check_callback = Mock()",
        "",
        "        wrapped.read(mock_sock, read_callback, check_callback)",
        "",
        "        # Should delegate to wrapped dispatcher"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 298,
      "type": "Mock Implementation",
      "description": "self.assertEqual(len(mock_dispatcher.read_calls), 1)",
      "context": [
        "",
        "        # Should delegate to wrapped dispatcher",
        "        self.assertEqual(len(mock_dispatcher.read_calls), 1)",
        "        self.assertEqual(mock_dispatcher.read_calls[0], (mock_sock, read_callback))",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 299,
      "type": "Mock Implementation",
      "description": "self.assertEqual(mock_dispatcher.read_calls[0], (mock_sock, read_callback))",
      "context": [
        "        # Should delegate to wrapped dispatcher",
        "        self.assertEqual(len(mock_dispatcher.read_calls), 1)",
        "        self.assertEqual(mock_dispatcher.read_calls[0], (mock_sock, read_callback))",
        "",
        "        # Should call timeout for ping_timeout"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 302,
      "type": "Mock Implementation",
      "description": "self.assertEqual(len(mock_dispatcher.timeout_calls), 1)",
      "context": [
        "",
        "        # Should call timeout for ping_timeout",
        "        self.assertEqual(len(mock_dispatcher.timeout_calls), 1)",
        "        timeout_call = mock_dispatcher.timeout_calls[0]",
        "        self.assertEqual(timeout_call[0], 10.0)  # timeout seconds"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 303,
      "type": "Mock Implementation",
      "description": "timeout_call = mock_dispatcher.timeout_calls[0]",
      "context": [
        "        # Should call timeout for ping_timeout",
        "        self.assertEqual(len(mock_dispatcher.timeout_calls), 1)",
        "        timeout_call = mock_dispatcher.timeout_calls[0]",
        "        self.assertEqual(timeout_call[0], 10.0)  # timeout seconds",
        "        self.assertEqual(timeout_call[1], check_callback)  # callback"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 309,
      "type": "Mock Implementation",
      "description": "mock_dispatcher = MockDispatcher()",
      "context": [
        "    def test_wrapped_dispatcher_read_no_ping_timeout(self):",
        "        \"\"\"Test WrappedDispatcher read method without ping timeout\"\"\"",
        "        mock_dispatcher = MockDispatcher()",
        "        handle_disconnect = Mock()",
        "        wrapped = WrappedDispatcher(self.app, None, mock_dispatcher, handle_disconnect)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 311,
      "type": "Mock Implementation",
      "description": "wrapped = WrappedDispatcher(self.app, None, mock_dispatcher, handle_disconnect)",
      "context": [
        "        mock_dispatcher = MockDispatcher()",
        "        handle_disconnect = Mock()",
        "        wrapped = WrappedDispatcher(self.app, None, mock_dispatcher, handle_disconnect)",
        "",
        "        mock_sock = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 313,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "        wrapped = WrappedDispatcher(self.app, None, mock_dispatcher, handle_disconnect)",
        "",
        "        mock_sock = Mock()",
        "        read_callback = Mock()",
        "        check_callback = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 317,
      "type": "Mock Implementation",
      "description": "wrapped.read(mock_sock, read_callback, check_callback)",
      "context": [
        "        check_callback = Mock()",
        "",
        "        wrapped.read(mock_sock, read_callback, check_callback)",
        "",
        "        # Should delegate to wrapped dispatcher"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 320,
      "type": "Mock Implementation",
      "description": "self.assertEqual(len(mock_dispatcher.read_calls), 1)",
      "context": [
        "",
        "        # Should delegate to wrapped dispatcher",
        "        self.assertEqual(len(mock_dispatcher.read_calls), 1)",
        "",
        "        # Should NOT call timeout when ping_timeout is None"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 323,
      "type": "Mock Implementation",
      "description": "self.assertEqual(len(mock_dispatcher.timeout_calls), 0)",
      "context": [
        "",
        "        # Should NOT call timeout when ping_timeout is None",
        "        self.assertEqual(len(mock_dispatcher.timeout_calls), 0)",
        "",
        "    def test_wrapped_dispatcher_send(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 327,
      "type": "Mock Implementation",
      "description": "mock_dispatcher = MockDispatcher()",
      "context": [
        "    def test_wrapped_dispatcher_send(self):",
        "        \"\"\"Test WrappedDispatcher send method\"\"\"",
        "        mock_dispatcher = MockDispatcher()",
        "        handle_disconnect = Mock()",
        "        wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 329,
      "type": "Mock Implementation",
      "description": "wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)",
      "context": [
        "        mock_dispatcher = MockDispatcher()",
        "        handle_disconnect = Mock()",
        "        wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)",
        "",
        "        mock_sock = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 331,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "        wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)",
        "",
        "        mock_sock = Mock()",
        "        test_data = b\"test data\"",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 334,
      "type": "Mock Implementation",
      "description": "with patch(\"websocket._dispatcher.send\") as mock_send:",
      "context": [
        "        test_data = b\"test data\"",
        "",
        "        with patch(\"websocket._dispatcher.send\") as mock_send:",
        "            result = wrapped.send(mock_sock, test_data)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 335,
      "type": "Mock Implementation",
      "description": "result = wrapped.send(mock_sock, test_data)",
      "context": [
        "",
        "        with patch(\"websocket._dispatcher.send\") as mock_send:",
        "            result = wrapped.send(mock_sock, test_data)",
        "",
        "            # Should delegate to dispatcher.buffwrite"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 338,
      "type": "Mock Implementation",
      "description": "self.assertEqual(len(mock_dispatcher.buffwrite_calls), 1)",
      "context": [
        "",
        "            # Should delegate to dispatcher.buffwrite",
        "            self.assertEqual(len(mock_dispatcher.buffwrite_calls), 1)",
        "            call = mock_dispatcher.buffwrite_calls[0]",
        "            self.assertEqual(call[0], mock_sock)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 339,
      "type": "Mock Implementation",
      "description": "call = mock_dispatcher.buffwrite_calls[0]",
      "context": [
        "            # Should delegate to dispatcher.buffwrite",
        "            self.assertEqual(len(mock_dispatcher.buffwrite_calls), 1)",
        "            call = mock_dispatcher.buffwrite_calls[0]",
        "            self.assertEqual(call[0], mock_sock)",
        "            self.assertEqual(call[1], test_data)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 340,
      "type": "Mock Implementation",
      "description": "self.assertEqual(call[0], mock_sock)",
      "context": [
        "            self.assertEqual(len(mock_dispatcher.buffwrite_calls), 1)",
        "            call = mock_dispatcher.buffwrite_calls[0]",
        "            self.assertEqual(call[0], mock_sock)",
        "            self.assertEqual(call[1], test_data)",
        "            self.assertEqual(call[2], mock_send)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 342,
      "type": "Mock Implementation",
      "description": "self.assertEqual(call[2], mock_send)",
      "context": [
        "            self.assertEqual(call[0], mock_sock)",
        "            self.assertEqual(call[1], test_data)",
        "            self.assertEqual(call[2], mock_send)",
        "            self.assertEqual(call[3], handle_disconnect)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 350,
      "type": "Mock Implementation",
      "description": "mock_dispatcher = MockDispatcher()",
      "context": [
        "    def test_wrapped_dispatcher_timeout(self):",
        "        \"\"\"Test WrappedDispatcher timeout method\"\"\"",
        "        mock_dispatcher = MockDispatcher()",
        "        handle_disconnect = Mock()",
        "        wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 352,
      "type": "Mock Implementation",
      "description": "wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)",
      "context": [
        "        mock_dispatcher = MockDispatcher()",
        "        handle_disconnect = Mock()",
        "        wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)",
        "",
        "        callback = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 360,
      "type": "Mock Implementation",
      "description": "self.assertEqual(len(mock_dispatcher.timeout_calls), 1)",
      "context": [
        "",
        "        # Should delegate to wrapped dispatcher",
        "        self.assertEqual(len(mock_dispatcher.timeout_calls), 1)",
        "        call = mock_dispatcher.timeout_calls[0]",
        "        self.assertEqual(call[0], 5.0)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 361,
      "type": "Mock Implementation",
      "description": "call = mock_dispatcher.timeout_calls[0]",
      "context": [
        "        # Should delegate to wrapped dispatcher",
        "        self.assertEqual(len(mock_dispatcher.timeout_calls), 1)",
        "        call = mock_dispatcher.timeout_calls[0]",
        "        self.assertEqual(call[0], 5.0)",
        "        self.assertEqual(call[1], callback)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 368,
      "type": "Mock Implementation",
      "description": "mock_dispatcher = MockDispatcher()",
      "context": [
        "    def test_wrapped_dispatcher_reconnect(self):",
        "        \"\"\"Test WrappedDispatcher reconnect method\"\"\"",
        "        mock_dispatcher = MockDispatcher()",
        "        handle_disconnect = Mock()",
        "        wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 370,
      "type": "Mock Implementation",
      "description": "wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)",
      "context": [
        "        mock_dispatcher = MockDispatcher()",
        "        handle_disconnect = Mock()",
        "        wrapped = WrappedDispatcher(self.app, 10.0, mock_dispatcher, handle_disconnect)",
        "",
        "        reconnector = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 377,
      "type": "Mock Implementation",
      "description": "self.assertEqual(len(mock_dispatcher.timeout_calls), 1)",
      "context": [
        "",
        "        # Should delegate to timeout method with reconnect=True",
        "        self.assertEqual(len(mock_dispatcher.timeout_calls), 1)",
        "        call = mock_dispatcher.timeout_calls[0]",
        "        self.assertEqual(call[0], 3)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_dispatcher.py",
      "line": 378,
      "type": "Mock Implementation",
      "description": "call = mock_dispatcher.timeout_calls[0]",
      "context": [
        "        # Should delegate to timeout method with reconnect=True",
        "        self.assertEqual(len(mock_dispatcher.timeout_calls), 1)",
        "        call = mock_dispatcher.timeout_calls[0]",
        "        self.assertEqual(call[0], 3)",
        "        self.assertEqual(call[1], reconnector)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 32,
      "type": "Mock Implementation",
      "description": "# Mock socket",
      "context": [
        "        \"\"\"Test that large HTTP error responses during handshake are read in chunks\"\"\"",
        "",
        "        # Mock socket",
        "        mock_sock = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 33,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "",
        "        # Mock socket",
        "        mock_sock = Mock()",
        "",
        "        # Create a large error response body (> 16KB)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 41,
      "type": "Mock Method",
      "description": "def mock_recv(sock, bufsize):",
      "context": [
        "        recv_calls = []",
        "",
        "        def mock_recv(sock, bufsize):",
        "            recv_calls.append(bufsize)",
        "            # Simulate SSL error if trying to read > 16KB at once"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 41,
      "type": "Mock Method",
      "description": "def mock_recv(sock, bufsize):",
      "context": [
        "        recv_calls = []",
        "",
        "        def mock_recv(sock, bufsize):",
        "            recv_calls.append(bufsize)",
        "            # Simulate SSL error if trying to read > 16KB at once"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 43,
      "type": "Simulation",
      "description": "# Simulate SSL error if trying to read > 16KB at once",
      "context": [
        "        def mock_recv(sock, bufsize):",
        "            recv_calls.append(bufsize)",
        "            # Simulate SSL error if trying to read > 16KB at once",
        "            if bufsize > 16384:",
        "                raise SSLError(\"[SSL: BAD_LENGTH] unknown error\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 48,
      "type": "Mock Implementation",
      "description": "# Mock read_headers to return error status with large content-length",
      "context": [
        "            return large_response[:bufsize]",
        "",
        "        # Mock read_headers to return error status with large content-length",
        "        with patch(\"websocket._handshake.read_headers\") as mock_read_headers:",
        "            mock_read_headers.return_value = ("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 49,
      "type": "Mock Implementation",
      "description": "with patch(\"websocket._handshake.read_headers\") as mock_read_headers:",
      "context": [
        "",
        "        # Mock read_headers to return error status with large content-length",
        "        with patch(\"websocket._handshake.read_headers\") as mock_read_headers:",
        "            mock_read_headers.return_value = (",
        "                400,  # Bad request status"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 50,
      "type": "Mock Implementation",
      "description": "mock_read_headers.return_value = (",
      "context": [
        "        # Mock read_headers to return error status with large content-length",
        "        with patch(\"websocket._handshake.read_headers\") as mock_read_headers:",
        "            mock_read_headers.return_value = (",
        "                400,  # Bad request status",
        "                {\"content-length\": str(len(large_response))},"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 56,
      "type": "Mock Implementation",
      "description": "# Mock the recv function to track calls",
      "context": [
        "            )",
        "",
        "            # Mock the recv function to track calls",
        "            with patch(\"websocket._socket.recv\", side_effect=mock_recv):",
        "                # This should not raise SSLError, but should raise WebSocketBadStatusException"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 57,
      "type": "Mock Implementation",
      "description": "with patch(\"websocket._socket.recv\", side_effect=mock_recv):",
      "context": [
        "",
        "            # Mock the recv function to track calls",
        "            with patch(\"websocket._socket.recv\", side_effect=mock_recv):",
        "                # This should not raise SSLError, but should raise WebSocketBadStatusException",
        "                with self.assertRaises(WebSocketBadStatusException) as cm:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 60,
      "type": "Mock Implementation",
      "description": "_get_resp_headers(mock_sock)",
      "context": [
        "                # This should not raise SSLError, but should raise WebSocketBadStatusException",
        "                with self.assertRaises(WebSocketBadStatusException) as cm:",
        "                    _get_resp_headers(mock_sock)",
        "",
        "                # Verify the response body was included in the exception"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 79,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "        \"\"\"Test that the fix prevents SSL BAD_LENGTH errors during handshake\"\"\"",
        "",
        "        mock_sock = Mock()",
        "",
        "        # Large content that would trigger SSL error if read all at once"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 86,
      "type": "Mock Method",
      "description": "def mock_recv_chunked(sock, bufsize):",
      "context": [
        "        chunks_returned = 0",
        "",
        "        def mock_recv_chunked(sock, bufsize):",
        "            nonlocal chunks_returned",
        "            # Return data in chunks, simulating successful chunked reading"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 86,
      "type": "Mock Method",
      "description": "def mock_recv_chunked(sock, bufsize):",
      "context": [
        "        chunks_returned = 0",
        "",
        "        def mock_recv_chunked(sock, bufsize):",
        "            nonlocal chunks_returned",
        "            # Return data in chunks, simulating successful chunked reading"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 95,
      "type": "Mock Implementation",
      "description": "with patch(\"websocket._handshake.read_headers\") as mock_read_headers:",
      "context": [
        "            return result",
        "",
        "        with patch(\"websocket._handshake.read_headers\") as mock_read_headers:",
        "            mock_read_headers.return_value = (",
        "                500,  # Server error"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 96,
      "type": "Mock Implementation",
      "description": "mock_read_headers.return_value = (",
      "context": [
        "",
        "        with patch(\"websocket._handshake.read_headers\") as mock_read_headers:",
        "            mock_read_headers.return_value = (",
        "                500,  # Server error",
        "                {\"content-length\": str(len(large_content))},"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 102,
      "type": "Mock Implementation",
      "description": "with patch(\"websocket._socket.recv\", side_effect=mock_recv_chunked):",
      "context": [
        "            )",
        "",
        "            with patch(\"websocket._socket.recv\", side_effect=mock_recv_chunked):",
        "                # Should handle large response without SSL errors",
        "                with self.assertRaises(WebSocketBadStatusException) as cm:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 105,
      "type": "Mock Implementation",
      "description": "_get_resp_headers(mock_sock)",
      "context": [
        "                # Should handle large response without SSL errors",
        "                with self.assertRaises(WebSocketBadStatusException) as cm:",
        "                    _get_resp_headers(mock_sock)",
        "",
        "                # Verify the complete response was captured"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 115,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "        \"\"\"Test that normal small responses still work correctly\"\"\"",
        "",
        "        mock_sock = Mock()",
        "        small_response = b\"Small error message\"",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 118,
      "type": "Mock Method",
      "description": "def mock_recv(sock, bufsize):",
      "context": [
        "        small_response = b\"Small error message\"",
        "",
        "        def mock_recv(sock, bufsize):",
        "            return small_response",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 118,
      "type": "Mock Method",
      "description": "def mock_recv(sock, bufsize):",
      "context": [
        "        small_response = b\"Small error message\"",
        "",
        "        def mock_recv(sock, bufsize):",
        "            return small_response",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 121,
      "type": "Mock Implementation",
      "description": "with patch(\"websocket._handshake.read_headers\") as mock_read_headers:",
      "context": [
        "            return small_response",
        "",
        "        with patch(\"websocket._handshake.read_headers\") as mock_read_headers:",
        "            mock_read_headers.return_value = (",
        "                404,  # Not found"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 122,
      "type": "Mock Implementation",
      "description": "mock_read_headers.return_value = (",
      "context": [
        "",
        "        with patch(\"websocket._handshake.read_headers\") as mock_read_headers:",
        "            mock_read_headers.return_value = (",
        "                404,  # Not found",
        "                {\"content-length\": str(len(small_response))},"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 128,
      "type": "Mock Implementation",
      "description": "with patch(\"websocket._socket.recv\", side_effect=mock_recv):",
      "context": [
        "            )",
        "",
        "            with patch(\"websocket._socket.recv\", side_effect=mock_recv):",
        "                with self.assertRaises(WebSocketBadStatusException) as cm:",
        "                    _get_resp_headers(mock_sock)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 130,
      "type": "Mock Implementation",
      "description": "_get_resp_headers(mock_sock)",
      "context": [
        "            with patch(\"websocket._socket.recv\", side_effect=mock_recv):",
        "                with self.assertRaises(WebSocketBadStatusException) as cm:",
        "                    _get_resp_headers(mock_sock)",
        "",
        "                # Verify small response is handled correctly"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 138,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "        \"\"\"Test handshake error response without content-length header\"\"\"",
        "",
        "        mock_sock = Mock()",
        "",
        "        with patch(\"websocket._handshake.read_headers\") as mock_read_headers:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 140,
      "type": "Mock Implementation",
      "description": "with patch(\"websocket._handshake.read_headers\") as mock_read_headers:",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        with patch(\"websocket._handshake.read_headers\") as mock_read_headers:",
        "            mock_read_headers.return_value = (",
        "                403,  # Forbidden"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 141,
      "type": "Mock Implementation",
      "description": "mock_read_headers.return_value = (",
      "context": [
        "",
        "        with patch(\"websocket._handshake.read_headers\") as mock_read_headers:",
        "            mock_read_headers.return_value = (",
        "                403,  # Forbidden",
        "                {},  # No content-length header"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_handshake_large_response.py",
      "line": 149,
      "type": "Mock Implementation",
      "description": "_get_resp_headers(mock_sock)",
      "context": [
        "            # Should raise exception without trying to read response body",
        "            with self.assertRaises(WebSocketBadStatusException) as cm:",
        "                _get_resp_headers(mock_sock)",
        "",
        "            # Should mention status but not have response body"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_http.py",
      "line": 53,
      "type": "Mock Class",
      "description": "class SockMock:",
      "context": [
        "",
        "",
        "class SockMock:",
        "    def __init__(self):",
        "        self.data = []"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_http.py",
      "line": 81,
      "type": "Mock Class",
      "description": "class HeaderSockMock(SockMock):",
      "context": [
        "",
        "",
        "class HeaderSockMock(SockMock):",
        "    def __init__(self, fname):",
        "        SockMock.__init__(self)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 71,
      "type": "Mock Implementation",
      "description": "# Mock recv function that returns data in 16KB chunks",
      "context": [
        "        large_payload = b\"B\" * 32768  # 32KB",
        "",
        "        # Mock recv function that returns data in 16KB chunks",
        "        chunks = []",
        "        chunk_size = 16384"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 79,
      "type": "Mock Method",
      "description": "def mock_recv(bufsize):",
      "context": [
        "        call_count = 0",
        "",
        "        def mock_recv(bufsize):",
        "            nonlocal call_count",
        "            if call_count >= len(chunks):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 79,
      "type": "Mock Method",
      "description": "def mock_recv(bufsize):",
      "context": [
        "        call_count = 0",
        "",
        "        def mock_recv(bufsize):",
        "            nonlocal call_count",
        "            if call_count >= len(chunks):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 90,
      "type": "Mock Implementation",
      "description": "fb = frame_buffer(mock_recv, skip_utf8_validation=True)",
      "context": [
        "        from websocket._abnf import frame_buffer",
        "",
        "        fb = frame_buffer(mock_recv, skip_utf8_validation=True)",
        "",
        "        # This should handle large payloads by chunking"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 100,
      "type": "Simulation",
      "description": "\"\"\"Simulate SSL BAD_LENGTH error scenario\"\"\"",
      "context": [
        "",
        "    def test_ssl_large_payload_simulation(self):",
        "        \"\"\"Simulate SSL BAD_LENGTH error scenario\"\"\"",
        "",
        "        # This test demonstrates that the 16KB limit in frame buffer protects against SSL issues"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 107,
      "type": "Mock Method",
      "description": "def mock_recv_with_ssl_limit(bufsize):",
      "context": [
        "        recv_calls = []",
        "",
        "        def mock_recv_with_ssl_limit(bufsize):",
        "            recv_calls.append(bufsize)",
        "            # This simulates the SSL issue: BAD_LENGTH when trying to recv > 16KB"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 107,
      "type": "Mock Method",
      "description": "def mock_recv_with_ssl_limit(bufsize):",
      "context": [
        "        recv_calls = []",
        "",
        "        def mock_recv_with_ssl_limit(bufsize):",
        "            recv_calls.append(bufsize)",
        "            # This simulates the SSL issue: BAD_LENGTH when trying to recv > 16KB"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 109,
      "type": "Simulation",
      "description": "# This simulates the SSL issue: BAD_LENGTH when trying to recv > 16KB",
      "context": [
        "        def mock_recv_with_ssl_limit(bufsize):",
        "            recv_calls.append(bufsize)",
        "            # This simulates the SSL issue: BAD_LENGTH when trying to recv > 16KB",
        "            if bufsize > 16384:",
        "                raise SSLError(\"[SSL: BAD_LENGTH] unknown error\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 116,
      "type": "Mock Implementation",
      "description": "fb = frame_buffer(mock_recv_with_ssl_limit, skip_utf8_validation=True)",
      "context": [
        "        from websocket._abnf import frame_buffer",
        "",
        "        fb = frame_buffer(mock_recv_with_ssl_limit, skip_utf8_validation=True)",
        "",
        "        # The frame buffer handles this correctly by chunking recv calls"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 170,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "        \"\"\"Test that large payloads are sent in chunks to avoid SSL issues\"\"\"",
        "",
        "        mock_sock = Mock()",
        "",
        "        # Track how data is sent"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 175,
      "type": "Mock Method",
      "description": "def mock_send(data):",
      "context": [
        "        sent_chunks = []",
        "",
        "        def mock_send(data):",
        "            sent_chunks.append(len(data))",
        "            return len(data)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 175,
      "type": "Mock Method",
      "description": "def mock_send(data):",
      "context": [
        "        sent_chunks = []",
        "",
        "        def mock_send(data):",
        "            sent_chunks.append(len(data))",
        "            return len(data)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 179,
      "type": "Mock Implementation",
      "description": "mock_sock.send = mock_send",
      "context": [
        "            return len(data)",
        "",
        "        mock_sock.send = mock_send",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 180,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "",
        "        mock_sock.send = mock_send",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        # Create WebSocket with mocked socket"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 184,
      "type": "Mock Implementation",
      "description": "ws.sock = mock_sock",
      "context": [
        "        # Create WebSocket with mocked socket",
        "        ws = WebSocket()",
        "        ws.sock = mock_sock",
        "        ws.connected = True",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 191,
      "type": "Mock Implementation",
      "description": "with patch(\"websocket._core.send\") as mock_send_func:",
      "context": [
        "",
        "        # Send the payload",
        "        with patch(\"websocket._core.send\") as mock_send_func:",
        "            mock_send_func.side_effect = lambda sock, data: len(data)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 192,
      "type": "Mock Implementation",
      "description": "mock_send_func.side_effect = lambda sock, data: len(data)",
      "context": [
        "        # Send the payload",
        "        with patch(\"websocket._core.send\") as mock_send_func:",
        "            mock_send_func.side_effect = lambda sock, data: len(data)",
        "",
        "            # This should work without SSL errors"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 229,
      "type": "Simulation",
      "description": "# Simulate receiving in smaller chunks",
      "context": [
        "        payload_16k = b\"F\" * 16384",
        "",
        "        # Simulate receiving in smaller chunks",
        "        chunks = [payload_16k[i : i + 4096] for i in range(0, len(payload_16k), 4096)]",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 234,
      "type": "Mock Method",
      "description": "def mock_recv(bufsize):",
      "context": [
        "        call_count = 0",
        "",
        "        def mock_recv(bufsize):",
        "            nonlocal call_count",
        "            if call_count >= len(chunks):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 234,
      "type": "Mock Method",
      "description": "def mock_recv(bufsize):",
      "context": [
        "        call_count = 0",
        "",
        "        def mock_recv(bufsize):",
        "            nonlocal call_count",
        "            if call_count >= len(chunks):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_large_payloads.py",
      "line": 244,
      "type": "Mock Implementation",
      "description": "fb = frame_buffer(mock_recv, skip_utf8_validation=True)",
      "context": [
        "        from websocket._abnf import frame_buffer",
        "",
        "        fb = frame_buffer(mock_recv, skip_utf8_validation=True)",
        "        result = fb.recv_strict(16384)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 53,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_recv_normal(self):",
        "        \"\"\"Test normal recv operation\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.recv.return_value = b\"test data\"",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 54,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.return_value = b\"test data\"",
      "context": [
        "        \"\"\"Test normal recv operation\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.recv.return_value = b\"test data\"",
        "",
        "        result = recv(mock_sock, 9)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 56,
      "type": "Mock Implementation",
      "description": "result = recv(mock_sock, 9)",
      "context": [
        "        mock_sock.recv.return_value = b\"test data\"",
        "",
        "        result = recv(mock_sock, 9)",
        "",
        "        self.assertEqual(result, b\"test data\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 59,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.assert_called_once_with(9)",
      "context": [
        "",
        "        self.assertEqual(result, b\"test data\")",
        "        mock_sock.recv.assert_called_once_with(9)",
        "",
        "    def test_recv_timeout_error(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 63,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_recv_timeout_error(self):",
        "        \"\"\"Test recv with TimeoutError\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.recv.side_effect = TimeoutError(\"Connection timed out\")",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 64,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.side_effect = TimeoutError(\"Connection timed out\")",
      "context": [
        "        \"\"\"Test recv with TimeoutError\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.recv.side_effect = TimeoutError(\"Connection timed out\")",
        "",
        "        with self.assertRaises(WebSocketTimeoutException) as cm:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 67,
      "type": "Mock Implementation",
      "description": "recv(mock_sock, 9)",
      "context": [
        "",
        "        with self.assertRaises(WebSocketTimeoutException) as cm:",
        "            recv(mock_sock, 9)",
        "",
        "        self.assertEqual(str(cm.exception), \"Connection timed out\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 73,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_recv_socket_timeout(self):",
        "        \"\"\"Test recv with socket.timeout\"\"\"",
        "        mock_sock = Mock()",
        "        timeout_exc = socket.timeout(\"Socket timed out\")",
        "        timeout_exc.args = (\"Socket timed out\",)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 76,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.side_effect = timeout_exc",
      "context": [
        "        timeout_exc = socket.timeout(\"Socket timed out\")",
        "        timeout_exc.args = (\"Socket timed out\",)",
        "        mock_sock.recv.side_effect = timeout_exc",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 77,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "        timeout_exc.args = (\"Socket timed out\",)",
        "        mock_sock.recv.side_effect = timeout_exc",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        with self.assertRaises(WebSocketTimeoutException) as cm:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 80,
      "type": "Mock Implementation",
      "description": "recv(mock_sock, 9)",
      "context": [
        "",
        "        with self.assertRaises(WebSocketTimeoutException) as cm:",
        "            recv(mock_sock, 9)",
        "",
        "        # In Python 3.10+, socket.timeout is a subclass of TimeoutError"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 95,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_recv_ssl_timeout(self):",
        "        \"\"\"Test recv with SSL timeout error\"\"\"",
        "        mock_sock = Mock()",
        "        ssl_exc = SSLError(\"The operation timed out\")",
        "        ssl_exc.args = (\"The operation timed out\",)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 98,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.side_effect = ssl_exc",
      "context": [
        "        ssl_exc = SSLError(\"The operation timed out\")",
        "        ssl_exc.args = (\"The operation timed out\",)",
        "        mock_sock.recv.side_effect = ssl_exc",
        "",
        "        with self.assertRaises(WebSocketTimeoutException) as cm:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 101,
      "type": "Mock Implementation",
      "description": "recv(mock_sock, 9)",
      "context": [
        "",
        "        with self.assertRaises(WebSocketTimeoutException) as cm:",
        "            recv(mock_sock, 9)",
        "",
        "        self.assertEqual(str(cm.exception), \"The operation timed out\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 107,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_recv_ssl_non_timeout_error(self):",
        "        \"\"\"Test recv with SSL non-timeout error\"\"\"",
        "        mock_sock = Mock()",
        "        ssl_exc = SSLError(\"SSL certificate error\")",
        "        ssl_exc.args = (\"SSL certificate error\",)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 110,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.side_effect = ssl_exc",
      "context": [
        "        ssl_exc = SSLError(\"SSL certificate error\")",
        "        ssl_exc.args = (\"SSL certificate error\",)",
        "        mock_sock.recv.side_effect = ssl_exc",
        "",
        "        # Should re-raise the original SSL error"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 114,
      "type": "Mock Implementation",
      "description": "recv(mock_sock, 9)",
      "context": [
        "        # Should re-raise the original SSL error",
        "        with self.assertRaises(SSLError):",
        "            recv(mock_sock, 9)",
        "",
        "    def test_recv_empty_response(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 118,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_recv_empty_response(self):",
        "        \"\"\"Test recv with empty response (connection closed)\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.recv.return_value = b\"\"",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 119,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.return_value = b\"\"",
      "context": [
        "        \"\"\"Test recv with empty response (connection closed)\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.recv.return_value = b\"\"",
        "",
        "        with self.assertRaises(WebSocketConnectionClosedException) as cm:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 122,
      "type": "Mock Implementation",
      "description": "recv(mock_sock, 9)",
      "context": [
        "",
        "        with self.assertRaises(WebSocketConnectionClosedException) as cm:",
        "            recv(mock_sock, 9)",
        "",
        "        self.assertEqual(str(cm.exception), \"Connection to remote host was lost.\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 128,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_recv_ssl_want_read_error(self):",
        "        \"\"\"Test recv with SSLWantReadError (should retry)\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # First call raises SSLWantReadError, second call succeeds"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 131,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.side_effect = [SSLWantReadError(), b\"data after retry\"]",
      "context": [
        "",
        "        # First call raises SSLWantReadError, second call succeeds",
        "        mock_sock.recv.side_effect = [SSLWantReadError(), b\"data after retry\"]",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 133,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.recv.side_effect = [SSLWantReadError(), b\"data after retry\"]",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 133,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.recv.side_effect = [SSLWantReadError(), b\"data after retry\"]",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 134,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to read"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 135,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to read",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 135,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to read",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 135,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to read",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 136,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = [True]  # Ready to read",
      "context": [
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to read",
        "",
        "            result = recv(mock_sock, 100)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 138,
      "type": "Mock Implementation",
      "description": "result = recv(mock_sock, 100)",
      "context": [
        "            mock_selector.select.return_value = [True]  # Ready to read",
        "",
        "            result = recv(mock_sock, 100)",
        "",
        "            self.assertEqual(result, b\"data after retry\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 141,
      "type": "Mock Implementation",
      "description": "mock_selector.register.assert_called()",
      "context": [
        "",
        "            self.assertEqual(result, b\"data after retry\")",
        "            mock_selector.register.assert_called()",
        "            mock_selector.close.assert_called()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 142,
      "type": "Mock Implementation",
      "description": "mock_selector.close.assert_called()",
      "context": [
        "            self.assertEqual(result, b\"data after retry\")",
        "            mock_selector.register.assert_called()",
        "            mock_selector.close.assert_called()",
        "",
        "    def test_recv_ssl_want_read_timeout(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 146,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_recv_ssl_want_read_timeout(self):",
        "        \"\"\"Test recv with SSLWantReadError that times out\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.recv.side_effect = SSLWantReadError()",
        "        mock_sock.gettimeout.return_value = 1.0"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 147,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.side_effect = SSLWantReadError()",
      "context": [
        "        \"\"\"Test recv with SSLWantReadError that times out\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.recv.side_effect = SSLWantReadError()",
        "        mock_sock.gettimeout.return_value = 1.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 148,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 1.0",
      "context": [
        "        mock_sock = Mock()",
        "        mock_sock.recv.side_effect = SSLWantReadError()",
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 150,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 150,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 151,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 152,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 152,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 152,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 153,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = []  # Timeout",
      "context": [
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout",
        "",
        "            with self.assertRaises(WebSocketTimeoutException):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 156,
      "type": "Mock Implementation",
      "description": "recv(mock_sock, 100)",
      "context": [
        "",
        "            with self.assertRaises(WebSocketTimeoutException):",
        "                recv(mock_sock, 100)",
        "",
        "    def test_recv_line(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 160,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_recv_line(self):",
        "        \"\"\"Test recv_line functionality\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Mock recv to return one character at a time"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 162,
      "type": "Mock Implementation",
      "description": "# Mock recv to return one character at a time",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        # Mock recv to return one character at a time",
        "        recv_calls = [b\"H\", b\"e\", b\"l\", b\"l\", b\"o\", b\"\\n\"]",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 165,
      "type": "Mock Implementation",
      "description": "with patch(\"websocket._socket.recv\", side_effect=recv_calls) as mock_recv:",
      "context": [
        "        recv_calls = [b\"H\", b\"e\", b\"l\", b\"l\", b\"o\", b\"\\n\"]",
        "",
        "        with patch(\"websocket._socket.recv\", side_effect=recv_calls) as mock_recv:",
        "            result = recv_line(mock_sock)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 166,
      "type": "Mock Implementation",
      "description": "result = recv_line(mock_sock)",
      "context": [
        "",
        "        with patch(\"websocket._socket.recv\", side_effect=recv_calls) as mock_recv:",
        "            result = recv_line(mock_sock)",
        "",
        "            self.assertEqual(result, b\"Hello\\n\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 169,
      "type": "Mock Implementation",
      "description": "self.assertEqual(mock_recv.call_count, 6)",
      "context": [
        "",
        "            self.assertEqual(result, b\"Hello\\n\")",
        "            self.assertEqual(mock_recv.call_count, 6)",
        "",
        "    def test_send_normal(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 173,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_send_normal(self):",
        "        \"\"\"Test normal send operation\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.send.return_value = 9",
        "        mock_sock.gettimeout.return_value = 30.0"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 174,
      "type": "Mock Implementation",
      "description": "mock_sock.send.return_value = 9",
      "context": [
        "        \"\"\"Test normal send operation\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.send.return_value = 9",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 175,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "        mock_sock = Mock()",
        "        mock_sock.send.return_value = 9",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        result = send(mock_sock, b\"test data\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 177,
      "type": "Mock Implementation",
      "description": "result = send(mock_sock, b\"test data\")",
      "context": [
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        result = send(mock_sock, b\"test data\")",
        "",
        "        self.assertEqual(result, 9)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 180,
      "type": "Mock Implementation",
      "description": "mock_sock.send.assert_called_with(b\"test data\")",
      "context": [
        "",
        "        self.assertEqual(result, 9)",
        "        mock_sock.send.assert_called_with(b\"test data\")",
        "",
        "    def test_send_zero_timeout(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 184,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_send_zero_timeout(self):",
        "        \"\"\"Test send with zero timeout (non-blocking)\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.send.return_value = 9",
        "        mock_sock.gettimeout.return_value = 0"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 185,
      "type": "Mock Implementation",
      "description": "mock_sock.send.return_value = 9",
      "context": [
        "        \"\"\"Test send with zero timeout (non-blocking)\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.send.return_value = 9",
        "        mock_sock.gettimeout.return_value = 0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 186,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 0",
      "context": [
        "        mock_sock = Mock()",
        "        mock_sock.send.return_value = 9",
        "        mock_sock.gettimeout.return_value = 0",
        "",
        "        result = send(mock_sock, b\"test data\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 188,
      "type": "Mock Implementation",
      "description": "result = send(mock_sock, b\"test data\")",
      "context": [
        "        mock_sock.gettimeout.return_value = 0",
        "",
        "        result = send(mock_sock, b\"test data\")",
        "",
        "        self.assertEqual(result, 9)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 191,
      "type": "Mock Implementation",
      "description": "mock_sock.send.assert_called_once_with(b\"test data\")",
      "context": [
        "",
        "        self.assertEqual(result, 9)",
        "        mock_sock.send.assert_called_once_with(b\"test data\")",
        "",
        "    def test_send_ssl_eof_error(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 195,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_send_ssl_eof_error(self):",
        "        \"\"\"Test send with SSLEOFError\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        "        mock_sock.send.side_effect = SSLEOFError(\"Connection closed\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 196,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "        \"\"\"Test send with SSLEOFError\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        "        mock_sock.send.side_effect = SSLEOFError(\"Connection closed\")",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 197,
      "type": "Mock Implementation",
      "description": "mock_sock.send.side_effect = SSLEOFError(\"Connection closed\")",
      "context": [
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        "        mock_sock.send.side_effect = SSLEOFError(\"Connection closed\")",
        "",
        "        with self.assertRaises(WebSocketConnectionClosedException) as cm:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 200,
      "type": "Mock Implementation",
      "description": "send(mock_sock, b\"test data\")",
      "context": [
        "",
        "        with self.assertRaises(WebSocketConnectionClosedException) as cm:",
        "            send(mock_sock, b\"test data\")",
        "",
        "        self.assertEqual(str(cm.exception), \"socket is already closed.\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 206,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_send_ssl_want_write_error(self):",
        "        \"\"\"Test send with SSLWantWriteError (should retry)\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 207,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "        \"\"\"Test send with SSLWantWriteError (should retry)\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        # First call raises SSLWantWriteError, second call succeeds"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 210,
      "type": "Mock Implementation",
      "description": "mock_sock.send.side_effect = [SSLWantWriteError(), 9]",
      "context": [
        "",
        "        # First call raises SSLWantWriteError, second call succeeds",
        "        mock_sock.send.side_effect = [SSLWantWriteError(), 9]",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 212,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.send.side_effect = [SSLWantWriteError(), 9]",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 212,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.send.side_effect = [SSLWantWriteError(), 9]",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 213,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to write"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 214,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to write",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 214,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to write",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 214,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to write",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 215,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = [True]  # Ready to write",
      "context": [
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to write",
        "",
        "            result = send(mock_sock, b\"test data\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 217,
      "type": "Mock Implementation",
      "description": "result = send(mock_sock, b\"test data\")",
      "context": [
        "            mock_selector.select.return_value = [True]  # Ready to write",
        "",
        "            result = send(mock_sock, b\"test data\")",
        "",
        "            self.assertEqual(result, 9)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 220,
      "type": "Mock Implementation",
      "description": "mock_selector.register.assert_called()",
      "context": [
        "",
        "            self.assertEqual(result, 9)",
        "            mock_selector.register.assert_called()",
        "            mock_selector.close.assert_called()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 221,
      "type": "Mock Implementation",
      "description": "mock_selector.close.assert_called()",
      "context": [
        "            self.assertEqual(result, 9)",
        "            mock_selector.register.assert_called()",
        "            mock_selector.close.assert_called()",
        "",
        "    def test_send_socket_eagain_error(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 225,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_send_socket_eagain_error(self):",
        "        \"\"\"Test send with EAGAIN error (should retry)\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 226,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "        \"\"\"Test send with EAGAIN error (should retry)\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        # Create socket error with EAGAIN"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 234,
      "type": "Mock Implementation",
      "description": "mock_sock.send.side_effect = [eagain_error, 9]",
      "context": [
        "",
        "        # First call raises EAGAIN, second call succeeds",
        "        mock_sock.send.side_effect = [eagain_error, 9]",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 236,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.send.side_effect = [eagain_error, 9]",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 236,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.send.side_effect = [eagain_error, 9]",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 237,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to write"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 238,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to write",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 238,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to write",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 238,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to write",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 239,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = [True]  # Ready to write",
      "context": [
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to write",
        "",
        "            result = send(mock_sock, b\"test data\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 241,
      "type": "Mock Implementation",
      "description": "result = send(mock_sock, b\"test data\")",
      "context": [
        "            mock_selector.select.return_value = [True]  # Ready to write",
        "",
        "            result = send(mock_sock, b\"test data\")",
        "",
        "            self.assertEqual(result, 9)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 247,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_send_socket_ewouldblock_error(self):",
        "        \"\"\"Test send with EWOULDBLOCK error (should retry)\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 248,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "        \"\"\"Test send with EWOULDBLOCK error (should retry)\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        # Create socket error with EWOULDBLOCK"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 256,
      "type": "Mock Implementation",
      "description": "mock_sock.send.side_effect = [ewouldblock_error, 9]",
      "context": [
        "",
        "        # First call raises EWOULDBLOCK, second call succeeds",
        "        mock_sock.send.side_effect = [ewouldblock_error, 9]",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 258,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.send.side_effect = [ewouldblock_error, 9]",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 258,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.send.side_effect = [ewouldblock_error, 9]",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 259,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to write"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 260,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to write",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 260,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to write",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 260,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to write",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 261,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = [True]  # Ready to write",
      "context": [
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Ready to write",
        "",
        "            result = send(mock_sock, b\"test data\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 263,
      "type": "Mock Implementation",
      "description": "result = send(mock_sock, b\"test data\")",
      "context": [
        "            mock_selector.select.return_value = [True]  # Ready to write",
        "",
        "            result = send(mock_sock, b\"test data\")",
        "",
        "            self.assertEqual(result, 9)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 269,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_send_socket_other_error(self):",
        "        \"\"\"Test send with other socket error (should raise)\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 270,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "        \"\"\"Test send with other socket error (should raise)\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        # Create socket error with different errno"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 277,
      "type": "Mock Implementation",
      "description": "mock_sock.send.side_effect = other_error",
      "context": [
        "        other_error.args = (errno.ECONNRESET, \"Connection reset by peer\")",
        "",
        "        mock_sock.send.side_effect = other_error",
        "",
        "        with self.assertRaises(socket.error):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 280,
      "type": "Mock Implementation",
      "description": "send(mock_sock, b\"test data\")",
      "context": [
        "",
        "        with self.assertRaises(socket.error):",
        "            send(mock_sock, b\"test data\")",
        "",
        "    def test_send_socket_error_no_errno(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 284,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_send_socket_error_no_errno(self):",
        "        \"\"\"Test send with socket error that has no errno\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 285,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "        \"\"\"Test send with socket error that has no errno\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        # Create socket error without errno attribute"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 291,
      "type": "Mock Implementation",
      "description": "mock_sock.send.side_effect = no_errno_error",
      "context": [
        "        no_errno_error.args = (\"Generic socket error\",)",
        "",
        "        mock_sock.send.side_effect = no_errno_error",
        "",
        "        with self.assertRaises(socket.error):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 294,
      "type": "Mock Implementation",
      "description": "send(mock_sock, b\"test data\")",
      "context": [
        "",
        "        with self.assertRaises(socket.error):",
        "            send(mock_sock, b\"test data\")",
        "",
        "    def test_send_write_timeout(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 298,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_send_write_timeout(self):",
        "        \"\"\"Test send write operation timeout\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 299,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "        \"\"\"Test send write operation timeout\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        # First call raises EAGAIN"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 306,
      "type": "Mock Implementation",
      "description": "mock_sock.send.side_effect = eagain_error",
      "context": [
        "        eagain_error.args = (errno.EAGAIN, \"Resource temporarily unavailable\")",
        "",
        "        mock_sock.send.side_effect = eagain_error",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 308,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.send.side_effect = eagain_error",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 308,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.send.side_effect = eagain_error",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 309,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout - nothing ready"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 310,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout - nothing ready",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 310,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout - nothing ready",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 310,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout - nothing ready",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 311,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = []  # Timeout - nothing ready",
      "context": [
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout - nothing ready",
        "",
        "            result = send(mock_sock, b\"test data\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 313,
      "type": "Mock Implementation",
      "description": "result = send(mock_sock, b\"test data\")",
      "context": [
        "            mock_selector.select.return_value = []  # Timeout - nothing ready",
        "",
        "            result = send(mock_sock, b\"test data\")",
        "",
        "            # Should return 0 when write times out"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 320,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_send_string_data(self):",
        "        \"\"\"Test send with string data (should be encoded)\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.send.return_value = 9",
        "        mock_sock.gettimeout.return_value = 30.0"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 321,
      "type": "Mock Implementation",
      "description": "mock_sock.send.return_value = 9",
      "context": [
        "        \"\"\"Test send with string data (should be encoded)\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.send.return_value = 9",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 322,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "        mock_sock = Mock()",
        "        mock_sock.send.return_value = 9",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        result = send(mock_sock, \"test data\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 324,
      "type": "Mock Implementation",
      "description": "result = send(mock_sock, \"test data\")",
      "context": [
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        result = send(mock_sock, \"test data\")",
        "",
        "        self.assertEqual(result, 9)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 327,
      "type": "Mock Implementation",
      "description": "mock_sock.send.assert_called_with(b\"test data\")",
      "context": [
        "",
        "        self.assertEqual(result, 9)",
        "        mock_sock.send.assert_called_with(b\"test data\")",
        "",
        "    def test_send_partial_send_retry(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 331,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_send_partial_send_retry(self):",
        "        \"\"\"Test send retry mechanism\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 332,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "        \"\"\"Test send retry mechanism\"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        # Create a scenario where send succeeds after selector retry"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 339,
      "type": "Mock Implementation",
      "description": "# Mock the internal _send function behavior",
      "context": [
        "        eagain_error.args = (errno.EAGAIN, \"Resource temporarily unavailable\")",
        "",
        "        # Mock the internal _send function behavior",
        "        mock_sock.send.side_effect = [eagain_error, 9]",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 340,
      "type": "Mock Implementation",
      "description": "mock_sock.send.side_effect = [eagain_error, 9]",
      "context": [
        "",
        "        # Mock the internal _send function behavior",
        "        mock_sock.send.side_effect = [eagain_error, 9]",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 342,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.send.side_effect = [eagain_error, 9]",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 342,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.send.side_effect = [eagain_error, 9]",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 343,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Socket ready for writing"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 344,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Socket ready for writing",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 344,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Socket ready for writing",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 344,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Socket ready for writing",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 345,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = [True]  # Socket ready for writing",
      "context": [
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Socket ready for writing",
        "",
        "            result = send(mock_sock, b\"test data\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 347,
      "type": "Mock Implementation",
      "description": "result = send(mock_sock, b\"test data\")",
      "context": [
        "            mock_selector.select.return_value = [True]  # Socket ready for writing",
        "",
        "            result = send(mock_sock, b\"test data\")",
        "",
        "            self.assertEqual(result, 9)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 351,
      "type": "Mock Implementation",
      "description": "mock_selector.register.assert_called()",
      "context": [
        "            self.assertEqual(result, 9)",
        "            # Verify selector was used for retry mechanism",
        "            mock_selector.register.assert_called()",
        "            mock_selector.select.assert_called()",
        "            mock_selector.close.assert_called()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 352,
      "type": "Mock Implementation",
      "description": "mock_selector.select.assert_called()",
      "context": [
        "            # Verify selector was used for retry mechanism",
        "            mock_selector.register.assert_called()",
        "            mock_selector.select.assert_called()",
        "            mock_selector.close.assert_called()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket.py",
      "line": 353,
      "type": "Mock Implementation",
      "description": "mock_selector.close.assert_called()",
      "context": [
        "            mock_selector.register.assert_called()",
        "            mock_selector.select.assert_called()",
        "            mock_selector.close.assert_called()",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 43,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "        Fixed: Now properly handles timeout with WebSocketTimeoutException",
        "        \"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.recv.side_effect = SSLWantReadError()",
        "        mock_sock.gettimeout.return_value = 1.0"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 44,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.side_effect = SSLWantReadError()",
      "context": [
        "        \"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.recv.side_effect = SSLWantReadError()",
        "        mock_sock.gettimeout.return_value = 1.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 45,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 1.0",
      "context": [
        "        mock_sock = Mock()",
        "        mock_sock.recv.side_effect = SSLWantReadError()",
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 47,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 47,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 48,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout - no data ready"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 49,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout - no data ready",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 49,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout - no data ready",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 49,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout - no data ready",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 50,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = []  # Timeout - no data ready",
      "context": [
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout - no data ready",
        "",
        "            with self.assertRaises(WebSocketTimeoutException) as cm:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 53,
      "type": "Mock Implementation",
      "description": "recv(mock_sock, 100)",
      "context": [
        "",
        "            with self.assertRaises(WebSocketTimeoutException) as cm:",
        "                recv(mock_sock, 100)",
        "",
        "            # Verify correct timeout exception and message"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 65,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "        Fixed: Now properly handles timeout with WebSocketTimeoutException",
        "        \"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Create socket error with EAGAIN (should be retried)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 71,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.side_effect = eagain_error",
      "context": [
        "",
        "        # First call raises EAGAIN, selector times out on retry",
        "        mock_sock.recv.side_effect = eagain_error",
        "        mock_sock.gettimeout.return_value = 1.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 72,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 1.0",
      "context": [
        "        # First call raises EAGAIN, selector times out on retry",
        "        mock_sock.recv.side_effect = eagain_error",
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 74,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 74,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 75,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout - no data ready"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 76,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout - no data ready",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 76,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout - no data ready",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 76,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout - no data ready",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 77,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = []  # Timeout - no data ready",
      "context": [
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # Timeout - no data ready",
        "",
        "            with self.assertRaises(WebSocketTimeoutException) as cm:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 80,
      "type": "Mock Implementation",
      "description": "recv(mock_sock, 100)",
      "context": [
        "",
        "            with self.assertRaises(WebSocketTimeoutException) as cm:",
        "                recv(mock_sock, 100)",
        "",
        "            # Verify correct timeout exception and message"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 92,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "        Fixed: Now raises WebSocketTimeoutException directly",
        "        \"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.recv.side_effect = SSLWantReadError()  # Trigger retry path",
        "        mock_sock.gettimeout.return_value = 1.0"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 93,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.side_effect = SSLWantReadError()  # Trigger retry path",
      "context": [
        "        \"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.recv.side_effect = SSLWantReadError()  # Trigger retry path",
        "        mock_sock.gettimeout.return_value = 1.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 94,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 1.0",
      "context": [
        "        mock_sock = Mock()",
        "        mock_sock.recv.side_effect = SSLWantReadError()  # Trigger retry path",
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 96,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 96,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 97,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # TIMEOUT - this is key!"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 98,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # TIMEOUT - this is key!",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 98,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # TIMEOUT - this is key!",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 98,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # TIMEOUT - this is key!",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 99,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = []  # TIMEOUT - this is key!",
      "context": [
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = []  # TIMEOUT - this is key!",
        "",
        "            with self.assertRaises(WebSocketTimeoutException) as cm:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 102,
      "type": "Mock Implementation",
      "description": "recv(mock_sock, 100)",
      "context": [
        "",
        "            with self.assertRaises(WebSocketTimeoutException) as cm:",
        "                recv(mock_sock, 100)",
        "",
        "            # Verify it's the correct timeout exception with proper message"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 116,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "        Test that socket.timeout exceptions are properly handled",
        "        \"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 1.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 117,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 1.0",
      "context": [
        "        \"\"\"",
        "        mock_sock = Mock()",
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        # Simulate a real socket.timeout scenario"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 119,
      "type": "Simulation",
      "description": "# Simulate a real socket.timeout scenario",
      "context": [
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        # Simulate a real socket.timeout scenario",
        "        mock_sock.recv.side_effect = socket.timeout(\"Operation timed out\")",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 120,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.side_effect = socket.timeout(\"Operation timed out\")",
      "context": [
        "",
        "        # Simulate a real socket.timeout scenario",
        "        mock_sock.recv.side_effect = socket.timeout(\"Operation timed out\")",
        "",
        "        # This works correctly - socket.timeout raises WebSocketTimeoutException"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 124,
      "type": "Mock Implementation",
      "description": "recv(mock_sock, 100)",
      "context": [
        "        # This works correctly - socket.timeout raises WebSocketTimeoutException",
        "        with self.assertRaises(WebSocketTimeoutException) as cm:",
        "            recv(mock_sock, 100)",
        "",
        "        # In Python 3.10+, socket.timeout is a subclass of TimeoutError"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 139,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_correct_ssl_want_read_retry_behavior(self):",
        "        \"\"\"Test the correct behavior when SSLWantReadError is properly handled\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # First call raises SSLWantReadError, second call succeeds"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 142,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.side_effect = [SSLWantReadError(), b\"data after retry\"]",
      "context": [
        "",
        "        # First call raises SSLWantReadError, second call succeeds",
        "        mock_sock.recv.side_effect = [SSLWantReadError(), b\"data after retry\"]",
        "        mock_sock.gettimeout.return_value = 1.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 143,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 1.0",
      "context": [
        "        # First call raises SSLWantReadError, second call succeeds",
        "        mock_sock.recv.side_effect = [SSLWantReadError(), b\"data after retry\"]",
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 145,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 145,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 1.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 146,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Data ready after wait"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 147,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Data ready after wait",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 147,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Data ready after wait",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 147,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Data ready after wait",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 148,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = [True]  # Data ready after wait",
      "context": [
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Data ready after wait",
        "",
        "            # This should work correctly"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 151,
      "type": "Mock Implementation",
      "description": "result = recv(mock_sock, 100)",
      "context": [
        "",
        "            # This should work correctly",
        "            result = recv(mock_sock, 100)",
        "            self.assertEqual(result, b\"data after retry\")",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 155,
      "type": "Mock Implementation",
      "description": "mock_selector.register.assert_called()",
      "context": [
        "",
        "            # Selector should be used for retry",
        "            mock_selector.register.assert_called()",
        "            mock_selector.select.assert_called()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_socket_bugs.py",
      "line": 156,
      "type": "Mock Implementation",
      "description": "mock_selector.select.assert_called()",
      "context": [
        "            # Selector should be used for retry",
        "            mock_selector.register.assert_called()",
        "            mock_selector.select.assert_called()",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_compat.py",
      "line": 46,
      "type": "Mock Implementation",
      "description": "# Mock the ssl module to not be available",
      "context": [
        "            del sys.modules[\"websocket._ssl_compat\"]",
        "",
        "        # Mock the ssl module to not be available",
        "        import builtins",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_compat.py",
      "line": 51,
      "type": "Mock Method",
      "description": "def mock_import(name, *args, **kwargs):",
      "context": [
        "        original_import = builtins.__import__",
        "",
        "        def mock_import(name, *args, **kwargs):",
        "            if name == \"ssl\":",
        "                raise ImportError(\"No module named 'ssl'\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_compat.py",
      "line": 51,
      "type": "Mock Method",
      "description": "def mock_import(name, *args, **kwargs):",
      "context": [
        "        original_import = builtins.__import__",
        "",
        "        def mock_import(name, *args, **kwargs):",
        "            if name == \"ssl\":",
        "                raise ImportError(\"No module named 'ssl'\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_compat.py",
      "line": 56,
      "type": "Mock Implementation",
      "description": "with patch(\"builtins.__import__\", side_effect=mock_import):",
      "context": [
        "            return original_import(name, *args, **kwargs)",
        "",
        "        with patch(\"builtins.__import__\", side_effect=mock_import):",
        "            import websocket._ssl_compat as ssl_compat",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 45,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_handshake_failure(self):",
        "        \"\"\"Test SSL handshake failure scenarios\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Test SSL handshake timeout"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 48,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "",
        "        # Test SSL handshake timeout",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 49,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "        # Test SSL handshake timeout",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = socket.timeout("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 50,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = socket.timeout(",
        "                \"SSL handshake timeout\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 50,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = socket.timeout(",
        "                \"SSL handshake timeout\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 51,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.side_effect = socket.timeout(",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = socket.timeout(",
        "                \"SSL handshake timeout\"",
        "            )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 58,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"example.com\")",
      "context": [
        "",
        "            with self.assertRaises(socket.timeout):",
        "                _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "",
        "    def test_ssl_certificate_verification_failures(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 62,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_certificate_verification_failures(self):",
        "        \"\"\"Test various SSL certificate verification failure scenarios\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Test certificate verification failure"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 65,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "",
        "        # Test certificate verification failure",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 66,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "        # Test certificate verification failure",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = ssl.SSLCertVerificationError("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 67,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = ssl.SSLCertVerificationError(",
        "                \"Certificate verification failed\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 67,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = ssl.SSLCertVerificationError(",
        "                \"Certificate verification failed\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 68,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.side_effect = ssl.SSLCertVerificationError(",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = ssl.SSLCertVerificationError(",
        "                \"Certificate verification failed\"",
        "            )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 75,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"badssl.example\")",
      "context": [
        "",
        "            with self.assertRaises(ssl.SSLCertVerificationError):",
        "                _ssl_socket(mock_sock, sslopt, \"badssl.example\")",
        "",
        "    def test_ssl_context_configuration_edge_cases(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 79,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_context_configuration_edge_cases(self):",
        "        \"\"\"Test SSL context configuration with various edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Test with pre-created SSL context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 82,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "",
        "        # Test with pre-created SSL context",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            existing_context = Mock()",
        "            existing_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 84,
      "type": "Mock Implementation",
      "description": "existing_context.wrap_socket.return_value = Mock()",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            existing_context = Mock()",
        "            existing_context.wrap_socket.return_value = Mock()",
        "            mock_ssl_context.return_value = existing_context",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 85,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = existing_context",
      "context": [
        "            existing_context = Mock()",
        "            existing_context.wrap_socket.return_value = Mock()",
        "            mock_ssl_context.return_value = existing_context",
        "",
        "            sslopt = {\"context\": existing_context}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 90,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"example.com\")",
      "context": [
        "",
        "            # Call _ssl_socket which should use the existing context",
        "            _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "",
        "            # Should use the provided context, not create a new one"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 97,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_ca_bundle_environment_edge_cases(self):",
        "        \"\"\"Test CA bundle environment variable edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Test with non-existent CA bundle file"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 105,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "            with patch(\"os.path.isfile\", return_value=False):",
        "                with patch(\"os.path.isdir\", return_value=False):",
        "                    with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                        mock_context = Mock()",
        "                        mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 106,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "                with patch(\"os.path.isdir\", return_value=False):",
        "                    with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                        mock_context = Mock()",
        "                        mock_ssl_context.return_value = mock_context",
        "                        mock_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 107,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "                    with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                        mock_context = Mock()",
        "                        mock_ssl_context.return_value = mock_context",
        "                        mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 107,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "                    with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                        mock_context = Mock()",
        "                        mock_ssl_context.return_value = mock_context",
        "                        mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 108,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "                        mock_context = Mock()",
        "                        mock_ssl_context.return_value = mock_context",
        "                        mock_context.wrap_socket.return_value = Mock()",
        "",
        "                        sslopt = {}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 108,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "                        mock_context = Mock()",
        "                        mock_ssl_context.return_value = mock_context",
        "                        mock_context.wrap_socket.return_value = Mock()",
        "",
        "                        sslopt = {}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 111,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"example.com\")",
      "context": [
        "",
        "                        sslopt = {}",
        "                        _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "",
        "                        # Should not try to load non-existent CA bundle"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 114,
      "type": "Mock Implementation",
      "description": "mock_context.load_verify_locations.assert_not_called()",
      "context": [
        "",
        "                        # Should not try to load non-existent CA bundle",
        "                        mock_context.load_verify_locations.assert_not_called()",
        "",
        "        # Test with CA bundle directory"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 120,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "            with patch(\"os.path.isfile\", return_value=False):",
        "                with patch(\"os.path.isdir\", return_value=True):",
        "                    with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                        mock_context = Mock()",
        "                        mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 121,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "                with patch(\"os.path.isdir\", return_value=True):",
        "                    with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                        mock_context = Mock()",
        "                        mock_ssl_context.return_value = mock_context",
        "                        mock_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 122,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "                    with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                        mock_context = Mock()",
        "                        mock_ssl_context.return_value = mock_context",
        "                        mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 122,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "                    with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                        mock_context = Mock()",
        "                        mock_ssl_context.return_value = mock_context",
        "                        mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 123,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "                        mock_context = Mock()",
        "                        mock_ssl_context.return_value = mock_context",
        "                        mock_context.wrap_socket.return_value = Mock()",
        "",
        "                        sslopt = {}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 123,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "                        mock_context = Mock()",
        "                        mock_ssl_context.return_value = mock_context",
        "                        mock_context.wrap_socket.return_value = Mock()",
        "",
        "                        sslopt = {}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 126,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"example.com\")",
      "context": [
        "",
        "                        sslopt = {}",
        "                        _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "",
        "                        # Should load CA directory"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 129,
      "type": "Mock Implementation",
      "description": "mock_context.load_verify_locations.assert_called_with(",
      "context": [
        "",
        "                        # Should load CA directory",
        "                        mock_context.load_verify_locations.assert_called_with(",
        "                            cafile=None, capath=\"/etc/ssl/certs\"",
        "                        )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 135,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_cipher_configuration_edge_cases(self):",
        "        \"\"\"Test SSL cipher configuration edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Test with invalid cipher suite"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 138,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "",
        "        # Test with invalid cipher suite",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 139,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "        # Test with invalid cipher suite",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.set_ciphers.side_effect = ssl.SSLError("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 140,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.set_ciphers.side_effect = ssl.SSLError(",
        "                \"No cipher can be selected\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 140,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.set_ciphers.side_effect = ssl.SSLError(",
        "                \"No cipher can be selected\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 141,
      "type": "Mock Implementation",
      "description": "mock_context.set_ciphers.side_effect = ssl.SSLError(",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.set_ciphers.side_effect = ssl.SSLError(",
        "                \"No cipher can be selected\"",
        "            )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 144,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "                \"No cipher can be selected\"",
        "            )",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            sslopt = {\"ciphers\": \"INVALID_CIPHER\"}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 144,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "                \"No cipher can be selected\"",
        "            )",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            sslopt = {\"ciphers\": \"INVALID_CIPHER\"}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 149,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"example.com\")",
      "context": [
        "",
        "            with self.assertRaises(WebSocketException):",
        "                _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "",
        "    def test_ssl_ecdh_curve_edge_cases(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 153,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_ecdh_curve_edge_cases(self):",
        "        \"\"\"Test ECDH curve configuration edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Test with invalid ECDH curve"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 156,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "",
        "        # Test with invalid ECDH curve",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 157,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "        # Test with invalid ECDH curve",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.set_ecdh_curve.side_effect = ValueError(\"unknown curve name\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 158,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.set_ecdh_curve.side_effect = ValueError(\"unknown curve name\")",
        "            mock_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 158,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.set_ecdh_curve.side_effect = ValueError(\"unknown curve name\")",
        "            mock_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 159,
      "type": "Mock Implementation",
      "description": "mock_context.set_ecdh_curve.side_effect = ValueError(\"unknown curve name\")",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.set_ecdh_curve.side_effect = ValueError(\"unknown curve name\")",
        "            mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 160,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.set_ecdh_curve.side_effect = ValueError(\"unknown curve name\")",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            sslopt = {\"ecdh_curve\": \"invalid_curve\"}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 160,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.set_ecdh_curve.side_effect = ValueError(\"unknown curve name\")",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            sslopt = {\"ecdh_curve\": \"invalid_curve\"}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 165,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"example.com\")",
      "context": [
        "",
        "            with self.assertRaises(WebSocketException):",
        "                _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "",
        "    def test_ssl_client_certificate_edge_cases(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 169,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_client_certificate_edge_cases(self):",
        "        \"\"\"Test client certificate configuration edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Test with non-existent client certificate"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 172,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "",
        "        # Test with non-existent client certificate",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 173,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "        # Test with non-existent client certificate",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.load_cert_chain.side_effect = FileNotFoundError(\"No such file\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 174,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.load_cert_chain.side_effect = FileNotFoundError(\"No such file\")",
        "            mock_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 174,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.load_cert_chain.side_effect = FileNotFoundError(\"No such file\")",
        "            mock_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 175,
      "type": "Mock Implementation",
      "description": "mock_context.load_cert_chain.side_effect = FileNotFoundError(\"No such file\")",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.load_cert_chain.side_effect = FileNotFoundError(\"No such file\")",
        "            mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 176,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.load_cert_chain.side_effect = FileNotFoundError(\"No such file\")",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            sslopt = {\"certfile\": \"/nonexistent/client.crt\"}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 176,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.load_cert_chain.side_effect = FileNotFoundError(\"No such file\")",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            sslopt = {\"certfile\": \"/nonexistent/client.crt\"}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 181,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"example.com\")",
      "context": [
        "",
        "            with self.assertRaises(WebSocketException):",
        "                _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "",
        "    def test_ssl_want_read_write_retry_edge_cases(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 185,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_want_read_write_retry_edge_cases(self):",
        "        \"\"\"Test SSL want read/write retry edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Test SSLWantReadError with multiple retries before success"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 190,
      "type": "Mock Method",
      "description": "def mock_recv(bufsize):",
      "context": [
        "        read_attempts = [0]  # Use list for mutable reference",
        "",
        "        def mock_recv(bufsize):",
        "            read_attempts[0] += 1",
        "            if read_attempts[0] == 1:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 190,
      "type": "Mock Method",
      "description": "def mock_recv(bufsize):",
      "context": [
        "        read_attempts = [0]  # Use list for mutable reference",
        "",
        "        def mock_recv(bufsize):",
        "            read_attempts[0] += 1",
        "            if read_attempts[0] == 1:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 199,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.side_effect = mock_recv",
      "context": [
        "                return b\"\"",
        "",
        "        mock_sock.recv.side_effect = mock_recv",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 200,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "",
        "        mock_sock.recv.side_effect = mock_recv",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 202,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 202,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 203,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Always ready"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 204,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Always ready",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 204,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Always ready",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 204,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Always ready",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 205,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = [True]  # Always ready",
      "context": [
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Always ready",
        "",
        "            result = recv(mock_sock, 100)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 207,
      "type": "Mock Implementation",
      "description": "result = recv(mock_sock, 100)",
      "context": [
        "            mock_selector.select.return_value = [True]  # Always ready",
        "",
        "            result = recv(mock_sock, 100)",
        "",
        "            self.assertEqual(result, b\"data after retries\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 212,
      "type": "Mock Implementation",
      "description": "mock_selector.register.assert_called()",
      "context": [
        "            self.assertEqual(read_attempts[0], 2)",
        "            # Should have used selector for retry",
        "            mock_selector.register.assert_called()",
        "            mock_selector.select.assert_called()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 213,
      "type": "Mock Implementation",
      "description": "mock_selector.select.assert_called()",
      "context": [
        "            # Should have used selector for retry",
        "            mock_selector.register.assert_called()",
        "            mock_selector.select.assert_called()",
        "",
        "    def test_ssl_want_write_retry_edge_cases(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 217,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_want_write_retry_edge_cases(self):",
        "        \"\"\"Test SSL want write retry edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Test SSLWantWriteError with multiple retries before success"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 222,
      "type": "Mock Method",
      "description": "def mock_send(data):",
      "context": [
        "        write_attempts = [0]  # Use list for mutable reference",
        "",
        "        def mock_send(data):",
        "            write_attempts[0] += 1",
        "            if write_attempts[0] == 1:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 222,
      "type": "Mock Method",
      "description": "def mock_send(data):",
      "context": [
        "        write_attempts = [0]  # Use list for mutable reference",
        "",
        "        def mock_send(data):",
        "            write_attempts[0] += 1",
        "            if write_attempts[0] == 1:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 231,
      "type": "Mock Implementation",
      "description": "mock_sock.send.side_effect = mock_send",
      "context": [
        "                return 0",
        "",
        "        mock_sock.send.side_effect = mock_send",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 232,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "",
        "        mock_sock.send.side_effect = mock_send",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 234,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 234,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 235,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Always ready"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 236,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Always ready",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 236,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Always ready",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 236,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Always ready",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 237,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = [True]  # Always ready",
      "context": [
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]  # Always ready",
        "",
        "            result = send(mock_sock, b\"test data\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 239,
      "type": "Mock Implementation",
      "description": "result = send(mock_sock, b\"test data\")",
      "context": [
        "            mock_selector.select.return_value = [True]  # Always ready",
        "",
        "            result = send(mock_sock, b\"test data\")",
        "",
        "            self.assertEqual(result, 9)  # len(\"test data\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 246,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_eof_error_edge_cases(self):",
        "        \"\"\"Test SSL EOF error edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Test SSLEOFError during send"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 249,
      "type": "Mock Implementation",
      "description": "mock_sock.send.side_effect = SSLEOFError(\"SSL connection has been closed\")",
      "context": [
        "",
        "        # Test SSLEOFError during send",
        "        mock_sock.send.side_effect = SSLEOFError(\"SSL connection has been closed\")",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 250,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "        # Test SSLEOFError during send",
        "        mock_sock.send.side_effect = SSLEOFError(\"SSL connection has been closed\")",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        from websocket._exceptions import WebSocketConnectionClosedException"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 255,
      "type": "Mock Implementation",
      "description": "send(mock_sock, b\"test data\")",
      "context": [
        "",
        "        with self.assertRaises(WebSocketConnectionClosedException):",
        "            send(mock_sock, b\"test data\")",
        "",
        "    def test_ssl_pending_data_edge_cases(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 262,
      "type": "Mock Implementation",
      "description": "# Mock SSL socket with pending data",
      "context": [
        "        from websocket._app import WebSocketApp",
        "",
        "        # Mock SSL socket with pending data",
        "        mock_ssl_sock = Mock()",
        "        mock_ssl_sock.pending.return_value = 1024  # Simulates pending SSL data"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 263,
      "type": "Mock Implementation",
      "description": "mock_ssl_sock = Mock()",
      "context": [
        "",
        "        # Mock SSL socket with pending data",
        "        mock_ssl_sock = Mock()",
        "        mock_ssl_sock.pending.return_value = 1024  # Simulates pending SSL data",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 264,
      "type": "Simulation",
      "description": "mock_ssl_sock.pending.return_value = 1024  # Simulates pending SSL data",
      "context": [
        "        # Mock SSL socket with pending data",
        "        mock_ssl_sock = Mock()",
        "        mock_ssl_sock.pending.return_value = 1024  # Simulates pending SSL data",
        "",
        "        # Mock WebSocketApp"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 264,
      "type": "Simulation",
      "description": "mock_ssl_sock.pending.return_value = 1024  # Simulates pending SSL data",
      "context": [
        "        # Mock SSL socket with pending data",
        "        mock_ssl_sock = Mock()",
        "        mock_ssl_sock.pending.return_value = 1024  # Simulates pending SSL data",
        "",
        "        # Mock WebSocketApp"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 266,
      "type": "Mock Implementation",
      "description": "# Mock WebSocketApp",
      "context": [
        "        mock_ssl_sock.pending.return_value = 1024  # Simulates pending SSL data",
        "",
        "        # Mock WebSocketApp",
        "        mock_app = Mock(spec=WebSocketApp)",
        "        mock_app.sock = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 267,
      "type": "Mock Implementation",
      "description": "mock_app = Mock(spec=WebSocketApp)",
      "context": [
        "",
        "        # Mock WebSocketApp",
        "        mock_app = Mock(spec=WebSocketApp)",
        "        mock_app.sock = Mock()",
        "        mock_app.sock.sock = mock_ssl_sock"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 268,
      "type": "Mock Implementation",
      "description": "mock_app.sock = Mock()",
      "context": [
        "        # Mock WebSocketApp",
        "        mock_app = Mock(spec=WebSocketApp)",
        "        mock_app.sock = Mock()",
        "        mock_app.sock.sock = mock_ssl_sock",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 269,
      "type": "Mock Implementation",
      "description": "mock_app.sock.sock = mock_ssl_sock",
      "context": [
        "        mock_app = Mock(spec=WebSocketApp)",
        "        mock_app.sock = Mock()",
        "        mock_app.sock.sock = mock_ssl_sock",
        "",
        "        dispatcher = SSLDispatcher(mock_app, 5.0)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 271,
      "type": "Mock Implementation",
      "description": "dispatcher = SSLDispatcher(mock_app, 5.0)",
      "context": [
        "        mock_app.sock.sock = mock_ssl_sock",
        "",
        "        dispatcher = SSLDispatcher(mock_app, 5.0)",
        "",
        "        # When there's pending data, should return immediately without selector"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 274,
      "type": "Mock Implementation",
      "description": "result = dispatcher.select(mock_ssl_sock, Mock())",
      "context": [
        "",
        "        # When there's pending data, should return immediately without selector",
        "        result = dispatcher.select(mock_ssl_sock, Mock())",
        "",
        "        # Should return the socket list when there's pending data"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 277,
      "type": "Mock Implementation",
      "description": "self.assertEqual(result, [mock_ssl_sock])",
      "context": [
        "",
        "        # Should return the socket list when there's pending data",
        "        self.assertEqual(result, [mock_ssl_sock])",
        "        mock_ssl_sock.pending.assert_called_once()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 278,
      "type": "Mock Implementation",
      "description": "mock_ssl_sock.pending.assert_called_once()",
      "context": [
        "        # Should return the socket list when there's pending data",
        "        self.assertEqual(result, [mock_ssl_sock])",
        "        mock_ssl_sock.pending.assert_called_once()",
        "",
        "    def test_ssl_renegotiation_edge_cases(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 282,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_renegotiation_edge_cases(self):",
        "        \"\"\"Test SSL renegotiation scenarios\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Simulate SSL renegotiation during read"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 284,
      "type": "Simulation",
      "description": "# Simulate SSL renegotiation during read",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        # Simulate SSL renegotiation during read",
        "        call_count = 0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 287,
      "type": "Mock Method",
      "description": "def mock_recv(bufsize):",
      "context": [
        "        call_count = 0",
        "",
        "        def mock_recv(bufsize):",
        "            nonlocal call_count",
        "            call_count += 1"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 287,
      "type": "Mock Method",
      "description": "def mock_recv(bufsize):",
      "context": [
        "        call_count = 0",
        "",
        "        def mock_recv(bufsize):",
        "            nonlocal call_count",
        "            call_count += 1"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 294,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.side_effect = mock_recv",
      "context": [
        "            return b\"data after renegotiation\"",
        "",
        "        mock_sock.recv.side_effect = mock_recv",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 295,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "",
        "        mock_sock.recv.side_effect = mock_recv",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 297,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 297,
      "type": "Mock Class",
      "description": "with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
      "context": [
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 298,
      "type": "Mock Implementation",
      "description": "mock_selector = Mock()",
      "context": [
        "",
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 299,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 299,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 299,
      "type": "Mock Class",
      "description": "mock_selector_class.return_value = mock_selector",
      "context": [
        "        with patch(\"selectors.DefaultSelector\") as mock_selector_class:",
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 300,
      "type": "Mock Implementation",
      "description": "mock_selector.select.return_value = [True]",
      "context": [
        "            mock_selector = Mock()",
        "            mock_selector_class.return_value = mock_selector",
        "            mock_selector.select.return_value = [True]",
        "",
        "            result = recv(mock_sock, 100)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 302,
      "type": "Mock Implementation",
      "description": "result = recv(mock_sock, 100)",
      "context": [
        "            mock_selector.select.return_value = [True]",
        "",
        "            result = recv(mock_sock, 100)",
        "",
        "            self.assertEqual(result, b\"data after renegotiation\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 309,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_server_hostname_override(self):",
        "        \"\"\"Test SSL server hostname override scenarios\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 311,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 312,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 313,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 313,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 314,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            # Test server_hostname override"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 314,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            # Test server_hostname override"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 318,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"original.example.com\")",
      "context": [
        "            # Test server_hostname override",
        "            sslopt = {\"server_hostname\": \"override.example.com\"}",
        "            _ssl_socket(mock_sock, sslopt, \"original.example.com\")",
        "",
        "            # Should use override hostname in wrap_socket call"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 321,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.assert_called_with(",
      "context": [
        "",
        "            # Should use override hostname in wrap_socket call",
        "            mock_context.wrap_socket.assert_called_with(",
        "                mock_sock,",
        "                do_handshake_on_connect=True,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 322,
      "type": "Mock Implementation",
      "description": "mock_sock,",
      "context": [
        "            # Should use override hostname in wrap_socket call",
        "            mock_context.wrap_socket.assert_called_with(",
        "                mock_sock,",
        "                do_handshake_on_connect=True,",
        "                suppress_ragged_eofs=True,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 330,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_protocol_version_edge_cases(self):",
        "        \"\"\"Test SSL protocol version edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Test with deprecated SSL version"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 333,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "",
        "        # Test with deprecated SSL version",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 334,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "        # Test with deprecated SSL version",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 335,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 335,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 336,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            # Test that deprecated ssl_version is still handled"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 336,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            # Test that deprecated ssl_version is still handled"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 341,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"example.com\")",
      "context": [
        "            if hasattr(ssl, \"PROTOCOL_TLS\"):",
        "                sslopt = {\"ssl_version\": ssl.PROTOCOL_TLS}",
        "                _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "",
        "                mock_ssl_context.assert_called_with(ssl.PROTOCOL_TLS)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 343,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.assert_called_with(ssl.PROTOCOL_TLS)",
      "context": [
        "                _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "",
        "                mock_ssl_context.assert_called_with(ssl.PROTOCOL_TLS)",
        "",
        "    def test_ssl_keylog_file_edge_cases(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 347,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_keylog_file_edge_cases(self):",
        "        \"\"\"Test SSL keylog file configuration edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Test with SSLKEYLOGFILE environment variable"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 351,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "        # Test with SSLKEYLOGFILE environment variable",
        "        with patch.dict(\"os.environ\", {\"SSLKEYLOGFILE\": \"/tmp/ssl_keys.log\"}):",
        "            with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                mock_context = Mock()",
        "                mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 352,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "        with patch.dict(\"os.environ\", {\"SSLKEYLOGFILE\": \"/tmp/ssl_keys.log\"}):",
        "            with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                mock_context = Mock()",
        "                mock_ssl_context.return_value = mock_context",
        "                mock_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 353,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "            with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                mock_context = Mock()",
        "                mock_ssl_context.return_value = mock_context",
        "                mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 353,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "            with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                mock_context = Mock()",
        "                mock_ssl_context.return_value = mock_context",
        "                mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 354,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "                mock_context = Mock()",
        "                mock_ssl_context.return_value = mock_context",
        "                mock_context.wrap_socket.return_value = Mock()",
        "",
        "                sslopt = {}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 354,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "                mock_context = Mock()",
        "                mock_ssl_context.return_value = mock_context",
        "                mock_context.wrap_socket.return_value = Mock()",
        "",
        "                sslopt = {}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 357,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"example.com\")",
      "context": [
        "",
        "                sslopt = {}",
        "                _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "",
        "                # Should set keylog_filename"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 360,
      "type": "Mock Implementation",
      "description": "self.assertEqual(mock_context.keylog_filename, \"/tmp/ssl_keys.log\")",
      "context": [
        "",
        "                # Should set keylog_filename",
        "                self.assertEqual(mock_context.keylog_filename, \"/tmp/ssl_keys.log\")",
        "",
        "    def test_ssl_context_verification_modes(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 364,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_context_verification_modes(self):",
        "        \"\"\"Test different SSL verification mode combinations\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        test_cases = ["
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 375,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "        for cert_reqs, check_hostname, expected_verify, expected_check in test_cases:",
        "            with self.subTest(cert_reqs=cert_reqs, check_hostname=check_hostname):",
        "                with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 376,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "            with self.subTest(cert_reqs=cert_reqs, check_hostname=check_hostname):",
        "                with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context",
        "                    mock_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 377,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "                with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context",
        "                    mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 377,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "                with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context",
        "                    mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 378,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context",
        "                    mock_context.wrap_socket.return_value = Mock()",
        "",
        "                    sslopt = {\"cert_reqs\": cert_reqs, \"check_hostname\": check_hostname}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 378,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context",
        "                    mock_context.wrap_socket.return_value = Mock()",
        "",
        "                    sslopt = {\"cert_reqs\": cert_reqs, \"check_hostname\": check_hostname}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 381,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"example.com\")",
      "context": [
        "",
        "                    sslopt = {\"cert_reqs\": cert_reqs, \"check_hostname\": check_hostname}",
        "                    _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "",
        "                    self.assertEqual(mock_context.verify_mode, expected_verify)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 383,
      "type": "Mock Implementation",
      "description": "self.assertEqual(mock_context.verify_mode, expected_verify)",
      "context": [
        "                    _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "",
        "                    self.assertEqual(mock_context.verify_mode, expected_verify)",
        "                    self.assertEqual(mock_context.check_hostname, expected_check)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 384,
      "type": "Mock Implementation",
      "description": "self.assertEqual(mock_context.check_hostname, expected_check)",
      "context": [
        "",
        "                    self.assertEqual(mock_context.verify_mode, expected_verify)",
        "                    self.assertEqual(mock_context.check_hostname, expected_check)",
        "",
        "    def test_ssl_socket_shutdown_edge_cases(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 390,
      "type": "Mock Implementation",
      "description": "mock_ssl_sock = Mock()",
      "context": [
        "        from websocket._core import WebSocket",
        "",
        "        mock_ssl_sock = Mock()",
        "        mock_ssl_sock.shutdown.side_effect = SSLError(\"SSL shutdown failed\")",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 391,
      "type": "Mock Implementation",
      "description": "mock_ssl_sock.shutdown.side_effect = SSLError(\"SSL shutdown failed\")",
      "context": [
        "",
        "        mock_ssl_sock = Mock()",
        "        mock_ssl_sock.shutdown.side_effect = SSLError(\"SSL shutdown failed\")",
        "",
        "        ws = WebSocket()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 394,
      "type": "Mock Implementation",
      "description": "ws.sock = mock_ssl_sock",
      "context": [
        "",
        "        ws = WebSocket()",
        "        ws.sock = mock_ssl_sock",
        "        ws.connected = True",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 405,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_socket_close_during_operation(self):",
        "        \"\"\"Test SSL socket being closed during ongoing operations\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Simulate SSL socket being closed during recv"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 407,
      "type": "Simulation",
      "description": "# Simulate SSL socket being closed during recv",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        # Simulate SSL socket being closed during recv",
        "        mock_sock.recv.side_effect = SSLError(",
        "            \"SSL connection has been closed unexpectedly\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 408,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.side_effect = SSLError(",
      "context": [
        "",
        "        # Simulate SSL socket being closed during recv",
        "        mock_sock.recv.side_effect = SSLError(",
        "            \"SSL connection has been closed unexpectedly\"",
        "        )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 411,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "            \"SSL connection has been closed unexpectedly\"",
        "        )",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        from websocket._exceptions import WebSocketConnectionClosedException"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 417,
      "type": "Mock Implementation",
      "description": "recv(mock_sock, 100)",
      "context": [
        "        # Should handle unexpected SSL closure",
        "        with self.assertRaises((SSLError, WebSocketConnectionClosedException)):",
        "            recv(mock_sock, 100)",
        "",
        "    def test_ssl_compression_edge_cases(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 421,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_compression_edge_cases(self):",
        "        \"\"\"Test SSL compression configuration edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 423,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 424,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 425,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 425,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 426,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            # Test SSL compression options (if available)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 426,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            # Test SSL compression options (if available)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 432,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"example.com\")",
      "context": [
        "",
        "            try:",
        "                _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "                # Should not fail even if compression option is not supported",
        "            except AttributeError:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 440,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_session_reuse_edge_cases(self):",
        "        \"\"\"Test SSL session reuse scenarios\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 442,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 443,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_ssl_sock = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 444,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_ssl_sock = Mock()",
        "            mock_context.wrap_socket.return_value = mock_ssl_sock"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 444,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_ssl_sock = Mock()",
        "            mock_context.wrap_socket.return_value = mock_ssl_sock"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 445,
      "type": "Mock Implementation",
      "description": "mock_ssl_sock = Mock()",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_ssl_sock = Mock()",
        "            mock_context.wrap_socket.return_value = mock_ssl_sock",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 446,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = mock_ssl_sock",
      "context": [
        "            mock_ssl_context.return_value = mock_context",
        "            mock_ssl_sock = Mock()",
        "            mock_context.wrap_socket.return_value = mock_ssl_sock",
        "",
        "            # Test session reuse"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 446,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = mock_ssl_sock",
      "context": [
        "            mock_ssl_context.return_value = mock_context",
        "            mock_ssl_sock = Mock()",
        "            mock_context.wrap_socket.return_value = mock_ssl_sock",
        "",
        "            # Test session reuse"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 449,
      "type": "Mock Implementation",
      "description": "mock_ssl_sock.session = \"mock_session\"",
      "context": [
        "",
        "            # Test session reuse",
        "            mock_ssl_sock.session = \"mock_session\"",
        "            mock_ssl_sock.session_reused = True",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 450,
      "type": "Mock Implementation",
      "description": "mock_ssl_sock.session_reused = True",
      "context": [
        "            # Test session reuse",
        "            mock_ssl_sock.session = \"mock_session\"",
        "            mock_ssl_sock.session_reused = True",
        "",
        "            result = _ssl_socket(mock_sock, {}, \"example.com\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 452,
      "type": "Mock Implementation",
      "description": "result = _ssl_socket(mock_sock, {}, \"example.com\")",
      "context": [
        "            mock_ssl_sock.session_reused = True",
        "",
        "            result = _ssl_socket(mock_sock, {}, \"example.com\")",
        "",
        "            # Should handle session reuse without issues"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 459,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_alpn_protocol_edge_cases(self):",
        "        \"\"\"Test SSL ALPN (Application Layer Protocol Negotiation) edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 461,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 462,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 463,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 463,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 464,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            # Test ALPN configuration"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 464,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            # Test ALPN configuration"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 471,
      "type": "Mock Implementation",
      "description": "result = _ssl_socket(mock_sock, sslopt, \"example.com\")",
      "context": [
        "            # ALPN protocols are not currently supported in the SSL wrapper",
        "            # but the test should not fail",
        "            result = _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "            self.assertIsNotNone(result)",
        "            # ALPN would need to be implemented in _wrap_sni_socket function"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 477,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_sni_edge_cases(self):",
        "        \"\"\"Test SSL SNI (Server Name Indication) edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Test with IPv6 address (should not use SNI)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 480,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "",
        "        # Test with IPv6 address (should not use SNI)",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 481,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "        # Test with IPv6 address (should not use SNI)",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 482,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 482,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 483,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            # IPv6 addresses should not be used for SNI"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 483,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.return_value = Mock()",
        "",
        "            # IPv6 addresses should not be used for SNI"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 487,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, {}, ipv6_hostname)",
      "context": [
        "            # IPv6 addresses should not be used for SNI",
        "            ipv6_hostname = \"2001:db8::1\"",
        "            _ssl_socket(mock_sock, {}, ipv6_hostname)",
        "",
        "            # Should use IPv6 address as server_hostname"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 490,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.assert_called_with(",
      "context": [
        "",
        "            # Should use IPv6 address as server_hostname",
        "            mock_context.wrap_socket.assert_called_with(",
        "                mock_sock,",
        "                do_handshake_on_connect=True,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 491,
      "type": "Mock Implementation",
      "description": "mock_sock,",
      "context": [
        "            # Should use IPv6 address as server_hostname",
        "            mock_context.wrap_socket.assert_called_with(",
        "                mock_sock,",
        "                do_handshake_on_connect=True,",
        "                suppress_ragged_eofs=True,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 499,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_buffer_size_edge_cases(self):",
        "        \"\"\"Test SSL buffer size related edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        def mock_recv(bufsize):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 501,
      "type": "Mock Method",
      "description": "def mock_recv(bufsize):",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        def mock_recv(bufsize):",
        "            # SSL should never try to read more than 16KB at once",
        "            if bufsize > 16384:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 501,
      "type": "Mock Method",
      "description": "def mock_recv(bufsize):",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        def mock_recv(bufsize):",
        "            # SSL should never try to read more than 16KB at once",
        "            if bufsize > 16384:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 507,
      "type": "Mock Implementation",
      "description": "mock_sock.recv.side_effect = mock_recv",
      "context": [
        "            return b\"A\" * min(bufsize, 1024)  # Return smaller chunks",
        "",
        "        mock_sock.recv.side_effect = mock_recv",
        "        mock_sock.gettimeout.return_value = 30.0",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 508,
      "type": "Mock Implementation",
      "description": "mock_sock.gettimeout.return_value = 30.0",
      "context": [
        "",
        "        mock_sock.recv.side_effect = mock_recv",
        "        mock_sock.gettimeout.return_value = 30.0",
        "",
        "        from websocket._abnf import frame_buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 513,
      "type": "Mock Implementation",
      "description": "fb = frame_buffer(lambda size: recv(mock_sock, size), skip_utf8_validation=True)",
      "context": [
        "",
        "        # Frame buffer should handle large requests by chunking",
        "        fb = frame_buffer(lambda size: recv(mock_sock, size), skip_utf8_validation=True)",
        "",
        "        # This should work even with large size due to chunking"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 522,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_protocol_downgrade_protection(self):",
        "        \"\"\"Test SSL protocol downgrade protection\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 524,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 525,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = ssl.SSLError("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 526,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = ssl.SSLError(",
        "                \"SSLV3_ALERT_HANDSHAKE_FAILURE\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 526,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = ssl.SSLError(",
        "                \"SSLV3_ALERT_HANDSHAKE_FAILURE\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 527,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.side_effect = ssl.SSLError(",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = ssl.SSLError(",
        "                \"SSLV3_ALERT_HANDSHAKE_FAILURE\"",
        "            )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 535,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"example.com\")",
      "context": [
        "            # Should propagate SSL protocol errors",
        "            with self.assertRaises(ssl.SSLError):",
        "                _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "",
        "    def test_ssl_certificate_chain_validation(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 539,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_certificate_chain_validation(self):",
        "        \"\"\"Test SSL certificate chain validation edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 541,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 542,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 543,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "",
        "            # Test certificate chain validation failure"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 543,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "",
        "            # Test certificate chain validation failure"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 546,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.side_effect = ssl.SSLCertVerificationError(",
      "context": [
        "",
        "            # Test certificate chain validation failure",
        "            mock_context.wrap_socket.side_effect = ssl.SSLCertVerificationError(",
        "                \"certificate verify failed: certificate has expired\"",
        "            )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 553,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"expired.badssl.com\")",
      "context": [
        "",
        "            with self.assertRaises(ssl.SSLCertVerificationError):",
        "                _ssl_socket(mock_sock, sslopt, \"expired.badssl.com\")",
        "",
        "    def test_ssl_weak_cipher_rejection(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 557,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_weak_cipher_rejection(self):",
        "        \"\"\"Test SSL weak cipher rejection scenarios\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 559,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "        mock_sock = Mock()",
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 560,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "",
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = ssl.SSLError(\"no shared cipher\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 561,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = ssl.SSLError(\"no shared cipher\")",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 561,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "        with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = ssl.SSLError(\"no shared cipher\")",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 562,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.side_effect = ssl.SSLError(\"no shared cipher\")",
      "context": [
        "            mock_context = Mock()",
        "            mock_ssl_context.return_value = mock_context",
        "            mock_context.wrap_socket.side_effect = ssl.SSLError(\"no shared cipher\")",
        "",
        "            sslopt = {\"ciphers\": \"RC4-MD5\"}  # Intentionally weak cipher"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 568,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, \"example.com\")",
      "context": [
        "            # Should fail with weak ciphers (SSL error is not wrapped by our code)",
        "            with self.assertRaises(ssl.SSLError):",
        "                _ssl_socket(mock_sock, sslopt, \"example.com\")",
        "",
        "    def test_ssl_hostname_verification_edge_cases(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 572,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_hostname_verification_edge_cases(self):",
        "        \"\"\"Test SSL hostname verification edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Test with wildcard certificate scenarios"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 583,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "        for cert_hostname, connect_hostname in test_cases:",
        "            with self.subTest(cert=cert_hostname, hostname=connect_hostname):",
        "                with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 584,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "            with self.subTest(cert=cert_hostname, hostname=connect_hostname):",
        "                with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 585,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "                with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context",
        "",
        "                    if ("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 585,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "                with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context",
        "",
        "                    if ("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 591,
      "type": "Simulation",
      "description": "# Simulate hostname verification failure for invalid wildcard",
      "context": [
        "                        and \"sub.subdomain\" in connect_hostname",
        "                    ):",
        "                        # Simulate hostname verification failure for invalid wildcard",
        "                        mock_context.wrap_socket.side_effect = ssl.SSLCertVerificationError(",
        "                            f\"hostname '{connect_hostname}' doesn't match '{cert_hostname}'\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 592,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.side_effect = ssl.SSLCertVerificationError(",
      "context": [
        "                    ):",
        "                        # Simulate hostname verification failure for invalid wildcard",
        "                        mock_context.wrap_socket.side_effect = ssl.SSLCertVerificationError(",
        "                            f\"hostname '{connect_hostname}' doesn't match '{cert_hostname}'\"",
        "                        )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 602,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, sslopt, connect_hostname)",
      "context": [
        "",
        "                        with self.assertRaises(ssl.SSLCertVerificationError):",
        "                            _ssl_socket(mock_sock, sslopt, connect_hostname)",
        "                    else:",
        "                        mock_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 604,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "                            _ssl_socket(mock_sock, sslopt, connect_hostname)",
        "                    else:",
        "                        mock_context.wrap_socket.return_value = Mock()",
        "                        sslopt = {",
        "                            \"cert_reqs\": ssl.CERT_REQUIRED,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 604,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "                            _ssl_socket(mock_sock, sslopt, connect_hostname)",
        "                    else:",
        "                        mock_context.wrap_socket.return_value = Mock()",
        "                        sslopt = {",
        "                            \"cert_reqs\": ssl.CERT_REQUIRED,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 611,
      "type": "Mock Implementation",
      "description": "result = _ssl_socket(mock_sock, sslopt, connect_hostname)",
      "context": [
        "",
        "                        # Should succeed for valid cases",
        "                        result = _ssl_socket(mock_sock, sslopt, connect_hostname)",
        "                        self.assertIsNotNone(result)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 616,
      "type": "Mock Implementation",
      "description": "mock_sock = Mock()",
      "context": [
        "    def test_ssl_memory_bio_edge_cases(self):",
        "        \"\"\"Test SSL memory BIO edge cases\"\"\"",
        "        mock_sock = Mock()",
        "",
        "        # Test SSL memory BIO scenarios (if available)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 623,
      "type": "Mock Implementation",
      "description": "with patch(\"ssl.SSLContext\") as mock_ssl_context:",
      "context": [
        "",
        "            if hasattr(ssl, \"MemoryBIO\"):",
        "                with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 624,
      "type": "Mock Implementation",
      "description": "mock_context = Mock()",
      "context": [
        "            if hasattr(ssl, \"MemoryBIO\"):",
        "                with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context",
        "                    mock_context.wrap_socket.return_value = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 625,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "                with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context",
        "                    mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 625,
      "type": "Mock Implementation",
      "description": "mock_ssl_context.return_value = mock_context",
      "context": [
        "                with patch(\"ssl.SSLContext\") as mock_ssl_context:",
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context",
        "                    mock_context.wrap_socket.return_value = Mock()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 626,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context",
        "                    mock_context.wrap_socket.return_value = Mock()",
        "",
        "                    # Memory BIO should work if available"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 626,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.return_value = Mock()",
      "context": [
        "                    mock_context = Mock()",
        "                    mock_ssl_context.return_value = mock_context",
        "                    mock_context.wrap_socket.return_value = Mock()",
        "",
        "                    # Memory BIO should work if available"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 629,
      "type": "Mock Implementation",
      "description": "_ssl_socket(mock_sock, {}, \"example.com\")",
      "context": [
        "",
        "                    # Memory BIO should work if available",
        "                    _ssl_socket(mock_sock, {}, \"example.com\")",
        "",
        "                    # Standard socket wrapping should still work"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_ssl_edge_cases.py",
      "line": 632,
      "type": "Mock Implementation",
      "description": "mock_context.wrap_socket.assert_called_once()",
      "context": [
        "",
        "                    # Standard socket wrapping should still work",
        "                    mock_context.wrap_socket.assert_called_once()",
        "        except (ImportError, AttributeError):",
        "            self.skipTest(\"SSL MemoryBIO not available\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_utils.py",
      "line": 61,
      "type": "Mock Implementation",
      "description": "# Mock wsaccel import to raise ImportError",
      "context": [
        "            del sys.modules[\"websocket._utils\"]",
        "",
        "        # Mock wsaccel import to raise ImportError",
        "        import builtins",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_utils.py",
      "line": 66,
      "type": "Mock Method",
      "description": "def mock_import(name, *args, **kwargs):",
      "context": [
        "        original_import = builtins.__import__",
        "",
        "        def mock_import(name, *args, **kwargs):",
        "            if \"wsaccel\" in name:",
        "                raise ImportError(f\"No module named '{name}'\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_utils.py",
      "line": 66,
      "type": "Mock Method",
      "description": "def mock_import(name, *args, **kwargs):",
      "context": [
        "        original_import = builtins.__import__",
        "",
        "        def mock_import(name, *args, **kwargs):",
        "            if \"wsaccel\" in name:",
        "                raise ImportError(f\"No module named '{name}'\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_utils.py",
      "line": 71,
      "type": "Mock Implementation",
      "description": "with patch(\"builtins.__import__\", side_effect=mock_import):",
      "context": [
        "            return original_import(name, *args, **kwargs)",
        "",
        "        with patch(\"builtins.__import__\", side_effect=mock_import):",
        "            import websocket._utils as utils",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_websocket.py",
      "line": 59,
      "type": "Mock Class",
      "description": "class SockMock:",
      "context": [
        "",
        "",
        "class SockMock:",
        "    def __init__(self):",
        "        self.data = []"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/websocket/tests/test_websocket.py",
      "line": 87,
      "type": "Mock Class",
      "description": "class HeaderSockMock(SockMock):",
      "context": [
        "",
        "",
        "class HeaderSockMock(SockMock):",
        "    def __init__(self, fname):",
        "        SockMock.__init__(self)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/redis/commands/core.py",
      "line": 76,
      "type": "Simulation",
      "description": "Simulate the execution of a given command by a given ``username``.",
      "context": [
        "    def acl_dryrun(self, username, *args, **kwargs):",
        "        \"\"\"",
        "        Simulate the execution of a given command by a given ``username``.",
        "",
        "        For more information see https://redis.io/commands/acl-dryrun"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pip/_vendor/requests/cookies.py",
      "line": 23,
      "type": "Mock Class",
      "description": "class MockRequest:",
      "context": [
        "",
        "",
        "class MockRequest:",
        "    \"\"\"Wraps a `requests.Request` to mimic a `urllib2.Request`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pip/_vendor/requests/cookies.py",
      "line": 103,
      "type": "Mock Class",
      "description": "class MockResponse:",
      "context": [
        "",
        "",
        "class MockResponse:",
        "    \"\"\"Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pip/_vendor/requests/models.py",
      "line": 845,
      "type": "Simulation",
      "description": "# simulate reading small chunks of the content",
      "context": [
        "                f\"chunk_size must be an int, it is instead a {type(chunk_size)}.\"",
        "            )",
        "        # simulate reading small chunks of the content",
        "        reused_chunks = iter_slices(self._content, chunk_size)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pip/_internal/operations/check.py",
      "line": 113,
      "type": "Simulation",
      "description": "would_be_installed = _simulate_installation_of(to_install, package_set)",
      "context": [
        "    package_set, _ = create_package_set_from_installed()",
        "    # Install packages",
        "    would_be_installed = _simulate_installation_of(to_install, package_set)",
        "",
        "    # Only warn about directly-dependent packages; create a whitelist of them"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pip/_internal/operations/check.py",
      "line": 142,
      "type": "Mock Method",
      "description": "def _simulate_installation_of(",
      "context": [
        "",
        "",
        "def _simulate_installation_of(",
        "    to_install: list[InstallRequirement], package_set: PackageSet",
        ") -> set[NormalizedName]:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pip/_internal/utils/misc.py",
      "line": 386,
      "type": "Simulation",
      "description": "# Simulates an enum",
      "context": [
        "",
        "",
        "# Simulates an enum",
        "def enum(*sequential: Any, **named: Any) -> type[Any]:",
        "    enums = dict(zip(sequential, range(len(sequential))), **named)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pbr/tests/test_packaging.py",
      "line": 241,
      "type": "Mock Implementation",
      "description": "mocked_open = mock.mock_open()",
      "context": [
        "",
        "    def test_email_parsing_errors_are_handled(self):",
        "        mocked_open = mock.mock_open()",
        "        with mock.patch('pbr.packaging.open', mocked_open):",
        "            with mock.patch('email.message_from_file') as message_from_file:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pbr/tests/test_pbr_json.py",
      "line": 31,
      "type": "Mock Method",
      "description": "def test_content(self, mock_get_is, mock_get_git, mock_run):",
      "context": [
        "    @mock.patch('pbr.git.get_git_short_sha', return_value=\"123456\")",
        "    @mock.patch('pbr.git.get_is_release', return_value=True)",
        "    def test_content(self, mock_get_is, mock_get_git, mock_run):",
        "        cmd = mock.Mock()",
        "        pbr_json.write_pbr_json(cmd, \"basename\", \"pbr.json\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pbr/tests/test_pbr_json.py",
      "line": 31,
      "type": "Mock Method",
      "description": "def test_content(self, mock_get_is, mock_get_git, mock_run):",
      "context": [
        "    @mock.patch('pbr.git.get_git_short_sha', return_value=\"123456\")",
        "    @mock.patch('pbr.git.get_is_release', return_value=True)",
        "    def test_content(self, mock_get_is, mock_get_git, mock_run):",
        "        cmd = mock.Mock()",
        "        pbr_json.write_pbr_json(cmd, \"basename\", \"pbr.json\")"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/command/editable_wheel.py",
      "line": 576,
      "type": "Simulation",
      "description": "This function tries to simulate this behavior without having to create an",
      "context": [
        "    from the cpython core developers is to write them as ``open(path, \"w\")``",
        "    and ignore warnings (see python/cpython#77102, pypa/setuptools#3937).",
        "    This function tries to simulate this behavior without having to create an",
        "    actual file, in a way that supports a range of active Python versions.",
        "    (There seems to be some variety in the way different version of Python handle"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 14,
      "type": "Mock Method",
      "description": "def test_build_libraries(self, mock_newer):",
      "context": [
        "class TestBuildCLib:",
        "    @mock.patch('setuptools.command.build_clib.newer_pairwise_group')",
        "    def test_build_libraries(self, mock_newer):",
        "        dist = Distribution()",
        "        cmd = build_clib(dist)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 14,
      "type": "Mock Method",
      "description": "def test_build_libraries(self, mock_newer):",
      "context": [
        "class TestBuildCLib:",
        "    @mock.patch('setuptools.command.build_clib.newer_pairwise_group')",
        "    def test_build_libraries(self, mock_newer):",
        "        dist = Distribution()",
        "        cmd = build_clib(dist)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 42,
      "type": "Mock Implementation",
      "description": "mock_newer.return_value = ([], [])",
      "context": [
        "        # system works",
        "        cmd.compiler = mock.MagicMock(spec=cmd.compiler)",
        "        mock_newer.return_value = ([], [])",
        "",
        "        obj_deps = {'': ('global.h',), 'example.c': ('example.h',)}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 48,
      "type": "Mock Implementation",
      "description": "assert [['example.c', 'global.h', 'example.h']] in mock_newer.call_args[0]",
      "context": [
        "",
        "        cmd.build_libraries(libs)",
        "        assert [['example.c', 'global.h', 'example.h']] in mock_newer.call_args[0]",
        "        assert not cmd.compiler.compile.called",
        "        assert cmd.compiler.create_static_lib.call_count == 1"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 55,
      "type": "Mock Implementation",
      "description": "mock_newer.return_value = ''  # anything as long as it's not ([],[])",
      "context": [
        "        cmd.compiler.reset_mock()",
        "",
        "        mock_newer.return_value = ''  # anything as long as it's not ([],[])",
        "        cmd.build_libraries(libs)",
        "        assert cmd.compiler.compile.call_count == 1"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 61,
      "type": "Mock Method",
      "description": "def test_build_libraries_reproducible(self, mock_newer):",
      "context": [
        "",
        "    @mock.patch('setuptools.command.build_clib.newer_pairwise_group')",
        "    def test_build_libraries_reproducible(self, mock_newer):",
        "        dist = Distribution()",
        "        cmd = build_clib(dist)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 61,
      "type": "Mock Method",
      "description": "def test_build_libraries_reproducible(self, mock_newer):",
      "context": [
        "",
        "    @mock.patch('setuptools.command.build_clib.newer_pairwise_group')",
        "    def test_build_libraries_reproducible(self, mock_newer):",
        "        dist = Distribution()",
        "        cmd = build_clib(dist)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 68,
      "type": "Mock Implementation",
      "description": "mock_newer.return_value = ([], [])",
      "context": [
        "        # system works",
        "        cmd.compiler = mock.MagicMock(spec=cmd.compiler)",
        "        mock_newer.return_value = ([], [])",
        "",
        "        original_sources = ['a-example.c', 'example.c']"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 77,
      "type": "Mock Implementation",
      "description": "computed_call_args = mock_newer.call_args[0]",
      "context": [
        "",
        "        cmd.build_libraries(libs)",
        "        computed_call_args = mock_newer.call_args[0]",
        "",
        "        while sources == original_sources:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
      "line": 84,
      "type": "Mock Implementation",
      "description": "assert computed_call_args == mock_newer.call_args[0]",
      "context": [
        "",
        "        cmd.build_libraries(libs)",
        "        assert computed_call_args == mock_newer.call_args[0]",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_build_ext.py",
      "line": 72,
      "type": "Mock Implementation",
      "description": "# Mock value needed to pass tests",
      "context": [
        "            py_limited_api=True,",
        "        )",
        "        # Mock value needed to pass tests",
        "        ext._links_to_dynamic = False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 92,
      "type": "Simulation",
      "description": "# Simulate a pre-existing `build` directory",
      "context": [
        "        _populate_project_dir(tmp_path, files, options)",
        "",
        "        # Simulate a pre-existing `build` directory",
        "        (tmp_path / \"build\").mkdir()",
        "        (tmp_path / \"build/lib\").mkdir()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 196,
      "type": "Simulation",
      "description": "([\"venv/bin/simulate_venv\"], {\"pkg\"}),",
      "context": [
        "        (\"extra_files\", \"pkgs\"),",
        "        [",
        "            ([\"venv/bin/simulate_venv\"], {\"pkg\"}),",
        "            ([\"pkg-stubs/__init__.pyi\"], {\"pkg\", \"pkg-stubs\"}),",
        "            ([\"other-stubs/__init__.pyi\"], {\"pkg\", \"other-stubs\"}),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 334,
      "type": "Mock Method",
      "description": "def _simulate_package_with_extension(self, tmp_path):",
      "context": [
        "",
        "class TestWithCExtension:",
        "    def _simulate_package_with_extension(self, tmp_path):",
        "        # This example is based on: https://github.com/nucleic/kiwi/tree/1.4.0",
        "        files = ["
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 371,
      "type": "Simulation",
      "description": "self._simulate_package_with_extension(tmp_path)",
      "context": [
        "        C-extensions only, for backward compatibility.",
        "        \"\"\"",
        "        self._simulate_package_with_extension(tmp_path)",
        "",
        "        pyproject = \"\"\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 403,
      "type": "Simulation",
      "description": "self._simulate_package_with_extension(tmp_path)",
      "context": [
        "        explicitly set ``packages`` or ``py-modules``.",
        "        \"\"\"",
        "        self._simulate_package_with_extension(tmp_path)",
        "",
        "        pyproject = \"\"\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 416,
      "type": "Mock Method",
      "description": "def _simulate_package_with_data_files(self, tmp_path, src_root):",
      "context": [
        "",
        "class TestWithPackageData:",
        "    def _simulate_package_with_data_files(self, tmp_path, src_root):",
        "        files = [",
        "            f\"{src_root}/proj/__init__.py\","
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 491,
      "type": "Simulation",
      "description": "self._simulate_package_with_data_files(tmp_path, src_root)",
      "context": [
        "        \"\"\"",
        "        jaraco.path.build(files, prefix=str(tmp_path))",
        "        self._simulate_package_with_data_files(tmp_path, src_root)",
        "",
        "        expected = {"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_core_metadata.py",
      "line": 486,
      "type": "Simulation",
      "description": "# ... but then we simulate the effects of a plugin modifying the distribution",
      "context": [
        "        dist = _makedist()",
        "",
        "        # ... but then we simulate the effects of a plugin modifying the distribution",
        "        for attr, value in fields.values():",
        "            # `dist` and `dist.metadata` are complicated..."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_editable_install.py",
      "line": 1200,
      "type": "Simulation",
      "description": "SimulatedErr = type(\"SimulatedErr\", (Exception,), {})",
      "context": [
        "    cmd.ensure_finalized()",
        "",
        "    SimulatedErr = type(\"SimulatedErr\", (Exception,), {})",
        "    simulated_failure = Mock(side_effect=SimulatedErr())",
        "    monkeypatch.setattr(cmd, \"get_finalized_command\", simulated_failure)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_editable_install.py",
      "line": 1201,
      "type": "Simulation",
      "description": "simulated_failure = Mock(side_effect=SimulatedErr())",
      "context": [
        "",
        "    SimulatedErr = type(\"SimulatedErr\", (Exception,), {})",
        "    simulated_failure = Mock(side_effect=SimulatedErr())",
        "    monkeypatch.setattr(cmd, \"get_finalized_command\", simulated_failure)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_editable_install.py",
      "line": 1202,
      "type": "Simulation",
      "description": "monkeypatch.setattr(cmd, \"get_finalized_command\", simulated_failure)",
      "context": [
        "    SimulatedErr = type(\"SimulatedErr\", (Exception,), {})",
        "    simulated_failure = Mock(side_effect=SimulatedErr())",
        "    monkeypatch.setattr(cmd, \"get_finalized_command\", simulated_failure)",
        "",
        "    with pytest.raises(SimulatedErr) as ctx:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_editable_install.py",
      "line": 1204,
      "type": "Simulation",
      "description": "with pytest.raises(SimulatedErr) as ctx:",
      "context": [
        "    monkeypatch.setattr(cmd, \"get_finalized_command\", simulated_failure)",
        "",
        "    with pytest.raises(SimulatedErr) as ctx:",
        "        cmd.run()",
        "    assert any('debugging-tips' in note for note in ctx.value.__notes__)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/test_manifest.py",
      "line": 378,
      "type": "Simulation",
      "description": "# simulated file list",
      "context": [
        "        ml = make_local_path",
        "",
        "        # simulated file list",
        "        self.make_files([",
        "            'foo.tmp',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line": 39,
      "type": "Mock Method",
      "description": "def _mock_expand_patterns(patterns, *_, **__):",
      "context": [
        "",
        "",
        "def _mock_expand_patterns(patterns, *_, **__):",
        "    \"\"\"",
        "    Allow comparing the given patterns for 2 dist objects."
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line": 39,
      "type": "Mock Method",
      "description": "def _mock_expand_patterns(patterns, *_, **__):",
      "context": [
        "",
        "",
        "def _mock_expand_patterns(patterns, *_, **__):",
        "    \"\"\"",
        "    Allow comparing the given patterns for 2 dist objects."
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line": 53,
      "type": "Mock Implementation",
      "description": "Distribution, \"_expand_patterns\", Mock(side_effect=_mock_expand_patterns)",
      "context": [
        "    monkeypatch.setattr(expand, \"read_attr\", Mock(return_value=\"0.0.1\"))",
        "    monkeypatch.setattr(",
        "        Distribution, \"_expand_patterns\", Mock(side_effect=_mock_expand_patterns)",
        "    )",
        "    setupcfg_example = retrieve_file(url)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/config/test_setupcfg.py",
      "line": 958,
      "type": "Simulation",
      "description": "# This wraps distutil's Distribution.__init__ and simulates",
      "context": [
        "    # that may set a range of variables.",
        "    #",
        "    # This wraps distutil's Distribution.__init__ and simulates",
        "    # pbr or something else setting these values.",
        "    def _fake_distribution_init(self, dist, attrs):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/config/test_setupcfg.py",
      "line": 971,
      "type": "Mock Method",
      "description": "def test_external_setters(self, mock_parent_init, tmpdir):",
      "context": [
        "",
        "    @patch.object(_Distribution, '__init__', autospec=True)",
        "    def test_external_setters(self, mock_parent_init, tmpdir):",
        "        mock_parent_init.side_effect = self._fake_distribution_init",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/config/test_setupcfg.py",
      "line": 971,
      "type": "Mock Method",
      "description": "def test_external_setters(self, mock_parent_init, tmpdir):",
      "context": [
        "",
        "    @patch.object(_Distribution, '__init__', autospec=True)",
        "    def test_external_setters(self, mock_parent_init, tmpdir):",
        "        mock_parent_init.side_effect = self._fake_distribution_init",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/config/test_setupcfg.py",
      "line": 972,
      "type": "Mock Implementation",
      "description": "mock_parent_init.side_effect = self._fake_distribution_init",
      "context": [
        "    @patch.object(_Distribution, '__init__', autospec=True)",
        "    def test_external_setters(self, mock_parent_init, tmpdir):",
        "        mock_parent_init.side_effect = self._fake_distribution_init",
        "",
        "        dist = Distribution(attrs={'project_urls': {'will_be': 'ignored'}})"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/tests/integration/test_pip_install_sdist.py",
      "line": 136,
      "type": "Simulation",
      "description": "# Use a virtualenv to simulate PEP 517 isolation",
      "context": [
        "        run([*venv_pip, \"install\", *deps])",
        "",
        "    # Use a virtualenv to simulate PEP 517 isolation",
        "    # but install fresh setuptools wheel to ensure the version under development",
        "    env = EXTRA_ENV_VARS.get(package, {})"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/_vendor/typeguard/_checkers.py",
      "line": 831,
      "type": "Mock Class",
      "description": "if annotation is Any or annotation is SubclassableAny or isinstance(value, Mock):",
      "context": [
        "            return",
        "",
        "    if annotation is Any or annotation is SubclassableAny or isinstance(value, Mock):",
        "        return",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_filelist.py",
      "line": 71,
      "type": "Simulation",
      "description": "# simulated file list",
      "context": [
        "        mlp = make_local_path",
        "",
        "        # simulated file list",
        "        file_list.allfiles = [",
        "            'foo.tmp',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 268,
      "type": "Mock Implementation",
      "description": "mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
      "context": [
        "        sysconfig.get_config_vars = gcvs",
        "        with (",
        "            mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
        "            mock.patch.object(self.cc, '_need_link', return_value=True),",
        "            mock.patch.object(self.cc, 'mkpath', return_value=None),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 268,
      "type": "Mock Implementation",
      "description": "mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
      "context": [
        "        sysconfig.get_config_vars = gcvs",
        "        with (",
        "            mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
        "            mock.patch.object(self.cc, '_need_link', return_value=True),",
        "            mock.patch.object(self.cc, 'mkpath', return_value=None),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 281,
      "type": "Mock Implementation",
      "description": "call_args = mock_spawn.call_args[0][0]",
      "context": [
        "            assert self.cc.linker_exe_cxx[0:2] == ['ccache', 'g++-4.2']",
        "            self.cc.link(None, [], 'a.out', target_lang='c++')",
        "            call_args = mock_spawn.call_args[0][0]",
        "            expected = ['ccache', 'g++-4.2', '-bundle', '-undefined', 'dynamic_lookup']",
        "            assert call_args[:5] == expected"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 286,
      "type": "Mock Implementation",
      "description": "call_args = mock_spawn.call_args[0][0]",
      "context": [
        "",
        "            self.cc.link_executable([], 'a.out', target_lang='c++')",
        "            call_args = mock_spawn.call_args[0][0]",
        "            expected = ['ccache', 'g++-4.2', '-o', self.cc.executable_filename('a.out')]",
        "            assert call_args[:4] == expected"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 296,
      "type": "Mock Implementation",
      "description": "call_args = mock_spawn.call_args[0][0]",
      "context": [
        "            assert self.cc.linker_exe_cxx[0:2] == ['wrapper', 'g++-4.2']",
        "            self.cc.link(None, [], 'a.out', target_lang='c++')",
        "            call_args = mock_spawn.call_args[0][0]",
        "            expected = ['wrapper', 'g++-4.2', '-bundle', '-undefined', 'dynamic_lookup']",
        "            assert call_args[:5] == expected"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 301,
      "type": "Mock Implementation",
      "description": "call_args = mock_spawn.call_args[0][0]",
      "context": [
        "",
        "            self.cc.link_executable([], 'a.out', target_lang='c++')",
        "            call_args = mock_spawn.call_args[0][0]",
        "            expected = [",
        "                'wrapper',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 339,
      "type": "Mock Implementation",
      "description": "mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
      "context": [
        "        sysconfig.get_config_vars = gcvs",
        "        with (",
        "            mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
        "            mock.patch.object(self.cc, '_need_link', return_value=True),",
        "            mock.patch.object(self.cc, 'mkpath', return_value=None),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 339,
      "type": "Mock Implementation",
      "description": "mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
      "context": [
        "        sysconfig.get_config_vars = gcvs",
        "        with (",
        "            mock.patch.object(self.cc, 'spawn', return_value=None) as mock_spawn,",
        "            mock.patch.object(self.cc, '_need_link', return_value=True),",
        "            mock.patch.object(self.cc, 'mkpath', return_value=None),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_unix.py",
      "line": 350,
      "type": "Mock Implementation",
      "description": "call_args = mock_spawn.call_args[0][0]",
      "context": [
        "            assert self.cc.linker_so[0:2] == ['ccache', 'my_cc']",
        "            self.cc.link(None, [], 'a.out', target_lang='c++')",
        "            call_args = mock_spawn.call_args[0][0]",
        "            expected = ['my_cxx', '-bundle', '-undefined', 'dynamic_lookup']",
        "            assert call_args[:4] == expected"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pkg_resources/tests/test_markers.py",
      "line": 7,
      "type": "Mock Method",
      "description": "def test_ordering(python_version_mock):",
      "context": [
        "",
        "@mock.patch('platform.python_version', return_value='2.7.10')",
        "def test_ordering(python_version_mock):",
        "    assert evaluate_marker(\"python_full_version > '2.7.3'\") is True",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/vulture/whitelists/whitelist_utils.py",
      "line": 22,
      "type": "Mock Class",
      "description": "Helper class that allows mocking Python objects.",
      "context": [
        "class Whitelist:",
        "    \"\"\"",
        "    Helper class that allows mocking Python objects.",
        "",
        "    Use it to create whitelist files that are not only syntactically"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pylint/testutils/configuration_test.py",
      "line": 138,
      "type": "Simulation",
      "description": "\"\"\"Simulate a run with a configuration without really launching the checks.\"\"\"",
      "context": [
        "    configuration_path: Path | str, file_to_lint: str = __file__",
        ") -> Run:",
        "    \"\"\"Simulate a run with a configuration without really launching the checks.\"\"\"",
        "    configuration_path = str(configuration_path)",
        "    args = [\"--rcfile\", configuration_path, file_to_lint]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/conftest.py",
      "line": 8,
      "type": "Mock Method",
      "description": "def log_mock(mocker):",
      "context": [
        "",
        "@pytest.fixture",
        "def log_mock(mocker):",
        "    return mocker.patch('radon.cli.log_result')",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/conftest.py",
      "line": 9,
      "type": "Mock Implementation",
      "description": "return mocker.patch('radon.cli.log_result')",
      "context": [
        "@pytest.fixture",
        "def log_mock(mocker):",
        "    return mocker.patch('radon.cli.log_result')",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 69,
      "type": "Mock Method",
      "description": "def test_config_converts_types(mocker):",
      "context": [
        "",
        "",
        "def test_config_converts_types(mocker):",
        "    test_config = ConfigParser()",
        "    test_config.read_string("
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 89,
      "type": "Mock Method",
      "description": "def test_cc(mocker, log_mock):",
      "context": [
        "",
        "",
        "def test_cc(mocker, log_mock):",
        "    harv_mock = mocker.patch('radon.cli.CCHarvester')",
        "    harv_mock.return_value = mocker.sentinel.harvester"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 91,
      "type": "Mock Implementation",
      "description": "harv_mock.return_value = mocker.sentinel.harvester",
      "context": [
        "def test_cc(mocker, log_mock):",
        "    harv_mock = mocker.patch('radon.cli.CCHarvester')",
        "    harv_mock.return_value = mocker.sentinel.harvester",
        "",
        "    cli.cc(['-'], json=True)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 122,
      "type": "Mock Method",
      "description": "def test_raw(mocker, log_mock):",
      "context": [
        "",
        "",
        "def test_raw(mocker, log_mock):",
        "    harv_mock = mocker.patch('radon.cli.RawHarvester')",
        "    harv_mock.return_value = mocker.sentinel.harvester"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 124,
      "type": "Mock Implementation",
      "description": "harv_mock.return_value = mocker.sentinel.harvester",
      "context": [
        "def test_raw(mocker, log_mock):",
        "    harv_mock = mocker.patch('radon.cli.RawHarvester')",
        "    harv_mock.return_value = mocker.sentinel.harvester",
        "",
        "    cli.raw(['-'], summary=True, json=True)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 143,
      "type": "Mock Method",
      "description": "def test_mi(mocker, log_mock):",
      "context": [
        "",
        "",
        "def test_mi(mocker, log_mock):",
        "    harv_mock = mocker.patch('radon.cli.MIHarvester')",
        "    harv_mock.return_value = mocker.sentinel.harvester"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 145,
      "type": "Mock Implementation",
      "description": "harv_mock.return_value = mocker.sentinel.harvester",
      "context": [
        "def test_mi(mocker, log_mock):",
        "    harv_mock = mocker.patch('radon.cli.MIHarvester')",
        "    harv_mock.return_value = mocker.sentinel.harvester",
        "",
        "    cli.mi(['-'], show=True, multi=False)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 168,
      "type": "Mock Method",
      "description": "def test_encoding(mocker, log_mock):",
      "context": [
        "",
        "",
        "def test_encoding(mocker, log_mock):",
        "    mi_cfg = cli.Config(**BASE_CONFIG.config_values)",
        "    mi_cfg.config_values.update(MI_CONFIG.config_values)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 197,
      "type": "Mock Method",
      "description": "def stdout_mock(mocker):",
      "context": [
        "",
        "@pytest.fixture",
        "def stdout_mock(mocker):",
        "    return mocker.patch('radon.cli.sys.stdout.write')",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 198,
      "type": "Mock Implementation",
      "description": "return mocker.patch('radon.cli.sys.stdout.write')",
      "context": [
        "@pytest.fixture",
        "def stdout_mock(mocker):",
        "    return mocker.patch('radon.cli.sys.stdout.write')",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 201,
      "type": "Mock Method",
      "description": "def test_log(mocker, stdout_mock):",
      "context": [
        "",
        "",
        "def test_log(mocker, stdout_mock):",
        "    cli.log('msg')",
        "    cli.log('msg', indent=1)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 218,
      "type": "Mock Method",
      "description": "def test_log_list(stdout_mock):",
      "context": [
        "",
        "",
        "def test_log_list(stdout_mock):",
        "    cli.log_list([])",
        "    cli.log_list(['msg'])"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 225,
      "type": "Mock Method",
      "description": "def test_log_error(mocker, stdout_mock):",
      "context": [
        "",
        "",
        "def test_log_error(mocker, stdout_mock):",
        "    reset_mock = mocker.patch('radon.cli.RESET')",
        "    red_mock = mocker.patch('radon.cli.RED')"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 239,
      "type": "Mock Method",
      "description": "def test_log_result(mocker, stdout_mock):",
      "context": [
        "",
        "",
        "def test_log_result(mocker, stdout_mock):",
        "    le_mock = mocker.patch('radon.cli.log_error')",
        "    ll_mock = mocker.patch('radon.cli.log_list')"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 245,
      "type": "Mock Implementation",
      "description": "h.as_json.return_value = mocker.sentinel.json",
      "context": [
        "",
        "    h = mocker.Mock(spec=Harvester)",
        "    h.as_json.return_value = mocker.sentinel.json",
        "    h.as_xml.return_value = mocker.sentinel.xml",
        "    h.as_md.return_value = mocker.sentinel.md"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 246,
      "type": "Mock Implementation",
      "description": "h.as_xml.return_value = mocker.sentinel.xml",
      "context": [
        "    h = mocker.Mock(spec=Harvester)",
        "    h.as_json.return_value = mocker.sentinel.json",
        "    h.as_xml.return_value = mocker.sentinel.xml",
        "    h.as_md.return_value = mocker.sentinel.md",
        "    h.to_terminal.side_effect = fake_to_terminal"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli.py",
      "line": 247,
      "type": "Mock Implementation",
      "description": "h.as_md.return_value = mocker.sentinel.md",
      "context": [
        "    h.as_json.return_value = mocker.sentinel.json",
        "    h.as_xml.return_value = mocker.sentinel.xml",
        "    h.as_md.return_value = mocker.sentinel.md",
        "    h.to_terminal.side_effect = fake_to_terminal",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_colors.py",
      "line": 14,
      "type": "Mock Method",
      "description": "def test_color_enabled_auto(monkeypatch, mocker):",
      "context": [
        "",
        "",
        "def test_color_enabled_auto(monkeypatch, mocker):",
        "    monkeypatch.setenv(\"COLOR\", \"auto\")",
        "    isatty_mock = mocker.patch('sys.stdout.isatty')"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_harvest.py",
      "line": 69,
      "type": "Mock Method",
      "description": "def test_base_iter_filenames(base_config, mocker):",
      "context": [
        "",
        "",
        "def test_base_iter_filenames(base_config, mocker):",
        "    iter_mock = mocker.patch('radon.cli.harvest.iter_filenames')",
        "    h = harvest.Harvester([], base_config)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_harvest.py",
      "line": 127,
      "type": "Mock Method",
      "description": "def test_cc_gobble(cc_config, mocker):",
      "context": [
        "",
        "",
        "def test_cc_gobble(cc_config, mocker):",
        "    sr_mock = mocker.patch('radon.cli.harvest.sorted_results')",
        "    cc_mock = mocker.patch('radon.cli.harvest.cc_visit')"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_harvest.py",
      "line": 132,
      "type": "Mock Implementation",
      "description": "fobj.read.return_value = mocker.sentinel.one",
      "context": [
        "    cc_mock.return_value = []",
        "    fobj = mocker.MagicMock()",
        "    fobj.read.return_value = mocker.sentinel.one",
        "",
        "    h = harvest.CCHarvester([], cc_config)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_harvest.py",
      "line": 145,
      "type": "Mock Method",
      "description": "def test_cc_to_dicts(cc_config, mocker):",
      "context": [
        "",
        "",
        "def test_cc_to_dicts(cc_config, mocker):",
        "    c2d_mock = mocker.patch('radon.cli.harvest.cc_to_dict')",
        "    c2d_mock.side_effect = lambda i: i"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_harvest.py",
      "line": 164,
      "type": "Mock Method",
      "description": "def test_cc_as_json_xml(cc_config, mocker):",
      "context": [
        "",
        "",
        "def test_cc_as_json_xml(cc_config, mocker):",
        "    d2x_mock = mocker.patch('radon.cli.harvest.dict_to_xml')",
        "    to_dicts_mock = mocker.MagicMock()"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_harvest.py",
      "line": 179,
      "type": "Mock Method",
      "description": "def test_cc_as_md(cc_config, mocker):",
      "context": [
        "",
        "",
        "def test_cc_as_md(cc_config, mocker):",
        "    d2md_mock = mocker.patch('radon.cli.harvest.dict_to_md')",
        "    to_dicts_mock = mocker.MagicMock()"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_harvest.py",
      "line": 192,
      "type": "Mock Method",
      "description": "def test_cc_to_terminal(cc_config, mocker):",
      "context": [
        "",
        "",
        "def test_cc_to_terminal(cc_config, mocker):",
        "    reset_mock = mocker.patch('radon.cli.harvest.RESET')",
        "    ranks_mock = mocker.patch('radon.cli.harvest.RANKS_COLORS')"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_harvest.py",
      "line": 223,
      "type": "Mock Method",
      "description": "def test_raw_gobble(raw_config, mocker):",
      "context": [
        "",
        "",
        "def test_raw_gobble(raw_config, mocker):",
        "    r2d_mock = mocker.patch('radon.cli.harvest.raw_to_dict')",
        "    analyze_mock = mocker.patch('radon.cli.harvest.analyze')"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_harvest.py",
      "line": 227,
      "type": "Mock Implementation",
      "description": "fobj.read.return_value = mocker.sentinel.one",
      "context": [
        "    analyze_mock = mocker.patch('radon.cli.harvest.analyze')",
        "    fobj = mocker.MagicMock()",
        "    fobj.read.return_value = mocker.sentinel.one",
        "    analyze_mock.return_value = mocker.sentinel.two",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_harvest.py",
      "line": 228,
      "type": "Mock Implementation",
      "description": "analyze_mock.return_value = mocker.sentinel.two",
      "context": [
        "    fobj = mocker.MagicMock()",
        "    fobj.read.return_value = mocker.sentinel.one",
        "    analyze_mock.return_value = mocker.sentinel.two",
        "",
        "    h = harvest.RawHarvester([], raw_config)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_harvest.py",
      "line": 339,
      "type": "Mock Method",
      "description": "def test_mi_gobble(mi_config, mocker):",
      "context": [
        "",
        "",
        "def test_mi_gobble(mi_config, mocker):",
        "    mv_mock = mocker.patch('radon.cli.harvest.mi_visit')",
        "    fobj = mocker.MagicMock()"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_harvest.py",
      "line": 342,
      "type": "Mock Implementation",
      "description": "fobj.read.return_value = mocker.sentinel.one",
      "context": [
        "    mv_mock = mocker.patch('radon.cli.harvest.mi_visit')",
        "    fobj = mocker.MagicMock()",
        "    fobj.read.return_value = mocker.sentinel.one",
        "    mv_mock.return_value = 23.5",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_harvest.py",
      "line": 353,
      "type": "Mock Method",
      "description": "def test_mi_as_json(mi_config, mocker):",
      "context": [
        "",
        "",
        "def test_mi_as_json(mi_config, mocker):",
        "    d_mock = mocker.patch('radon.cli.harvest.json.dumps')",
        "    h = harvest.MIHarvester([], mi_config)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_harvest.py",
      "line": 374,
      "type": "Mock Method",
      "description": "def test_mi_to_terminal(mi_config, mocker):",
      "context": [
        "",
        "",
        "def test_mi_to_terminal(mi_config, mocker):",
        "    reset_mock = mocker.patch('radon.cli.harvest.RESET')",
        "    ranks_mock = mocker.patch('radon.cli.harvest.MI_RANKS')"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_tools.py",
      "line": 40,
      "type": "Mock Method",
      "description": "def test_open(mocker):",
      "context": [
        "",
        "",
        "def test_open(mocker):",
        "    with tools._open('-') as fobj:",
        "        assert fobj is sys.stdin"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_tools.py",
      "line": 50,
      "type": "Mock Implementation",
      "description": "m = mocker.mock_open()",
      "context": [
        "        assert False, 'tools._open raised TypeError'",
        "",
        "    m = mocker.mock_open()",
        "",
        "    if platform.python_implementation() == 'PyPy':"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_cli_tools.py",
      "line": 78,
      "type": "Mock Method",
      "description": "def test_iter_files(mocker, iter_files):",
      "context": [
        "",
        "",
        "def test_iter_files(mocker, iter_files):",
        "    os_mod = mocker.patch('radon.cli.tools.os')",
        "    os_path_mod = mocker.patch('radon.cli.tools.os.path')"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_ipynb.py",
      "line": 29,
      "type": "Mock Method",
      "description": "def test_harvestor_yields_ipynb(log_mock):",
      "context": [
        "",
        "@pytest.mark.skipif(not SUPPORTS_IPYNB, reason=\"nbformat not installed\")",
        "def test_harvestor_yields_ipynb(log_mock):",
        "    '''Test that Harvester will try ipynb files when configured'''",
        "    target = os.path.join(DIRNAME, 'data/example.ipynb')"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_ipynb.py",
      "line": 40,
      "type": "Mock Method",
      "description": "def test_ipynb(log_mock):",
      "context": [
        "",
        "@pytest.mark.skipif(not SUPPORTS_IPYNB, reason=\"nbformat not installed\")",
        "def test_ipynb(log_mock):",
        "    mi_cfg = cli.Config(**BASE_CONFIG_WITH_IPYNB.config_values)",
        "    mi_cfg.config_values.update(MI_CONFIG.config_values)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_ipynb.py",
      "line": 74,
      "type": "Mock Method",
      "description": "def test_ipynb_with_cells(mocker, log_mock):",
      "context": [
        "",
        "@pytest.mark.skipif(not SUPPORTS_IPYNB, reason=\"nbformat not installed\")",
        "def test_ipynb_with_cells(mocker, log_mock):",
        "    mi_cfg = cli.Config(**BASE_CONFIG_WITH_IPYNB_AND_CELLS.config_values)",
        "    mi_cfg.config_values.update(MI_CONFIG.config_values)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_ipynb.py",
      "line": 108,
      "type": "Mock Method",
      "description": "def test_raw_ipynb(log_mock):",
      "context": [
        "",
        "@pytest.mark.skipif(not SUPPORTS_IPYNB, reason=\"nbformat not installed\")",
        "def test_raw_ipynb(log_mock):",
        "    raw_cfg = cli.Config(**BASE_CONFIG_WITH_IPYNB.config_values)",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/radon/tests/test_ipynb.py",
      "line": 126,
      "type": "Mock Method",
      "description": "def test_raw_ipynb_cells(log_mock):",
      "context": [
        "",
        "@pytest.mark.skipif(not SUPPORTS_IPYNB, reason=\"nbformat not installed\")",
        "def test_raw_ipynb_cells(log_mock):",
        "    raw_cfg = cli.Config(**BASE_CONFIG_WITH_IPYNB_AND_CELLS.config_values)",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/astroid/brain/brain_collections.py",
      "line": 42,
      "type": "Mock Method",
      "description": "def _deque_mock():",
      "context": [
        "",
        "",
        "def _deque_mock():",
        "    base_deque_class = \"\"\"",
        "    class deque(object):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/astroid/brain/brain_collections.py",
      "line": 82,
      "type": "Mock Method",
      "description": "def _ordered_dict_mock():",
      "context": [
        "",
        "",
        "def _ordered_dict_mock():",
        "    base_ordered_dict_class = \"\"\"",
        "    class OrderedDict(dict):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/astroid/brain/brain_collections.py",
      "line": 130,
      "type": "Mock Class",
      "description": "# getitem method of the ClassDef class) Instead we put here a mock of the __class_getitem__ method",
      "context": [
        "    # thanks to the __class_getitem__ method but the way it is implemented in",
        "    # _collection_abc makes it difficult to infer. (We would have to handle AssignName inference in the",
        "    # getitem method of the ClassDef class) Instead we put here a mock of the __class_getitem__ method",
        "    manager.register_transform(",
        "        ClassDef, easy_class_getitem_inference, _looks_like_subscriptable"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/astroid/brain/brain_collections.py",
      "line": 130,
      "type": "Mock Class",
      "description": "# getitem method of the ClassDef class) Instead we put here a mock of the __class_getitem__ method",
      "context": [
        "    # thanks to the __class_getitem__ method but the way it is implemented in",
        "    # _collection_abc makes it difficult to infer. (We would have to handle AssignName inference in the",
        "    # getitem method of the ClassDef class) Instead we put here a mock of the __class_getitem__ method",
        "    manager.register_transform(",
        "        ClassDef, easy_class_getitem_inference, _looks_like_subscriptable"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/astroid/brain/brain_responses.py",
      "line": 9,
      "type": "Mock Class",
      "description": ":class:`responses.RequestsMock`.",
      "context": [
        "",
        "It might need to be manually updated from the public methods of",
        ":class:`responses.RequestsMock`.",
        "",
        "See: https://github.com/getsentry/responses/blob/master/responses.py"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/astroid/brain/brain_typing.py",
      "line": 298,
      "type": "Simulation",
      "description": "in mro to simulate _GenericAlias.",
      "context": [
        "    Infers the call to _alias function",
        "    Insert ClassDef, with same name as aliased class,",
        "    in mro to simulate _GenericAlias.",
        "",
        "    :param node: call node"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/colorama/tests/initialise_test.py",
      "line": 85,
      "type": "Mock Method",
      "description": "def testAutoResetPassedOn(self, mockATW32, _):",
      "context": [
        "    @patch('colorama.win32.SetConsoleTextAttribute')",
        "    @patch('colorama.initialise.AnsiToWin32')",
        "    def testAutoResetPassedOn(self, mockATW32, _):",
        "        with osname(\"nt\"):",
        "            init(autoreset=True)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/colorama/tests/initialise_test.py",
      "line": 93,
      "type": "Mock Method",
      "description": "def testAutoResetChangeable(self, mockATW32):",
      "context": [
        "",
        "    @patch('colorama.initialise.AnsiToWin32')",
        "    def testAutoResetChangeable(self, mockATW32):",
        "        with osname(\"nt\"):",
        "            init()"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/colorama/tests/initialise_test.py",
      "line": 111,
      "type": "Mock Method",
      "description": "def testAtexitRegisteredOnlyOnce(self, mockRegister):",
      "context": [
        "",
        "    @patch('colorama.initialise.atexit.register')",
        "    def testAtexitRegisteredOnlyOnce(self, mockRegister):",
        "        init()",
        "        self.assertTrue(mockRegister.called)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/colorama/tests/winterm_test.py",
      "line": 16,
      "type": "Mock Method",
      "description": "def testInit(self, mockWin32):",
      "context": [
        "",
        "    @patch('colorama.winterm.win32')",
        "    def testInit(self, mockWin32):",
        "        mockAttr = Mock()",
        "        mockAttr.wAttributes = 7 + 6 * 16 + 8"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/colorama/tests/winterm_test.py",
      "line": 19,
      "type": "Mock Implementation",
      "description": "mockWin32.GetConsoleScreenBufferInfo.return_value = mockAttr",
      "context": [
        "        mockAttr = Mock()",
        "        mockAttr.wAttributes = 7 + 6 * 16 + 8",
        "        mockWin32.GetConsoleScreenBufferInfo.return_value = mockAttr",
        "        term = WinTerm()",
        "        self.assertEqual(term._fore, 7)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/colorama/tests/winterm_test.py",
      "line": 48,
      "type": "Mock Method",
      "description": "def testResetAll(self, mockWin32):",
      "context": [
        "",
        "    @patch('colorama.winterm.win32')",
        "    def testResetAll(self, mockWin32):",
        "        mockAttr = Mock()",
        "        mockAttr.wAttributes = 1 + 2 * 16 + 8"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/colorama/tests/winterm_test.py",
      "line": 51,
      "type": "Mock Implementation",
      "description": "mockWin32.GetConsoleScreenBufferInfo.return_value = mockAttr",
      "context": [
        "        mockAttr = Mock()",
        "        mockAttr.wAttributes = 1 + 2 * 16 + 8",
        "        mockWin32.GetConsoleScreenBufferInfo.return_value = mockAttr",
        "        term = WinTerm()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/colorama/tests/winterm_test.py",
      "line": 100,
      "type": "Mock Method",
      "description": "def testSetConsole(self, mockWin32):",
      "context": [
        "",
        "    @patch('colorama.winterm.win32')",
        "    def testSetConsole(self, mockWin32):",
        "        mockAttr = Mock()",
        "        mockAttr.wAttributes = 0"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/colorama/tests/winterm_test.py",
      "line": 103,
      "type": "Mock Implementation",
      "description": "mockWin32.GetConsoleScreenBufferInfo.return_value = mockAttr",
      "context": [
        "        mockAttr = Mock()",
        "        mockAttr.wAttributes = 0",
        "        mockWin32.GetConsoleScreenBufferInfo.return_value = mockAttr",
        "        term = WinTerm()",
        "        term.windll = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/colorama/tests/winterm_test.py",
      "line": 115,
      "type": "Mock Method",
      "description": "def testSetConsoleOnStderr(self, mockWin32):",
      "context": [
        "",
        "    @patch('colorama.winterm.win32')",
        "    def testSetConsoleOnStderr(self, mockWin32):",
        "        mockAttr = Mock()",
        "        mockAttr.wAttributes = 0"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/colorama/tests/winterm_test.py",
      "line": 118,
      "type": "Mock Implementation",
      "description": "mockWin32.GetConsoleScreenBufferInfo.return_value = mockAttr",
      "context": [
        "        mockAttr = Mock()",
        "        mockAttr.wAttributes = 0",
        "        mockWin32.GetConsoleScreenBufferInfo.return_value = mockAttr",
        "        term = WinTerm()",
        "        term.windll = Mock()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_cache.py",
      "line": 39,
      "type": "Mock Implementation",
      "description": "with mock.patch('os.path.isfile') as mock_path:",
      "context": [
        "        cache_dir = _cache._get_cache_dir()",
        "",
        "        with mock.patch('os.path.isfile') as mock_path:",
        "            mock_path.return_value = True",
        "            sot = _cache.Cache()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_cache.py",
      "line": 40,
      "type": "Mock Implementation",
      "description": "mock_path.return_value = True",
      "context": [
        "",
        "        with mock.patch('os.path.isfile') as mock_path:",
        "            mock_path.return_value = True",
        "            sot = _cache.Cache()",
        "            mock_path.assert_called_with('%s/.disable' % cache_dir)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_cache.py",
      "line": 42,
      "type": "Mock Implementation",
      "description": "mock_path.assert_called_with('%s/.disable' % cache_dir)",
      "context": [
        "            mock_path.return_value = True",
        "            sot = _cache.Cache()",
        "            mock_path.assert_called_with('%s/.disable' % cache_dir)",
        "            self.assertTrue(sot._disable_caching)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_cache.py",
      "line": 45,
      "type": "Mock Implementation",
      "description": "mock_path.return_value = False",
      "context": [
        "            self.assertTrue(sot._disable_caching)",
        "",
        "            mock_path.return_value = False",
        "            sot = _cache.Cache()",
        "            self.assertFalse(sot._disable_caching)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_cache.py",
      "line": 51,
      "type": "Mock Method",
      "description": "def test__get_data_for_path_no_write(self, mock_open, mock_mkdir):",
      "context": [
        "    @mock.patch('os.makedirs')",
        "    @mock.patch('builtins.open')",
        "    def test__get_data_for_path_no_write(self, mock_open, mock_mkdir):",
        "        sot = _cache.Cache()",
        "        sot._disable_caching = True"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_cache.py",
      "line": 51,
      "type": "Mock Method",
      "description": "def test__get_data_for_path_no_write(self, mock_open, mock_mkdir):",
      "context": [
        "    @mock.patch('os.makedirs')",
        "    @mock.patch('builtins.open')",
        "    def test__get_data_for_path_no_write(self, mock_open, mock_mkdir):",
        "        sot = _cache.Cache()",
        "        sot._disable_caching = True"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_cache.py",
      "line": 54,
      "type": "Mock Implementation",
      "description": "mock_open.side_effect = IOError",
      "context": [
        "        sot = _cache.Cache()",
        "        sot._disable_caching = True",
        "        mock_open.side_effect = IOError",
        "        sot._get_data_for_path('fake')",
        "        mock_mkdir.assert_not_called()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_cache.py",
      "line": 56,
      "type": "Mock Implementation",
      "description": "mock_mkdir.assert_not_called()",
      "context": [
        "        mock_open.side_effect = IOError",
        "        sot._get_data_for_path('fake')",
        "        mock_mkdir.assert_not_called()",
        "",
        "    def test__build_cacheable_data(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_extension.py",
      "line": 212,
      "type": "Mock Implementation",
      "description": "self.mock_ep = mock.Mock(spec=['require', 'resolve', 'load', 'name'])",
      "context": [
        "    def setUp(self):",
        "        super().setUp()",
        "        self.mock_ep = mock.Mock(spec=['require', 'resolve', 'load', 'name'])",
        "        self.em = extension.ExtensionManager.make_test_instance([])",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_extension.py",
      "line": 216,
      "type": "Mock Implementation",
      "description": "self.em._load_one_plugin(self.mock_ep, False, (), {},",
      "context": [
        "",
        "    def test_verify_requirements(self):",
        "        self.em._load_one_plugin(self.mock_ep, False, (), {},",
        "                                 verify_requirements=True)",
        "        self.mock_ep.require.assert_called_once_with()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_extension.py",
      "line": 218,
      "type": "Mock Implementation",
      "description": "self.mock_ep.require.assert_called_once_with()",
      "context": [
        "        self.em._load_one_plugin(self.mock_ep, False, (), {},",
        "                                 verify_requirements=True)",
        "        self.mock_ep.require.assert_called_once_with()",
        "        self.mock_ep.resolve.assert_called_once_with()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_extension.py",
      "line": 219,
      "type": "Mock Implementation",
      "description": "self.mock_ep.resolve.assert_called_once_with()",
      "context": [
        "                                 verify_requirements=True)",
        "        self.mock_ep.require.assert_called_once_with()",
        "        self.mock_ep.resolve.assert_called_once_with()",
        "",
        "    def test_no_verify_requirements(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_extension.py",
      "line": 222,
      "type": "Mock Implementation",
      "description": "self.em._load_one_plugin(self.mock_ep, False, (), {},",
      "context": [
        "",
        "    def test_no_verify_requirements(self):",
        "        self.em._load_one_plugin(self.mock_ep, False, (), {},",
        "                                 verify_requirements=False)",
        "        self.assertEqual(0, self.mock_ep.require.call_count)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_extension.py",
      "line": 224,
      "type": "Mock Implementation",
      "description": "self.assertEqual(0, self.mock_ep.require.call_count)",
      "context": [
        "        self.em._load_one_plugin(self.mock_ep, False, (), {},",
        "                                 verify_requirements=False)",
        "        self.assertEqual(0, self.mock_ep.require.call_count)",
        "        self.mock_ep.resolve.assert_called_once_with()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_extension.py",
      "line": 225,
      "type": "Mock Implementation",
      "description": "self.mock_ep.resolve.assert_called_once_with()",
      "context": [
        "                                 verify_requirements=False)",
        "        self.assertEqual(0, self.mock_ep.require.call_count)",
        "        self.mock_ep.resolve.assert_called_once_with()",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_extension.py",
      "line": 233,
      "type": "Mock Implementation",
      "description": "self.mock_ep = mock.Mock(spec=['load', 'name'])",
      "context": [
        "    def setUp(self):",
        "        super().setUp()",
        "        self.mock_ep = mock.Mock(spec=['load', 'name'])",
        "        self.em = extension.ExtensionManager.make_test_instance([])",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_extension.py",
      "line": 237,
      "type": "Mock Implementation",
      "description": "self.em._load_one_plugin(self.mock_ep, False, (), {},",
      "context": [
        "",
        "    def test_verify_requirements(self):",
        "        self.em._load_one_plugin(self.mock_ep, False, (), {},",
        "                                 verify_requirements=True)",
        "        self.mock_ep.load.assert_called_once_with()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_extension.py",
      "line": 239,
      "type": "Mock Implementation",
      "description": "self.mock_ep.load.assert_called_once_with()",
      "context": [
        "        self.em._load_one_plugin(self.mock_ep, False, (), {},",
        "                                 verify_requirements=True)",
        "        self.mock_ep.load.assert_called_once_with()",
        "",
        "    def test_no_verify_requirements(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_extension.py",
      "line": 242,
      "type": "Mock Implementation",
      "description": "self.em._load_one_plugin(self.mock_ep, False, (), {},",
      "context": [
        "",
        "    def test_no_verify_requirements(self):",
        "        self.em._load_one_plugin(self.mock_ep, False, (), {},",
        "                                 verify_requirements=False)",
        "        self.mock_ep.load.assert_called_once_with()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_extension.py",
      "line": 244,
      "type": "Mock Implementation",
      "description": "self.mock_ep.load.assert_called_once_with()",
      "context": [
        "        self.em._load_one_plugin(self.mock_ep, False, (), {},",
        "                                 verify_requirements=False)",
        "        self.mock_ep.load.assert_called_once_with()",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_test_manager.py",
      "line": 31,
      "type": "Mock Implementation",
      "description": "mock_entry_point = Mock(module_name='test.extension', attrs=['obj'])",
      "context": [
        "test_extension2 = Extension('another_one', None, None, None)",
        "",
        "mock_entry_point = Mock(module_name='test.extension', attrs=['obj'])",
        "a_driver = Extension('test_driver', mock_entry_point, sentinel.driver_plugin,",
        "                     sentinel.driver_obj)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/stevedore/tests/test_test_manager.py",
      "line": 32,
      "type": "Mock Implementation",
      "description": "a_driver = Extension('test_driver', mock_entry_point, sentinel.driver_plugin,",
      "context": [
        "",
        "mock_entry_point = Mock(module_name='test.extension', attrs=['obj'])",
        "a_driver = Extension('test_driver', mock_entry_point, sentinel.driver_plugin,",
        "                     sentinel.driver_obj)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/langchain/utils/__init__.py",
      "line": 28,
      "type": "Mock Implementation",
      "description": "mock_now,",
      "context": [
        "    get_pydantic_field_names,",
        "    guard_import,",
        "    mock_now,",
        "    raise_for_status_with_text,",
        "    xor_args,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/langchain/utils/__init__.py",
      "line": 71,
      "type": "Mock Implementation",
      "description": "\"mock_now\",",
      "context": [
        "    \"get_pydantic_field_names\",",
        "    \"guard_import\",",
        "    \"mock_now\",",
        "    \"print_text\",",
        "    \"raise_for_status_with_text\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/langchain/utils/utils.py",
      "line": 7,
      "type": "Mock Implementation",
      "description": "mock_now,",
      "context": [
        "    get_pydantic_field_names,",
        "    guard_import,",
        "    mock_now,",
        "    raise_for_status_with_text,",
        "    xor_args,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/langchain/utils/utils.py",
      "line": 18,
      "type": "Mock Implementation",
      "description": "\"mock_now\",",
      "context": [
        "    \"get_pydantic_field_names\",",
        "    \"guard_import\",",
        "    \"mock_now\",",
        "    \"raise_for_status_with_text\",",
        "    \"xor_args\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/langchain_core/utils/__init__.py",
      "line": 39,
      "type": "Mock Implementation",
      "description": "mock_now,",
      "context": [
        "        get_pydantic_field_names,",
        "        guard_import,",
        "        mock_now,",
        "        raise_for_status_with_text,",
        "        secret_from_env,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/langchain_core/utils/__init__.py",
      "line": 63,
      "type": "Mock Implementation",
      "description": "\"mock_now\",",
      "context": [
        "    \"guard_import\",",
        "    \"image\",",
        "    \"mock_now\",",
        "    \"pre_init\",",
        "    \"print_text\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/langchain_core/utils/__init__.py",
      "line": 99,
      "type": "Mock Implementation",
      "description": "\"mock_now\": \"utils\",",
      "context": [
        "    \"get_pydantic_field_names\": \"utils\",",
        "    \"guard_import\": \"utils\",",
        "    \"mock_now\": \"utils\",",
        "    \"secret_from_env\": \"utils\",",
        "    \"xor_args\": \"utils\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 74,
      "type": "Mock Method",
      "description": "def mock_now(dt_value: datetime.datetime) -> Iterator[type]:",
      "context": [
        "",
        "@contextlib.contextmanager",
        "def mock_now(dt_value: datetime.datetime) -> Iterator[type]:",
        "    \"\"\"Context manager for mocking out datetime.now() in unit tests.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 74,
      "type": "Mock Method",
      "description": "def mock_now(dt_value: datetime.datetime) -> Iterator[type]:",
      "context": [
        "",
        "@contextlib.contextmanager",
        "def mock_now(dt_value: datetime.datetime) -> Iterator[type]:",
        "    \"\"\"Context manager for mocking out datetime.now() in unit tests.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 84,
      "type": "Mock Implementation",
      "description": "with mock_now(datetime.datetime(2011, 2, 3, 10, 11)):",
      "context": [
        "",
        "    Example:",
        "    with mock_now(datetime.datetime(2011, 2, 3, 10, 11)):",
        "        assert datetime.datetime.now() == datetime.datetime(2011, 2, 3, 10, 11)",
        "    \"\"\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 88,
      "type": "Mock Class",
      "description": "class MockDateTime(datetime.datetime):",
      "context": [
        "    \"\"\"",
        "",
        "    class MockDateTime(datetime.datetime):",
        "        \"\"\"Mock datetime.datetime.now() with a fixed datetime.\"\"\"",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 93,
      "type": "Mock Method",
      "description": "def now(cls, tz: Union[datetime.tzinfo, None] = None) -> \"MockDateTime\":",
      "context": [
        "        @classmethod",
        "        @override",
        "        def now(cls, tz: Union[datetime.tzinfo, None] = None) -> \"MockDateTime\":",
        "            # Create a copy of dt_value.",
        "            return MockDateTime("
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 95,
      "type": "Mock Implementation",
      "description": "return MockDateTime(",
      "context": [
        "        def now(cls, tz: Union[datetime.tzinfo, None] = None) -> \"MockDateTime\":",
        "            # Create a copy of dt_value.",
        "            return MockDateTime(",
        "                dt_value.year,",
        "                dt_value.month,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/alembic/runtime/migration.py",
      "line": 676,
      "type": "Mock Implementation",
      "description": "return MockEngineStrategy.MockConnection(self.dialect, dump)",
      "context": [
        "            self.impl._exec(construct)",
        "",
        "        return MockEngineStrategy.MockConnection(self.dialect, dump)",
        "",
        "    @property"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/alembic/testing/fixtures.py",
      "line": 13,
      "type": "Mock Implementation",
      "description": "from sqlalchemy import create_mock_engine",
      "context": [
        "",
        "from sqlalchemy import Column",
        "from sqlalchemy import create_mock_engine",
        "from sqlalchemy import inspect",
        "from sqlalchemy import MetaData"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/alembic/testing/fixtures.py",
      "line": 104,
      "type": "Mock Implementation",
      "description": "engine = create_mock_engine(dialect, dump)",
      "context": [
        "        buf.append(str(sql.compile(dialect=engine.dialect)))",
        "",
        "    engine = create_mock_engine(dialect, dump)",
        "    return engine, buf",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/alembic/testing/suite/test_autogen_computed.py",
      "line": 100,
      "type": "Mock Implementation",
      "description": "with mock.patch(\"alembic.util.warn\") as mock_warn:",
      "context": [
        "        )",
        "",
        "        with mock.patch(\"alembic.util.warn\") as mock_warn:",
        "            diffs = self._fixture(m1, m2)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/alembic/testing/suite/test_autogen_computed.py",
      "line": 104,
      "type": "Mock Implementation",
      "description": "mock_warn.mock_calls,",
      "context": [
        "",
        "        eq_(",
        "            mock_warn.mock_calls,",
        "            [mock.call(\"Computed default on user.foo cannot be modified\")],",
        "        )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/alembic/testing/suite/test_autogen_computed.py",
      "line": 140,
      "type": "Mock Implementation",
      "description": "with mock.patch(\"alembic.util.warn\") as mock_warn:",
      "context": [
        "        )",
        "",
        "        with mock.patch(\"alembic.util.warn\") as mock_warn:",
        "            diffs = self._fixture(m1, m2)",
        "        eq_(mock_warn.mock_calls, [])"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/alembic/testing/suite/test_autogen_computed.py",
      "line": 142,
      "type": "Mock Implementation",
      "description": "eq_(mock_warn.mock_calls, [])",
      "context": [
        "        with mock.patch(\"alembic.util.warn\") as mock_warn:",
        "            diffs = self._fixture(m1, m2)",
        "        eq_(mock_warn.mock_calls, [])",
        "",
        "        eq_(list(diffs), [])"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/mypy/plugins/attrs.py",
      "line": 850,
      "type": "Mock Class",
      "description": "\"\"\"Turn all the attributes into properties to simulate frozen classes.\"\"\"",
      "context": [
        "",
        "def _make_frozen(ctx: mypy.plugin.ClassDefContext, attributes: list[Attribute]) -> None:",
        "    \"\"\"Turn all the attributes into properties to simulate frozen classes.\"\"\"",
        "    for attribute in attributes:",
        "        if attribute.name in ctx.cls.info.names:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/mypy/test/teststubtest.py",
      "line": 563,
      "type": "Simulation",
      "description": "# Simulate \"<unrepresentable>\"",
      "context": [
        "        )",
        "",
        "        # Simulate \"<unrepresentable>\"",
        "        yield Case(",
        "            stub=\"def f11() -> None: ...\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/mypy/test/teststubtest.py",
      "line": 573,
      "type": "Simulation",
      "description": "# Simulate numpy ndarray.__bool__ that raises an error",
      "context": [
        "        )",
        "",
        "        # Simulate numpy ndarray.__bool__ that raises an error",
        "        yield Case(",
        "            stub=\"def f12(x=1): ...\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/mypy/test/testutil.py",
      "line": 14,
      "type": "Mock Implementation",
      "description": "mock_environ = os.environ.copy()",
      "context": [
        "        # when run using a pty, `os.get_terminal_size()` returns `0, 0`",
        "        ret = os.terminal_size((0, 0))",
        "        mock_environ = os.environ.copy()",
        "        mock_environ.pop(\"COLUMNS\", None)",
        "        with mock.patch.object(os, \"get_terminal_size\", return_value=ret):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/mypy/test/testutil.py",
      "line": 15,
      "type": "Mock Implementation",
      "description": "mock_environ.pop(\"COLUMNS\", None)",
      "context": [
        "        ret = os.terminal_size((0, 0))",
        "        mock_environ = os.environ.copy()",
        "        mock_environ.pop(\"COLUMNS\", None)",
        "        with mock.patch.object(os, \"get_terminal_size\", return_value=ret):",
        "            with mock.patch.dict(os.environ, values=mock_environ, clear=True):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/mypy/test/testutil.py",
      "line": 17,
      "type": "Mock Implementation",
      "description": "with mock.patch.dict(os.environ, values=mock_environ, clear=True):",
      "context": [
        "        mock_environ.pop(\"COLUMNS\", None)",
        "        with mock.patch.object(os, \"get_terminal_size\", return_value=ret):",
        "            with mock.patch.dict(os.environ, values=mock_environ, clear=True):",
        "                assert get_terminal_width() == 80",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 240,
      "type": "Simulation",
      "description": "assert False, \"simulated connect failure didn't work\"",
      "context": [
        "            # above, connection is closed",
        "            curs.execute(\"select 1\")",
        "            assert False, \"simulated connect failure didn't work\"",
        "        else:",
        "            self.connections.append(conn)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 387,
      "type": "Mock Method",
      "description": "def mock_engine(dialect_name=None):",
      "context": [
        "",
        "",
        "def mock_engine(dialect_name=None):",
        "    \"\"\"Provides a mocking engine based on the current testing.db.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 387,
      "type": "Mock Method",
      "description": "def mock_engine(dialect_name=None):",
      "context": [
        "",
        "",
        "def mock_engine(dialect_name=None):",
        "    \"\"\"Provides a mocking engine based on the current testing.db.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 399,
      "type": "Mock Implementation",
      "description": "from sqlalchemy import create_mock_engine",
      "context": [
        "    \"\"\"",
        "",
        "    from sqlalchemy import create_mock_engine",
        "",
        "    if not dialect_name:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 415,
      "type": "Mock Implementation",
      "description": "return \"\\n\".join(str(s.compile(dialect=d)) for s in engine.mock)",
      "context": [
        "    def print_sql():",
        "        d = engine.dialect",
        "        return \"\\n\".join(str(s.compile(dialect=d)) for s in engine.mock)",
        "",
        "    engine = create_mock_engine(dialect_name + \"://\", executor)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 417,
      "type": "Mock Implementation",
      "description": "engine = create_mock_engine(dialect_name + \"://\", executor)",
      "context": [
        "        return \"\\n\".join(str(s.compile(dialect=d)) for s in engine.mock)",
        "",
        "    engine = create_mock_engine(dialect_name + \"://\", executor)",
        "    assert not hasattr(engine, \"mock\")",
        "    engine.mock = buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/config.py",
      "line": 63,
      "type": "Mock Implementation",
      "description": "return mock.Mock()",
      "context": [
        "        @property",
        "        def add_to_marker(self):",
        "            return mock.Mock()",
        "",
        "        def mark_base_test_class(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/requirements.py",
      "line": 1538,
      "type": "Mock Method",
      "description": "def threading_with_mock(self):",
      "context": [
        "",
        "    @property",
        "    def threading_with_mock(self):",
        "        \"\"\"Mark tests that use threading and mock at the same time - stability",
        "        issues have been observed with coverage"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/__init__.py",
      "line": 42,
      "type": "Mock Implementation",
      "description": "from .mock import create_mock_engine as create_mock_engine",
      "context": [
        "from .interfaces import ExecutionContext as ExecutionContext",
        "from .interfaces import TypeCompiler as TypeCompiler",
        "from .mock import create_mock_engine as create_mock_engine",
        "from .reflection import Inspector as Inspector",
        "from .reflection import ObjectKind as ObjectKind"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/url.py",
      "line": 858,
      "type": "Mock Implementation",
      "description": "name_or_url, \"_sqla_is_testing_if_this_is_a_mock_object\"",
      "context": [
        "        return _parse_url(name_or_url)",
        "    elif not isinstance(name_or_url, URL) and not hasattr(",
        "        name_or_url, \"_sqla_is_testing_if_this_is_a_mock_object\"",
        "    ):",
        "        raise exc.ArgumentError("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/strategies.py",
      "line": 15,
      "type": "Mock Class",
      "description": "class MockEngineStrategy:",
      "context": [
        "",
        "",
        "class MockEngineStrategy:",
        "    MockConnection = MockConnection",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py",
      "line": 25,
      "type": "Mock Implementation",
      "description": "from .mock import create_mock_engine",
      "context": [
        "from . import url as _url",
        "from .interfaces import DBAPIConnection",
        "from .mock import create_mock_engine",
        "from .. import event",
        "from .. import exc"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py",
      "line": 97,
      "type": "Mock Implementation",
      "description": "\":func:`.create_mock_engine` going forward.  For general \"",
      "context": [
        "        \"The :paramref:`_sa.create_engine.strategy` keyword is deprecated, \"",
        "        \"and the only argument accepted is 'mock'; please use \"",
        "        \":func:`.create_mock_engine` going forward.  For general \"",
        "        \"customization of create_engine which may have been accomplished \"",
        "        \"using strategies, see :class:`.CreateEnginePlugin`.\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py",
      "line": 557,
      "type": "Mock Implementation",
      "description": "return create_mock_engine(url, **kwargs)  # type: ignore",
      "context": [
        "        if strat == \"mock\":",
        "            # this case is deprecated",
        "            return create_mock_engine(url, **kwargs)  # type: ignore",
        "        else:",
        "            raise exc.ArgumentError(\"unknown strategy: %r\" % strat)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py",
      "line": 557,
      "type": "Mock Implementation",
      "description": "return create_mock_engine(url, **kwargs)  # type: ignore",
      "context": [
        "        if strat == \"mock\":",
        "            # this case is deprecated",
        "            return create_mock_engine(url, **kwargs)  # type: ignore",
        "        else:",
        "            raise exc.ArgumentError(\"unknown strategy: %r\" % strat)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 35,
      "type": "Mock Class",
      "description": "class MockConnection:",
      "context": [
        "",
        "",
        "class MockConnection:",
        "    def __init__(self, dialect: Dialect, execute: Callable[..., Any]):",
        "        self._dialect = dialect"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 44,
      "type": "Mock Method",
      "description": "def connect(self, **kwargs: Any) -> MockConnection:",
      "context": [
        "    name: str = cast(Any, property(lambda s: s._dialect.name))",
        "",
        "    def connect(self, **kwargs: Any) -> MockConnection:",
        "        return self",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 50,
      "type": "Mock Method",
      "description": "def execution_options(self, **kw: Any) -> MockConnection:",
      "context": [
        "        return obj.schema",
        "",
        "    def execution_options(self, **kw: Any) -> MockConnection:",
        "        return self",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 73,
      "type": "Mock Method",
      "description": "def create_mock_engine(",
      "context": [
        "",
        "",
        "def create_mock_engine(",
        "    url: Union[str, URL], executor: Any, **kw: Any",
        ") -> MockConnection:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 73,
      "type": "Mock Method",
      "description": "def create_mock_engine(",
      "context": [
        "",
        "",
        "def create_mock_engine(",
        "    url: Union[str, URL], executor: Any, **kw: Any",
        ") -> MockConnection:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 92,
      "type": "Mock Implementation",
      "description": "from sqlalchemy import create_mock_engine",
      "context": [
        "    E.g.::",
        "",
        "        from sqlalchemy import create_mock_engine",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 99,
      "type": "Mock Implementation",
      "description": "engine = create_mock_engine(\"postgresql+psycopg2://\", dump)",
      "context": [
        "",
        "",
        "        engine = create_mock_engine(\"postgresql+psycopg2://\", dump)",
        "        metadata.create_all(engine, checkfirst=False)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 110,
      "type": "Mock Implementation",
      "description": ".. versionadded:: 1.4 - the :func:`.create_mock_engine` function replaces",
      "context": [
        "     into a string using :meth:`.ExecutableDDLElement.compile`.",
        "",
        "    .. versionadded:: 1.4 - the :func:`.create_mock_engine` function replaces",
        "       the previous \"mock\" engine strategy used with",
        "       :func:`_sa.create_engine`."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 134,
      "type": "Mock Implementation",
      "description": "return MockConnection(dialect, executor)",
      "context": [
        "    dialect = dialect_cls(**dialect_args)",
        "",
        "    return MockConnection(dialect, executor)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_reflection.py",
      "line": 1011,
      "type": "Mock Method",
      "description": "name, auto=False, default=mock.ANY, comment=None, nullable=True",
      "context": [
        "    ):",
        "        def col(",
        "            name, auto=False, default=mock.ANY, comment=None, nullable=True",
        "        ):",
        "            res = {"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_reflection.py",
      "line": 1026,
      "type": "Mock Method",
      "description": "kw = {\"auto\": True, \"default\": mock.ANY, \"nullable\": False, **kw}",
      "context": [
        "",
        "        def pk(name, **kw):",
        "            kw = {\"auto\": True, \"default\": mock.ANY, \"nullable\": False, **kw}",
        "            return col(name, **kw)",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_reflection.py",
      "line": 1110,
      "type": "Mock Method",
      "description": "def pk(*cols, name=mock.ANY, comment=None):",
      "context": [
        "        filter_names=None,",
        "    ):",
        "        def pk(*cols, name=mock.ANY, comment=None):",
        "            return {",
        "                \"constrained_columns\": list(cols),"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_dialect.py",
      "line": 371,
      "type": "Mock Implementation",
      "description": "eq_(check_rollback.mock_calls, [mock.call()])",
      "context": [
        "            conn.close()",
        "        if autocommit_setting.false or not block_rollback:",
        "            eq_(check_rollback.mock_calls, [mock.call()])",
        "        else:",
        "            eq_(check_rollback.mock_calls, [])"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_dialect.py",
      "line": 373,
      "type": "Mock Implementation",
      "description": "eq_(check_rollback.mock_calls, [])",
      "context": [
        "            eq_(check_rollback.mock_calls, [mock.call()])",
        "        else:",
        "            eq_(check_rollback.mock_calls, [])",
        "",
        "    @testing.requires.independent_readonly_connections"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_types.py",
      "line": 1610,
      "type": "Mock Implementation",
      "description": "eq_(js.mock_calls, [mock.call(data_element)])",
      "context": [
        "",
        "            eq_(row, (data_element,))",
        "            eq_(js.mock_calls, [mock.call(data_element)])",
        "            if testing.requires.json_deserializer_binary.enabled:",
        "                eq_("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_types.py",
      "line": 1613,
      "type": "Mock Implementation",
      "description": "jd.mock_calls,",
      "context": [
        "            if testing.requires.json_deserializer_binary.enabled:",
        "                eq_(",
        "                    jd.mock_calls,",
        "                    [mock.call(json.dumps(data_element).encode())],",
        "                )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_types.py",
      "line": 1617,
      "type": "Mock Implementation",
      "description": "eq_(jd.mock_calls, [mock.call(json.dumps(data_element))])",
      "context": [
        "                )",
        "            else:",
        "                eq_(jd.mock_calls, [mock.call(json.dumps(data_element))])",
        "",
        "    @testing.combinations("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/greenlet/tests/leakcheck.py",
      "line": 107,
      "type": "Mock Class",
      "description": "class _MockGC(object):",
      "context": [
        "    # trace *all* the objects, not just those that are tracked by the",
        "    # GC",
        "    class _MockGC(object):",
        "        def get_objects(self):",
        "            return sys.getobjects(0) # pylint:disable=no-member"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/numpy/_core/getlimits.py",
      "line": 35,
      "type": "Simulation",
      "description": "\"\"\" Object to simulate MachAr instance \"\"\"",
      "context": [
        "",
        "class MachArLike:",
        "    \"\"\" Object to simulate MachAr instance \"\"\"",
        "    def __init__(self, ftype, *, eps, epsneg, huge, tiny,",
        "                 ibeta, smallest_subnormal=None, **kwargs):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/numpy/lib/_npyio_impl.py",
      "line": 554,
      "type": "Simulation",
      "description": ">>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
      "context": [
        "    >>> np.save(outfile, x)",
        "",
        "    >>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
        "    >>> np.load(outfile)",
        "    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/numpy/lib/_npyio_impl.py",
      "line": 667,
      "type": "Simulation",
      "description": ">>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
      "context": [
        "",
        "    >>> np.savez(outfile, x, y)",
        "    >>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
        "    >>> npzfile = np.load(outfile)",
        "    >>> npzfile.files"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/numpy/tests/test_numpy_config.py",
      "line": 24,
      "type": "Mock Method",
      "description": "def test_pyyaml_not_found(self, mock_yaml_importer):",
      "context": [
        "",
        "    @patch(\"numpy.__config__._check_pyyaml\")",
        "    def test_pyyaml_not_found(self, mock_yaml_importer):",
        "        mock_yaml_importer.side_effect = ModuleNotFoundError()",
        "        with pytest.warns(UserWarning):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/numpy/tests/test_numpy_config.py",
      "line": 24,
      "type": "Mock Method",
      "description": "def test_pyyaml_not_found(self, mock_yaml_importer):",
      "context": [
        "",
        "    @patch(\"numpy.__config__._check_pyyaml\")",
        "    def test_pyyaml_not_found(self, mock_yaml_importer):",
        "        mock_yaml_importer.side_effect = ModuleNotFoundError()",
        "        with pytest.warns(UserWarning):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/numpy/tests/test_numpy_config.py",
      "line": 25,
      "type": "Mock Implementation",
      "description": "mock_yaml_importer.side_effect = ModuleNotFoundError()",
      "context": [
        "    @patch(\"numpy.__config__._check_pyyaml\")",
        "    def test_pyyaml_not_found(self, mock_yaml_importer):",
        "        mock_yaml_importer.side_effect = ModuleNotFoundError()",
        "        with pytest.warns(UserWarning):",
        "            np.show_config()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/numpy/random/tests/test_generator_mt19937.py",
      "line": 2759,
      "type": "Simulation",
      "description": "# Simulate unpickling an old pickle that only has the name",
      "context": [
        "    # Directly call reduce which is used in pickling",
        "    ctor, (bit_gen, ), _ = rg.__reduce__()",
        "    # Simulate unpickling an old pickle that only has the name",
        "    assert bit_gen.__class__.__name__ == \"PCG64DXSM\"",
        "    print(ctor)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/numpy/random/tests/test_randomstate.py",
      "line": 2060,
      "type": "Simulation",
      "description": "# Simulate unpickling an old pickle that only has the name",
      "context": [
        "    # Directly call reduce which is used in pickling",
        "    ctor, args, state_a = rs.__reduce__()",
        "    # Simulate unpickling an old pickle that only has the name",
        "    assert args[0].__class__.__name__ == \"MT19937\"",
        "    b = ctor(*(\"MT19937\",))"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/numpy/lib/tests/test__datasource.py",
      "line": 347,
      "type": "Simulation",
      "description": "# simulate failed __init__ by removing key attribute",
      "context": [
        "",
        "    ds = datasource.DataSource()",
        "    # simulate failed __init__ by removing key attribute",
        "    # produced within __init__ and expected by __del__",
        "    del ds._istmpdest"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/numpy/_core/tests/test_overrides.py",
      "line": 515,
      "type": "Mock Method",
      "description": "def test_sum_on_mock_array(self):",
      "context": [
        "        assert_equal(np.sum(MyArray()), 'yes')",
        "",
        "    def test_sum_on_mock_array(self):",
        "",
        "        # We need a proxy for mocks because __array_function__ is only looked"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/numpy/_core/tests/test_overrides.py",
      "line": 515,
      "type": "Mock Method",
      "description": "def test_sum_on_mock_array(self):",
      "context": [
        "        assert_equal(np.sum(MyArray()), 'yes')",
        "",
        "    def test_sum_on_mock_array(self):",
        "",
        "        # We need a proxy for mocks because __array_function__ is only looked"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/numpy/_core/tests/test_regression.py",
      "line": 1728,
      "type": "Simulation",
      "description": "# it is designed to simulate an old API",
      "context": [
        "            # squeeze to have an axis argument",
        "            # NOTE: this example is somewhat artificial;",
        "            # it is designed to simulate an old API",
        "            # expectation to guard against regression",
        "            def squeeze(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pygments/lexers/_scilab_builtins.py",
      "line": 2773,
      "type": "Simulation",
      "description": "'scicos_simulate',",
      "context": [
        "    'sci_sparse',",
        "    'scicos_getvalue',",
        "    'scicos_simulate',",
        "    'scicos_workspace_init',",
        "    'scisptdemo',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pygments/lexers/_scilab_builtins.py",
      "line": 2953,
      "type": "Simulation",
      "description": "'xcos_simulate',",
      "context": [
        "    'xcos_debug_gui',",
        "    'xcos_run',",
        "    'xcos_simulate',",
        "    'xcov',",
        "    'xmltochm',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pygments/lexers/_scilab_builtins.py",
      "line": 3040,
      "type": "Simulation",
      "description": "'simulated_annealinglib',",
      "context": [
        "    'scinoteslib',",
        "    'signal_processinglib',",
        "    'simulated_annealinglib',",
        "    'soundlib',",
        "    'sparselib',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pygments/lexers/_stata_builtins.py",
      "line": 245,
      "type": "Simulation",
      "description": "\"signtest\", \"simul\", \"simul_7\", \"simulate\", \"simulate_8\",",
      "context": [
        "    \"set_defaults\", \"sfrancia\", \"sh\", \"she\", \"shel\", \"shell\",",
        "    \"shewhart\", \"shewhart_7\", \"signestimationsample\", \"signrank\",",
        "    \"signtest\", \"simul\", \"simul_7\", \"simulate\", \"simulate_8\",",
        "    \"sktest\", \"sleep\", \"slogit\", \"slogit_d2\", \"slogit_p\", \"smooth\",",
        "    \"snapspan\", \"so\", \"sor\", \"sort\", \"spearman\", \"spikeplot\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/httpx/_transports/mock.py",
      "line": 15,
      "type": "Mock Class",
      "description": "class MockTransport(AsyncBaseTransport, BaseTransport):",
      "context": [
        "",
        "",
        "class MockTransport(AsyncBaseTransport, BaseTransport):",
        "    def __init__(self, handler: SyncHandler | AsyncHandler) -> None:",
        "        self.handler = handler"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 26,
      "type": "Mock Class",
      "description": "from ._mock_val_ser import set_dataclass_mocks",
      "context": [
        "from ._generate_schema import GenerateSchema, InvalidSchemaError",
        "from ._generics import get_standard_typevars_map",
        "from ._mock_val_ser import set_dataclass_mocks",
        "from ._namespace_utils import NsResolver",
        "from ._signature import generate_pydantic_signature"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 26,
      "type": "Mock Class",
      "description": "from ._mock_val_ser import set_dataclass_mocks",
      "context": [
        "from ._generate_schema import GenerateSchema, InvalidSchemaError",
        "from ._generics import get_standard_typevars_map",
        "from ._mock_val_ser import set_dataclass_mocks",
        "from ._namespace_utils import NsResolver",
        "from ._signature import generate_pydantic_signature"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 133,
      "type": "Mock Class",
      "description": "set_dataclass_mocks(cls)",
      "context": [
        "",
        "    if not _force_build and config_wrapper.defer_build:",
        "        set_dataclass_mocks(cls)",
        "        return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 170,
      "type": "Mock Class",
      "description": "set_dataclass_mocks(cls, f'`{e.name}`')",
      "context": [
        "        if raise_errors:",
        "            raise",
        "        set_dataclass_mocks(cls, f'`{e.name}`')",
        "        return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 178,
      "type": "Mock Class",
      "description": "set_dataclass_mocks(cls)",
      "context": [
        "        schema = gen_schema.clean_schema(schema)",
        "    except InvalidSchemaError:",
        "        set_dataclass_mocks(cls)",
        "        return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_decorators.py",
      "line": 358,
      "type": "Mock Class",
      "description": "aiming to simulate calling the method on the actual class.",
      "context": [
        "def get_attribute_from_bases(tp: type[Any] | tuple[type[Any], ...], name: str) -> Any:",
        "    \"\"\"Get the attribute from the next class in the MRO that has it,",
        "    aiming to simulate calling the method on the actual class.",
        "",
        "    The reason for iterating over the mro instead of just getting"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_generate_schema.py",
      "line": 99,
      "type": "Mock Implementation",
      "description": "from ._mock_val_ser import MockCoreSchema",
      "context": [
        "from ._generics import get_standard_typevars_map, replace_types",
        "from ._import_utils import import_cached_base_model, import_cached_field_info",
        "from ._mock_val_ser import MockCoreSchema",
        "from ._namespace_utils import NamespacesTuple, NsResolver",
        "from ._schema_gather import MissingDefinitionError, gather_schemas_for_cleaning"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 21,
      "type": "Mock Class",
      "description": "class MockCoreSchema(Mapping[str, Any]):",
      "context": [
        "",
        "",
        "class MockCoreSchema(Mapping[str, Any]):",
        "    \"\"\"Mocker for `pydantic_core.CoreSchema` which optionally attempts to",
        "    rebuild the thing it's mocking when one of its methods is accessed and raises an error if that fails."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 71,
      "type": "Mock Class",
      "description": "class MockValSer(Generic[ValSer]):",
      "context": [
        "",
        "",
        "class MockValSer(Generic[ValSer]):",
        "    \"\"\"Mocker for `pydantic_core.SchemaValidator` or `pydantic_core.SchemaSerializer` which optionally attempts to",
        "    rebuild the thing it's mocking when one of its methods is accessed and raises an error if that fails."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 112,
      "type": "Mock Method",
      "description": "def set_type_adapter_mocks(adapter: TypeAdapter) -> None:",
      "context": [
        "",
        "",
        "def set_type_adapter_mocks(adapter: TypeAdapter) -> None:",
        "    \"\"\"Set `core_schema`, `validator` and `serializer` to mock core types on a type adapter instance.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 151,
      "type": "Mock Method",
      "description": "def set_model_mocks(cls: type[BaseModel], undefined_name: str = 'all referenced types') -> None:",
      "context": [
        "",
        "",
        "def set_model_mocks(cls: type[BaseModel], undefined_name: str = 'all referenced types') -> None:",
        "    \"\"\"Set `__pydantic_core_schema__`, `__pydantic_validator__` and `__pydantic_serializer__` to mock core types on a model.",
        ""
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 155,
      "type": "Mock Class",
      "description": "cls: The model class to set the mocks on",
      "context": [
        "",
        "    Args:",
        "        cls: The model class to set the mocks on",
        "        undefined_name: Name of the undefined thing, used in error messages",
        "    \"\"\""
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 190,
      "type": "Mock Class",
      "description": "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
      "context": [
        "",
        "",
        "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
        "    \"\"\"Set `__pydantic_validator__` and `__pydantic_serializer__` to `MockValSer`s on a dataclass.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 190,
      "type": "Mock Class",
      "description": "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
      "context": [
        "",
        "",
        "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
        "    \"\"\"Set `__pydantic_validator__` and `__pydantic_serializer__` to `MockValSer`s on a dataclass.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 194,
      "type": "Mock Class",
      "description": "cls: The model class to set the mocks on",
      "context": [
        "",
        "    Args:",
        "        cls: The model class to set the mocks on",
        "        undefined_name: Name of the undefined thing, used in error messages",
        "    \"\"\""
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/pydantic/_internal/_model_construction.py",
      "line": 29,
      "type": "Mock Implementation",
      "description": "from ._mock_val_ser import set_model_mocks",
      "context": [
        "from ._generics import PydanticGenericMetadata, get_model_typevars_map",
        "from ._import_utils import import_cached_base_model, import_cached_field_info",
        "from ._mock_val_ser import set_model_mocks",
        "from ._namespace_utils import NsResolver",
        "from ._signature import generate_pydantic_signature"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 16,
      "type": "Mock Class",
      "description": "class MockSSLObject:",
      "context": [
        "",
        "",
        "class MockSSLObject:",
        "    def __init__(self, http2: bool):",
        "        self._http2 = http2"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 24,
      "type": "Mock Class",
      "description": "class MockStream(NetworkStream):",
      "context": [
        "",
        "",
        "class MockStream(NetworkStream):",
        "    def __init__(self, buffer: list[bytes], http2: bool = False) -> None:",
        "        self._buffer = buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 52,
      "type": "Mock Implementation",
      "description": "return MockSSLObject(http2=self._http2) if info == \"ssl_object\" else None",
      "context": [
        "",
        "    def get_extra_info(self, info: str) -> typing.Any:",
        "        return MockSSLObject(http2=self._http2) if info == \"ssl_object\" else None",
        "",
        "    def __repr__(self) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 55,
      "type": "Mock Implementation",
      "description": "return \"<httpcore.MockStream>\"",
      "context": [
        "",
        "    def __repr__(self) -> str:",
        "        return \"<httpcore.MockStream>\"",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 58,
      "type": "Mock Class",
      "description": "class MockBackend(NetworkBackend):",
      "context": [
        "",
        "",
        "class MockBackend(NetworkBackend):",
        "    def __init__(self, buffer: list[bytes], http2: bool = False) -> None:",
        "        self._buffer = buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 71,
      "type": "Mock Implementation",
      "description": "return MockStream(list(self._buffer), http2=self._http2)",
      "context": [
        "        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,",
        "    ) -> NetworkStream:",
        "        return MockStream(list(self._buffer), http2=self._http2)",
        "",
        "    def connect_unix_socket("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 79,
      "type": "Mock Implementation",
      "description": "return MockStream(list(self._buffer), http2=self._http2)",
      "context": [
        "        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,",
        "    ) -> NetworkStream:",
        "        return MockStream(list(self._buffer), http2=self._http2)",
        "",
        "    def sleep(self, seconds: float) -> None:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 85,
      "type": "Mock Class",
      "description": "class AsyncMockStream(AsyncNetworkStream):",
      "context": [
        "",
        "",
        "class AsyncMockStream(AsyncNetworkStream):",
        "    def __init__(self, buffer: list[bytes], http2: bool = False) -> None:",
        "        self._buffer = buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 113,
      "type": "Mock Implementation",
      "description": "return MockSSLObject(http2=self._http2) if info == \"ssl_object\" else None",
      "context": [
        "",
        "    def get_extra_info(self, info: str) -> typing.Any:",
        "        return MockSSLObject(http2=self._http2) if info == \"ssl_object\" else None",
        "",
        "    def __repr__(self) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 116,
      "type": "Mock Implementation",
      "description": "return \"<httpcore.AsyncMockStream>\"",
      "context": [
        "",
        "    def __repr__(self) -> str:",
        "        return \"<httpcore.AsyncMockStream>\"",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 119,
      "type": "Mock Class",
      "description": "class AsyncMockBackend(AsyncNetworkBackend):",
      "context": [
        "",
        "",
        "class AsyncMockBackend(AsyncNetworkBackend):",
        "    def __init__(self, buffer: list[bytes], http2: bool = False) -> None:",
        "        self._buffer = buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 132,
      "type": "Mock Implementation",
      "description": "return AsyncMockStream(list(self._buffer), http2=self._http2)",
      "context": [
        "        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,",
        "    ) -> AsyncNetworkStream:",
        "        return AsyncMockStream(list(self._buffer), http2=self._http2)",
        "",
        "    async def connect_unix_socket("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 140,
      "type": "Mock Implementation",
      "description": "return AsyncMockStream(list(self._buffer), http2=self._http2)",
      "context": [
        "        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,",
        "    ) -> AsyncNetworkStream:",
        "        return AsyncMockStream(list(self._buffer), http2=self._http2)",
        "",
        "    async def sleep(self, seconds: float) -> None:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/orchestration/task_decomposer_fixed.py",
      "line": 223,
      "type": "Mock Implementation",
      "description": "# Return mock response for testing",
      "context": [
        "        \"\"\"",
        "        if not self.llm_client:",
        "            # Return mock response for testing",
        "            return self._generate_mock_llm_response(task_description)",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/orchestration/task_decomposer_fixed.py",
      "line": 224,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        if not self.llm_client:",
        "            # Return mock response for testing",
        "            return self._generate_mock_llm_response(task_description)",
        "        ",
        "        # Enhanced prompt for better JSON output"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/orchestration/task_decomposer_fixed.py",
      "line": 224,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        if not self.llm_client:",
        "            # Return mock response for testing",
        "            return self._generate_mock_llm_response(task_description)",
        "        ",
        "        # Enhanced prompt for better JSON output"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/orchestration/task_decomposer_fixed.py",
      "line": 259,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        except Exception as e:",
        "            logger.error(f\"LLM call failed: {e}\")",
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/orchestration/task_decomposer_fixed.py",
      "line": 259,
      "type": "Mock Implementation",
      "description": "return self._generate_mock_llm_response(task_description)",
      "context": [
        "        except Exception as e:",
        "            logger.error(f\"LLM call failed: {e}\")",
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/orchestration/task_decomposer_fixed.py",
      "line": 261,
      "type": "Mock Method",
      "description": "def _generate_mock_llm_response(self, task_description: str) -> str:",
      "context": [
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:",
        "        \"\"\"Generate mock response for testing purposes\"\"\"",
        "        return f\"\"\"{{"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/orchestration/task_decomposer_fixed.py",
      "line": 261,
      "type": "Mock Method",
      "description": "def _generate_mock_llm_response(self, task_description: str) -> str:",
      "context": [
        "            return self._generate_mock_llm_response(task_description)",
        "    ",
        "    def _generate_mock_llm_response(self, task_description: str) -> str:",
        "        \"\"\"Generate mock response for testing purposes\"\"\"",
        "        return f\"\"\"{{"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/integrations/test_integrations.py",
      "line": 14,
      "type": "Mock Method",
      "description": "def test_github_mock():",
      "context": [
        "",
        "",
        "def test_github_mock():",
        "    \"\"\"Test GitHub integration (mock - bez prawdziwych API calls)\"\"\"",
        "    print(\"=\"*70)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/execution/agent_executor_fixed.py",
      "line": 386,
      "type": "Mock Implementation",
      "description": "# Placeholder for API call implementation",
      "context": [
        "    ) -> Any:",
        "        \"\"\"Execute API call task.\"\"\"",
        "        # Placeholder for API call implementation",
        "        # This would integrate with the Agent Zero V1 API routing system",
        "        endpoint = task_def.get(\"endpoint\", \"\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/execution/agent_executor_fixed.py",
      "line": 394,
      "type": "Mock Implementation",
      "description": "# Mock response for now - replace with actual API integration",
      "context": [
        "        self.logger.info(f\"API call: {method} {endpoint}\")",
        "        ",
        "        # Mock response for now - replace with actual API integration",
        "        return {",
        "            \"status\": \"success\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/execution/agent_executor_fixed.py",
      "line": 415,
      "type": "Mock Implementation",
      "description": "# Mock response - replace with Neo4j integration",
      "context": [
        "        self.logger.info(f\"Knowledge query: {query_type}\")",
        "        ",
        "        # Mock response - replace with Neo4j integration",
        "        return {",
        "            \"status\": \"success\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/execution/project_orchestrator_enhanced.py",
      "line": 47,
      "type": "Simulation",
      "description": "# Simulate project execution",
      "context": [
        "        start_time = time.time()",
        "        ",
        "        # Simulate project execution",
        "        print(\"\ud83d\udccb Decomposing requirements into tasks...\")",
        "        await asyncio.sleep(1)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/monitoring/interactive_control_system.py",
      "line": 206,
      "type": "Simulation",
      "description": "# For demonstration, we'll simulate the execution process",
      "context": [
        "        ",
        "        # This would integrate with the actual ProjectOrchestrator",
        "        # For demonstration, we'll simulate the execution process",
        "        ",
        "        print(\"\ud83d\udd04 Integrating with ProjectOrchestrator...\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/monitoring/interactive_control_system.py",
      "line": 210,
      "type": "Simulation",
      "description": "# Simulate task execution phases",
      "context": [
        "        print(\"\ud83d\udd04 Integrating with ProjectOrchestrator...\")",
        "        ",
        "        # Simulate task execution phases",
        "        phases = [",
        "            (\"Analysis\", \"Analyzing requirements and architecture\", 15),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/monitoring/interactive_control_system.py",
      "line": 236,
      "type": "Simulation",
      "description": "# Simulate agent execution with real-time updates",
      "context": [
        "            })",
        "            ",
        "            # Simulate agent execution with real-time updates",
        "            await self._simulate_phase_execution(session, phase_name, phase_desc, duration)",
        "            "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/monitoring/interactive_control_system.py",
      "line": 237,
      "type": "Simulation",
      "description": "await self._simulate_phase_execution(session, phase_name, phase_desc, duration)",
      "context": [
        "            ",
        "            # Simulate agent execution with real-time updates",
        "            await self._simulate_phase_execution(session, phase_name, phase_desc, duration)",
        "            ",
        "            completed_tasks.append(phase_name)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/monitoring/interactive_control_system.py",
      "line": 258,
      "type": "Mock Method",
      "description": "async def _simulate_phase_execution(self,",
      "context": [
        "        }",
        "        ",
        "    async def _simulate_phase_execution(self,",
        "                                      session: InteractiveControlSession,",
        "                                      phase_name: str,"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/monitoring/interactive_control_system.py",
      "line": 263,
      "type": "Simulation",
      "description": "\"\"\"Simulate phase execution with agent updates\"\"\"",
      "context": [
        "                                      phase_desc: str,",
        "                                      duration: int):",
        "        \"\"\"Simulate phase execution with agent updates\"\"\"",
        "        ",
        "        # Simulate different agents working on the phase"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/monitoring/interactive_control_system.py",
      "line": 265,
      "type": "Simulation",
      "description": "# Simulate different agents working on the phase",
      "context": [
        "        \"\"\"Simulate phase execution with agent updates\"\"\"",
        "        ",
        "        # Simulate different agents working on the phase",
        "        agents = [",
        "            (\"architect\", \"Designing system architecture\"),"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/monitoring/interactive_control_system.py",
      "line": 306,
      "type": "Simulation",
      "description": "tokens_generated=progress * 3,  # Simulate token generation",
      "context": [
        "                    progress_percent=progress,",
        "                    current_step=task_desc,",
        "                    tokens_generated=progress * 3,  # Simulate token generation",
        "                    time_elapsed=progress * 0.1,",
        "                    memory_usage_mb=256 + progress * 2"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/monitoring/interactive_control_system.py",
      "line": 340,
      "type": "Simulation",
      "description": "# Simulate quality check",
      "context": [
        "                await asyncio.sleep(30)  # Check every 30 seconds",
        "                ",
        "                # Simulate quality check",
        "                print(\"\ud83d\udd0d Performing quality check...\")",
        "                "
      ],
      "complexity": "Low",
      "priority": 5
    },
    {
      "file": "shared/monitoring/interactive_control_system.py",
      "line": 356,
      "type": "Simulation",
      "description": "# For demo, we'll create a simulated quality report",
      "context": [
        "        ",
        "        # In real implementation, this would analyze the actual generated project",
        "        # For demo, we'll create a simulated quality report",
        "        ",
        "        sample_report = QualityReport("
      ],
      "complexity": "Low",
      "priority": 5
    },
    {
      "file": "shared/monitoring/interactive_control_system.py",
      "line": 555,
      "type": "Simulation",
      "description": "# Simulate project execution (would integrate with real ProjectOrchestrator)",
      "context": [
        "        )",
        "        ",
        "        # Simulate project execution (would integrate with real ProjectOrchestrator)",
        "        class MockOrchestrator:",
        "            async def execute_project(self, requirements, project_name):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/monitoring/interactive_control_system.py",
      "line": 556,
      "type": "Mock Class",
      "description": "class MockOrchestrator:",
      "context": [
        "        ",
        "        # Simulate project execution (would integrate with real ProjectOrchestrator)",
        "        class MockOrchestrator:",
        "            async def execute_project(self, requirements, project_name):",
        "                return {\"status\": \"completed\", \"artifacts\": [\"main.py\", \"models.py\", \"api.py\"]}"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/monitoring/interactive_control_system.py",
      "line": 560,
      "type": "Mock Implementation",
      "description": "mock_orchestrator = MockOrchestrator()",
      "context": [
        "                return {\"status\": \"completed\", \"artifacts\": [\"main.py\", \"models.py\", \"api.py\"]}",
        "                ",
        "        mock_orchestrator = MockOrchestrator()",
        "        ",
        "        # Execute with full interactive control"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/monitoring/interactive_control_system.py",
      "line": 565,
      "type": "Mock Implementation",
      "description": "project_orchestrator=mock_orchestrator,",
      "context": [
        "        result = await control_system.execute_project_with_control(",
        "            session=session,",
        "            project_orchestrator=mock_orchestrator,",
        "            requirements=\"Build a FastAPI REST API for user management with authentication\"",
        "        )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/monitoring/websocket_monitor_fixed.py",
      "line": 513,
      "type": "Simulation",
      "description": "# Simulate agent status updates",
      "context": [
        "    while True:",
        "        try:",
        "            # Simulate agent status updates",
        "            for i, agent in enumerate(agents):",
        "                is_active = (counter + i) % 3 != 0  # Simulate some agents being inactive"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/monitoring/websocket_monitor_fixed.py",
      "line": 515,
      "type": "Simulation",
      "description": "is_active = (counter + i) % 3 != 0  # Simulate some agents being inactive",
      "context": [
        "            # Simulate agent status updates",
        "            for i, agent in enumerate(agents):",
        "                is_active = (counter + i) % 3 != 0  # Simulate some agents being inactive",
        "                status_messages = [",
        "                    \"Idle - waiting for tasks\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/performance/optimizer.py",
      "line": 820,
      "type": "Simulation",
      "description": "# Simulate agent performance data analysis",
      "context": [
        "        suggestions = []",
        "        ",
        "        # Simulate agent performance data analysis",
        "        # In real implementation, this would analyze actual agent metrics",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/performance/optimizer.py",
      "line": 902,
      "type": "Mock Implementation",
      "description": "# Implement optimization (placeholder - actual implementation would vary)",
      "context": [
        "                suggestion.optimization_id not in self.implemented_optimizations):",
        "                ",
        "                # Implement optimization (placeholder - actual implementation would vary)",
        "                await self._implement_optimization(suggestion)",
        "                self.implemented_optimizations.add(suggestion.optimization_id)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/performance/optimizer.py",
      "line": 911,
      "type": "Mock Implementation",
      "description": "# Placeholder implementation - real implementation would depend on optimization type",
      "context": [
        "        print(f\"[AUTO-OPTIMIZATION] Implementing: {suggestion.title}\")",
        "        ",
        "        # Placeholder implementation - real implementation would depend on optimization type",
        "        if suggestion.type == OptimizationType.CACHING:",
        "            print(\"  - Enabling result caching\")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/performance/optimizer.py",
      "line": 1031,
      "type": "Simulation",
      "description": "# Simulate some LLM executions",
      "context": [
        "        resource_task, optimization_task = await optimizer.start_optimization_monitoring()",
        "        ",
        "        # Simulate some LLM executions",
        "        sample_executions = [",
        "            LLMPerformanceData("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/kaizen/active-metrics-analyzer.py",
      "line": 768,
      "type": "Simulation",
      "description": "# Simulate some task completions",
      "context": [
        "    analyzer.add_alert_callback(console_alert_handler)",
        "    ",
        "    # Simulate some task completions",
        "    print(\"\\n\ud83d\udcca Simulating task completions...\")",
        "    "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/kaizen/__init__.py",
      "line": 14,
      "type": "Mock Implementation",
      "description": "# Mock implementations for development",
      "context": [
        "]",
        "",
        "# Mock implementations for development",
        "class IntelligentModelSelector:",
        "    def __init__(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/typing_extensions.py",
      "line": 4097,
      "type": "Simulation",
      "description": "# between the locals and the globals. We simulate this by adding",
      "context": [
        "",
        "        # Type parameters exist in their own scope, which is logically",
        "        # between the locals and the globals. We simulate this by adding",
        "        # them to the globals.",
        "        if type_params is not None:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/click/utils.py",
      "line": 585,
      "type": "Simulation",
      "description": "\"\"\"Simulate Unix shell expansion with Python functions.",
      "context": [
        "    glob_recursive: bool = True,",
        ") -> list[str]:",
        "    \"\"\"Simulate Unix shell expansion with Python functions.",
        "",
        "    See :func:`glob.glob`, :func:`os.path.expanduser`, and"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 52,
      "type": "Mock Implementation",
      "description": "_mock_val_ser,",
      "context": [
        "    _decorators,",
        "    _internal_dataclass,",
        "    _mock_val_ser,",
        "    _schema_generation_shared,",
        ")"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 2406,
      "type": "Mock Implementation",
      "description": "if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
      "context": [
        "    schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)",
        "",
        "    if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
        "        cls.__pydantic_core_schema__.rebuild()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 2412,
      "type": "Mock Implementation",
      "description": "assert not isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
      "context": [
        "        raise AttributeError('model_json_schema() must be called on a subclass of BaseModel, not BaseModel itself.')",
        "",
        "    assert not isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
        "    return schema_generator_instance.generate(cls.__pydantic_core_schema__, mode=mode)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/json_schema.py",
      "line": 2444,
      "type": "Mock Implementation",
      "description": "if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
      "context": [
        "    \"\"\"",
        "    for cls, _ in models:",
        "        if isinstance(cls.__pydantic_core_schema__, _mock_val_ser.MockCoreSchema):",
        "            cls.__pydantic_core_schema__.rebuild()",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 42,
      "type": "Mock Implementation",
      "description": "_mock_val_ser,",
      "context": [
        "    _forward_ref,",
        "    _generics,",
        "    _mock_val_ser,",
        "    _model_construction,",
        "    _namespace_utils,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 106,
      "type": "Mock Method",
      "description": "# is initialized, by wrapping the user-defined `model_post_init()`), e.g. if they mock",
      "context": [
        "        # While the attribute should be present at this point, this may not be the case if",
        "        # users do unusual stuff with `model_post_init()` (which is where the  `__pydantic_private__`",
        "        # is initialized, by wrapping the user-defined `model_post_init()`), e.g. if they mock",
        "        # the `model_post_init()` call. Ideally we should find a better way to init private attrs.",
        "        object.__setattr__(model, '__pydantic_private__', {})"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 226,
      "type": "Mock Implementation",
      "description": "__pydantic_core_schema__ = _mock_val_ser.MockCoreSchema(",
      "context": [
        "        # Prevent `BaseModel` from being instantiated directly",
        "        # (defined in an `if not TYPE_CHECKING` block for clarity and to avoid type checking errors):",
        "        __pydantic_core_schema__ = _mock_val_ser.MockCoreSchema(",
        "            'Pydantic models should inherit from BaseModel, BaseModel cannot be instantiated directly',",
        "            code='base-model-instantiated',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 230,
      "type": "Mock Implementation",
      "description": "__pydantic_validator__ = _mock_val_ser.MockValSer(",
      "context": [
        "            code='base-model-instantiated',",
        "        )",
        "        __pydantic_validator__ = _mock_val_ser.MockValSer(",
        "            'Pydantic models should inherit from BaseModel, BaseModel cannot be instantiated directly',",
        "            val_or_ser='validator',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 235,
      "type": "Mock Implementation",
      "description": "__pydantic_serializer__ = _mock_val_ser.MockValSer(",
      "context": [
        "            code='base-model-instantiated',",
        "        )",
        "        __pydantic_serializer__ = _mock_val_ser.MockValSer(",
        "            'Pydantic models should inherit from BaseModel, BaseModel cannot be instantiated directly',",
        "            val_or_ser='serializer',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 620,
      "type": "Mock Implementation",
      "description": "if attr in cls.__dict__ and not isinstance(getattr(cls, attr), _mock_val_ser.MockValSer):",
      "context": [
        "",
        "        for attr in ('__pydantic_core_schema__', '__pydantic_validator__', '__pydantic_serializer__'):",
        "            if attr in cls.__dict__ and not isinstance(getattr(cls, attr), _mock_val_ser.MockValSer):",
        "                # Deleting the validator/serializer is necessary as otherwise they can get reused in",
        "                # pydantic-core. We do so only if they aren't mock instances, otherwise \u2014 as `model_rebuild()`"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 652,
      "type": "Mock Implementation",
      "description": "_mock_val_ser.set_model_mocks(cls, f'`{exc.name}`')",
      "context": [
        "            except NameError as e:",
        "                exc = PydanticUndefinedAnnotation.from_name_error(e)",
        "                _mock_val_ser.set_model_mocks(cls, f'`{exc.name}`')",
        "                if raise_errors:",
        "                    raise exc from e"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/main.py",
      "line": 800,
      "type": "Mock Implementation",
      "description": "if schema is not None and not isinstance(schema, _mock_val_ser.MockCoreSchema):",
      "context": [
        "        # Logic copied over from `GenerateSchema._model_schema`:",
        "        schema = cls.__dict__.get('__pydantic_core_schema__')",
        "        if schema is not None and not isinstance(schema, _mock_val_ser.MockCoreSchema):",
        "            return cls.__pydantic_core_schema__",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 25,
      "type": "Mock Implementation",
      "description": "from ._internal import _config, _generate_schema, _mock_val_ser, _namespace_utils, _repr, _typing_extra, _utils",
      "context": [
        "from pydantic.main import BaseModel, IncEx",
        "",
        "from ._internal import _config, _generate_schema, _mock_val_ser, _namespace_utils, _repr, _typing_extra, _utils",
        "from .config import ConfigDict",
        "from .errors import PydanticUndefinedAnnotation"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 254,
      "type": "Mock Method",
      "description": "If `force` is set to `False` and `_defer_build` is `True`, the core schema, validator, and serializer will be set to mocks.",
      "context": [
        "            ns_resolver: The namespace resolver to use when building the core schema for the adapted type.",
        "            force: Whether to force the construction of the core schema, validator, and serializer.",
        "                If `force` is set to `False` and `_defer_build` is `True`, the core schema, validator, and serializer will be set to mocks.",
        "            raise_errors: Whether to raise errors if initializing any of the core attrs fails.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 265,
      "type": "Mock Implementation",
      "description": "_mock_val_ser.set_type_adapter_mocks(self)",
      "context": [
        "        \"\"\"",
        "        if not force and self._defer_build:",
        "            _mock_val_ser.set_type_adapter_mocks(self)",
        "            self.pydantic_complete = False",
        "            return False"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 278,
      "type": "Mock Implementation",
      "description": "isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
      "context": [
        "            # so we simply skip to the block below that does the actual schema generation",
        "            if (",
        "                isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
        "                or isinstance(self.validator, _mock_val_ser.MockValSer)",
        "                or isinstance(self.serializer, _mock_val_ser.MockValSer)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 279,
      "type": "Mock Implementation",
      "description": "or isinstance(self.validator, _mock_val_ser.MockValSer)",
      "context": [
        "            if (",
        "                isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
        "                or isinstance(self.validator, _mock_val_ser.MockValSer)",
        "                or isinstance(self.serializer, _mock_val_ser.MockValSer)",
        "            ):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 280,
      "type": "Mock Implementation",
      "description": "or isinstance(self.serializer, _mock_val_ser.MockValSer)",
      "context": [
        "                isinstance(self.core_schema, _mock_val_ser.MockCoreSchema)",
        "                or isinstance(self.validator, _mock_val_ser.MockValSer)",
        "                or isinstance(self.serializer, _mock_val_ser.MockValSer)",
        "            ):",
        "                raise AttributeError()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 293,
      "type": "Mock Implementation",
      "description": "_mock_val_ser.set_type_adapter_mocks(self)",
      "context": [
        "                if raise_errors:",
        "                    raise",
        "                _mock_val_ser.set_type_adapter_mocks(self)",
        "                return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 299,
      "type": "Mock Implementation",
      "description": "_mock_val_ser.set_type_adapter_mocks(self)",
      "context": [
        "                self.core_schema = schema_generator.clean_schema(core_schema)",
        "            except _generate_schema.InvalidSchemaError:",
        "                _mock_val_ser.set_type_adapter_mocks(self)",
        "                return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 667,
      "type": "Mock Implementation",
      "description": "if isinstance(self.core_schema, _mock_val_ser.MockCoreSchema):",
      "context": [
        "        \"\"\"",
        "        schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)",
        "        if isinstance(self.core_schema, _mock_val_ser.MockCoreSchema):",
        "            self.core_schema.rebuild()",
        "            assert not isinstance(self.core_schema, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 669,
      "type": "Mock Implementation",
      "description": "assert not isinstance(self.core_schema, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
      "context": [
        "        if isinstance(self.core_schema, _mock_val_ser.MockCoreSchema):",
        "            self.core_schema.rebuild()",
        "            assert not isinstance(self.core_schema, _mock_val_ser.MockCoreSchema), 'this is a bug! please report it'",
        "        return schema_generator_instance.generate(self.core_schema, mode=mode)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 710,
      "type": "Mock Implementation",
      "description": "if isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema):",
      "context": [
        "        for key, mode, adapter in inputs:",
        "            # This is the same pattern we follow for model json schemas - we attempt a core schema rebuild if we detect a mock",
        "            if isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema):",
        "                adapter.core_schema.rebuild()",
        "                assert not isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema), ("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/type_adapter.py",
      "line": 712,
      "type": "Mock Implementation",
      "description": "assert not isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema), (",
      "context": [
        "            if isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema):",
        "                adapter.core_schema.rebuild()",
        "                assert not isinstance(adapter.core_schema, _mock_val_ser.MockCoreSchema), (",
        "                    'this is a bug! please report it'",
        "                )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/uvloop/_testbase.py",
      "line": 24,
      "type": "Mock Class",
      "description": "class MockPattern(str):",
      "context": [
        "",
        "",
        "class MockPattern(str):",
        "    def __eq__(self, other):",
        "        return bool(re.search(str(self), other, re.S))"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/uvloop/_testbase.py",
      "line": 70,
      "type": "Mock Method",
      "description": "def mock_pattern(self, str):",
      "context": [
        "        raise NotImplementedError",
        "",
        "    def mock_pattern(self, str):",
        "        return MockPattern(str)",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/uvloop/_testbase.py",
      "line": 70,
      "type": "Mock Method",
      "description": "def mock_pattern(self, str):",
      "context": [
        "        raise NotImplementedError",
        "",
        "    def mock_pattern(self, str):",
        "        return MockPattern(str)",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/uvloop/_testbase.py",
      "line": 71,
      "type": "Mock Implementation",
      "description": "return MockPattern(str)",
      "context": [
        "",
        "    def mock_pattern(self, str):",
        "        return MockPattern(str)",
        "",
        "    async def wait_closed(self, obj):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/tenacity/nap.py",
      "line": 29,
      "type": "Mock Method",
      "description": "This is the default strategy, and may be mocked out for unit testing.",
      "context": [
        "    Sleep strategy that delays execution for a given number of seconds.",
        "",
        "    This is the default strategy, and may be mocked out for unit testing.",
        "    \"\"\"",
        "    time.sleep(seconds)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/redis/connection.py",
      "line": 1649,
      "type": "Mock Method",
      "description": "async def _mock(self, error: RedisError):",
      "context": [
        "                conn.set_re_auth_token(token)",
        "",
        "    async def _mock(self, error: RedisError):",
        "        \"\"\"",
        "        Dummy functions, needs to be passed as error callback to retry object."
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/__init__.py",
      "line": 20,
      "type": "Mock Implementation",
      "description": "from .engine import create_mock_engine as create_mock_engine",
      "context": [
        "from .engine import Connection as Connection",
        "from .engine import create_engine as create_engine",
        "from .engine import create_mock_engine as create_mock_engine",
        "from .engine import create_pool_from_url as create_pool_from_url",
        "from .engine import CreateEnginePlugin as CreateEnginePlugin"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/requests/cookies.py",
      "line": 23,
      "type": "Mock Class",
      "description": "class MockRequest:",
      "context": [
        "",
        "",
        "class MockRequest:",
        "    \"\"\"Wraps a `requests.Request` to mimic a `urllib2.Request`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/requests/cookies.py",
      "line": 103,
      "type": "Mock Class",
      "description": "class MockResponse:",
      "context": [
        "",
        "",
        "class MockResponse:",
        "    \"\"\"Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/requests/models.py",
      "line": 845,
      "type": "Simulation",
      "description": "# simulate reading small chunks of the content",
      "context": [
        "                f\"chunk_size must be an int, it is instead a {type(chunk_size)}.\"",
        "            )",
        "        # simulate reading small chunks of the content",
        "        reused_chunks = iter_slices(self._content, chunk_size)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 88,
      "type": "Mock Method",
      "description": "def num_mock_patch_args(function) -> int:",
      "context": [
        "",
        "",
        "def num_mock_patch_args(function) -> int:",
        "    \"\"\"Return number of arguments used up by mock arguments (if any).\"\"\"",
        "    patchings = getattr(function, \"patchings\", None)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 88,
      "type": "Mock Method",
      "description": "def num_mock_patch_args(function) -> int:",
      "context": [
        "",
        "",
        "def num_mock_patch_args(function) -> int:",
        "    \"\"\"Return number of arguments used up by mock arguments (if any).\"\"\"",
        "    patchings = getattr(function, \"patchings\", None)"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 89,
      "type": "Mock Implementation",
      "description": "\"\"\"Return number of arguments used up by mock arguments (if any).\"\"\"",
      "context": [
        "",
        "def num_mock_patch_args(function) -> int:",
        "    \"\"\"Return number of arguments used up by mock arguments (if any).\"\"\"",
        "    patchings = getattr(function, \"patchings\", None)",
        "    if not patchings:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 94,
      "type": "Mock Method",
      "description": "mock_sentinel = getattr(sys.modules.get(\"mock\"), \"DEFAULT\", object())",
      "context": [
        "        return 0",
        "",
        "    mock_sentinel = getattr(sys.modules.get(\"mock\"), \"DEFAULT\", object())",
        "    ut_mock_sentinel = getattr(sys.modules.get(\"unittest.mock\"), \"DEFAULT\", object())",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 95,
      "type": "Mock Method",
      "description": "ut_mock_sentinel = getattr(sys.modules.get(\"unittest.mock\"), \"DEFAULT\", object())",
      "context": [
        "",
        "    mock_sentinel = getattr(sys.modules.get(\"mock\"), \"DEFAULT\", object())",
        "    ut_mock_sentinel = getattr(sys.modules.get(\"unittest.mock\"), \"DEFAULT\", object())",
        "",
        "    return len("
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 102,
      "type": "Mock Implementation",
      "description": "and (p.new is mock_sentinel or p.new is ut_mock_sentinel)",
      "context": [
        "            for p in patchings",
        "            if not p.attribute_name",
        "            and (p.new is mock_sentinel or p.new is ut_mock_sentinel)",
        "        ]",
        "    )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/compat.py",
      "line": 171,
      "type": "Mock Implementation",
      "description": "arg_names = arg_names[num_mock_patch_args(function) :]",
      "context": [
        "    # Remove any names that will be replaced with mocks.",
        "    if hasattr(function, \"__wrapped__\"):",
        "        arg_names = arg_names[num_mock_patch_args(function) :]",
        "    return arg_names",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 461,
      "type": "Mock Method",
      "description": "def _is_mocked(obj: object) -> bool:",
      "context": [
        "",
        "",
        "def _is_mocked(obj: object) -> bool:",
        "    \"\"\"Return if an object is possibly a mock object by checking the",
        "    existence of a highly improbable attribute.\"\"\""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 462,
      "type": "Mock Implementation",
      "description": "\"\"\"Return if an object is possibly a mock object by checking the",
      "context": [
        "",
        "def _is_mocked(obj: object) -> bool:",
        "    \"\"\"Return if an object is possibly a mock object by checking the",
        "    existence of a highly improbable attribute.\"\"\"",
        "    return ("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 465,
      "type": "Mock Implementation",
      "description": "safe_getattr(obj, \"pytest_mock_example_attribute_that_shouldnt_exist\", None)",
      "context": [
        "    existence of a highly improbable attribute.\"\"\"",
        "    return (",
        "        safe_getattr(obj, \"pytest_mock_example_attribute_that_shouldnt_exist\", None)",
        "        is not None",
        "    )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 471,
      "type": "Mock Method",
      "description": "def _patch_unwrap_mock_aware() -> Generator[None]:",
      "context": [
        "",
        "@contextmanager",
        "def _patch_unwrap_mock_aware() -> Generator[None]:",
        "    \"\"\"Context manager which replaces ``inspect.unwrap`` with a version",
        "    that's aware of mock objects and doesn't recurse into them.\"\"\""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 471,
      "type": "Mock Method",
      "description": "def _patch_unwrap_mock_aware() -> Generator[None]:",
      "context": [
        "",
        "@contextmanager",
        "def _patch_unwrap_mock_aware() -> Generator[None]:",
        "    \"\"\"Context manager which replaces ``inspect.unwrap`` with a version",
        "    that's aware of mock objects and doesn't recurse into them.\"\"\""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 476,
      "type": "Mock Method",
      "description": "def _mock_aware_unwrap(",
      "context": [
        "    real_unwrap = inspect.unwrap",
        "",
        "    def _mock_aware_unwrap(",
        "        func: Callable[..., Any], *, stop: Callable[[Any], Any] | None = None",
        "    ) -> Any:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 476,
      "type": "Mock Method",
      "description": "def _mock_aware_unwrap(",
      "context": [
        "    real_unwrap = inspect.unwrap",
        "",
        "    def _mock_aware_unwrap(",
        "        func: Callable[..., Any], *, stop: Callable[[Any], Any] | None = None",
        "    ) -> Any:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 481,
      "type": "Mock Implementation",
      "description": "return real_unwrap(func, stop=_is_mocked)",
      "context": [
        "        try:",
        "            if stop is None or stop is _is_mocked:",
        "                return real_unwrap(func, stop=_is_mocked)",
        "            _stop = stop",
        "            return real_unwrap(func, stop=lambda obj: _is_mocked(obj) or _stop(func))"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 483,
      "type": "Mock Implementation",
      "description": "return real_unwrap(func, stop=lambda obj: _is_mocked(obj) or _stop(func))",
      "context": [
        "                return real_unwrap(func, stop=_is_mocked)",
        "            _stop = stop",
        "            return real_unwrap(func, stop=lambda obj: _is_mocked(obj) or _stop(func))",
        "        except Exception as e:",
        "            warnings.warn("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 493,
      "type": "Mock Implementation",
      "description": "inspect.unwrap = _mock_aware_unwrap",
      "context": [
        "            raise",
        "",
        "    inspect.unwrap = _mock_aware_unwrap",
        "    try:",
        "        yield"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 504,
      "type": "Mock Class",
      "description": "class MockAwareDocTestFinder(doctest.DocTestFinder):",
      "context": [
        "        import doctest",
        "",
        "        class MockAwareDocTestFinder(doctest.DocTestFinder):",
        "            py_ver_info_minor = sys.version_info[:2]",
        "            is_find_lineno_broken = ("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/doctest.py",
      "line": 545,
      "type": "Mock Implementation",
      "description": "with _patch_unwrap_mock_aware():",
      "context": [
        "                    if _is_mocked(obj):",
        "                        return  # pragma: no cover",
        "                    with _patch_unwrap_mock_aware():",
        "                        # Type ignored because this is a private function.",
        "                        super()._find(  # type:ignore[misc]"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/python.py",
      "line": 219,
      "type": "Mock Implementation",
      "description": "# mock seems to store unbound methods (issue473), normalize it.",
      "context": [
        "            return Class.from_parent(collector, name=name, obj=obj)",
        "    elif collector.istestfunction(obj, name):",
        "        # mock seems to store unbound methods (issue473), normalize it.",
        "        obj = getattr(obj, \"__func__\", obj)",
        "        # We need to try and unwrap the function if it's a functools.partial"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/timing.py",
      "line": 6,
      "type": "Mock Implementation",
      "description": "Fixture \"mock_timing\" also interacts with this module for pytest's own tests.",
      "context": [
        "pytest runtime information (issue #185).",
        "",
        "Fixture \"mock_timing\" also interacts with this module for pytest's own tests.",
        "\"\"\"",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/_pytest/timing.py",
      "line": 66,
      "type": "Mock Class",
      "description": "class MockTiming:",
      "context": [
        "",
        "@dataclasses.dataclass",
        "class MockTiming:",
        "    \"\"\"Mocks _pytest.timing with a known object that can be used to control timing in tests",
        "    deterministically."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/checker.py",
      "line": 2754,
      "type": "Mock Class",
      "description": "Base.__init_subclass__(thing=5) is called at line 4. This is what we simulate here.",
      "context": [
        "            7   Child()",
        "",
        "        Base.__init_subclass__(thing=5) is called at line 4. This is what we simulate here.",
        "        Child.__init_subclass__ is never called.",
        "        \"\"\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/meet.py",
      "line": 415,
      "type": "Simulation",
      "description": "# Handling the TypeVarLikes now lets us simulate having them bind to the corresponding",
      "context": [
        "    # the same logic if either type happens to be a TypeVar/ParamSpec/TypeVarTuple.",
        "    #",
        "    # Handling the TypeVarLikes now lets us simulate having them bind to the corresponding",
        "    # type -- if we deferred these checks, the \"return-early\" logic of the other",
        "    # checks will prevent us from detecting certain overlaps."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/metastore.py",
      "line": 6,
      "type": "Simulation",
      "description": "* A hokey sqlite backed implementation, which basically simulates",
      "context": [
        " * The \"classic\" file system implementation, which uses a directory",
        "   structure of files.",
        " * A hokey sqlite backed implementation, which basically simulates",
        "   the file system in an effort to work around poor file system performance",
        "   on OS X."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mako/codegen.py",
      "line": 904,
      "type": "Simulation",
      "description": "# to simulate \"enclosing scope\"",
      "context": [
        "                # declared/modified variables into the \"__M_locals\" dictionary,",
        "                # which is used for def calls within the same template,",
        "                # to simulate \"enclosing scope\"",
        "                self.printer.writeline(",
        "                    \"__M_locals_builtin_stored = __M_locals_builtin()\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 633,
      "type": "Mock Method",
      "description": "def _create_app_mock() -> mock.MagicMock:",
      "context": [
        "",
        "",
        "def _create_app_mock() -> mock.MagicMock:",
        "    def get_dict(app: Any, key: str) -> Any:",
        "        return app.__app_dict[key]"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 651,
      "type": "Mock Method",
      "description": "def _create_transport(sslcontext: Optional[SSLContext] = None) -> mock.Mock:",
      "context": [
        "",
        "",
        "def _create_transport(sslcontext: Optional[SSLContext] = None) -> mock.Mock:",
        "    transport = mock.Mock()",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 664,
      "type": "Mock Method",
      "description": "def make_mocked_request(",
      "context": [
        "",
        "",
        "def make_mocked_request(",
        "    method: str,",
        "    path: str,"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 762,
      "type": "Mock Method",
      "description": "def make_mocked_coro(",
      "context": [
        "",
        "",
        "def make_mocked_coro(",
        "    return_value: Any = sentinel, raise_exception: Any = sentinel",
        ") -> Any:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 767,
      "type": "Mock Method",
      "description": "async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
      "context": [
        "    \"\"\"Creates a coroutine mock.\"\"\"",
        "",
        "    async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
        "        if raise_exception is not sentinel:",
        "            raise raise_exception"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 767,
      "type": "Mock Method",
      "description": "async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
      "context": [
        "    \"\"\"Creates a coroutine mock.\"\"\"",
        "",
        "    async def mock_coro(*args: Any, **kwargs: Any) -> Any:",
        "        if raise_exception is not sentinel:",
        "            raise raise_exception"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 774,
      "type": "Mock Implementation",
      "description": "return mock.Mock(wraps=mock_coro)",
      "context": [
        "        await return_value",
        "",
        "    return mock.Mock(wraps=mock_coro)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
      "line": 774,
      "type": "Mock Implementation",
      "description": "return mock.Mock(wraps=mock_coro)",
      "context": [
        "        await return_value",
        "",
        "    return mock.Mock(wraps=mock_coro)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain/utils/__init__.py",
      "line": 28,
      "type": "Mock Implementation",
      "description": "mock_now,",
      "context": [
        "    get_pydantic_field_names,",
        "    guard_import,",
        "    mock_now,",
        "    raise_for_status_with_text,",
        "    xor_args,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain/utils/__init__.py",
      "line": 71,
      "type": "Mock Implementation",
      "description": "\"mock_now\",",
      "context": [
        "    \"get_pydantic_field_names\",",
        "    \"guard_import\",",
        "    \"mock_now\",",
        "    \"print_text\",",
        "    \"raise_for_status_with_text\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain/utils/utils.py",
      "line": 7,
      "type": "Mock Implementation",
      "description": "mock_now,",
      "context": [
        "    get_pydantic_field_names,",
        "    guard_import,",
        "    mock_now,",
        "    raise_for_status_with_text,",
        "    xor_args,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain/utils/utils.py",
      "line": 18,
      "type": "Mock Implementation",
      "description": "\"mock_now\",",
      "context": [
        "    \"get_pydantic_field_names\",",
        "    \"guard_import\",",
        "    \"mock_now\",",
        "    \"raise_for_status_with_text\",",
        "    \"xor_args\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/__init__.py",
      "line": 39,
      "type": "Mock Implementation",
      "description": "mock_now,",
      "context": [
        "        get_pydantic_field_names,",
        "        guard_import,",
        "        mock_now,",
        "        raise_for_status_with_text,",
        "        secret_from_env,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/__init__.py",
      "line": 63,
      "type": "Mock Implementation",
      "description": "\"mock_now\",",
      "context": [
        "    \"guard_import\",",
        "    \"image\",",
        "    \"mock_now\",",
        "    \"pre_init\",",
        "    \"print_text\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/__init__.py",
      "line": 99,
      "type": "Mock Implementation",
      "description": "\"mock_now\": \"utils\",",
      "context": [
        "    \"get_pydantic_field_names\": \"utils\",",
        "    \"guard_import\": \"utils\",",
        "    \"mock_now\": \"utils\",",
        "    \"secret_from_env\": \"utils\",",
        "    \"xor_args\": \"utils\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 74,
      "type": "Mock Method",
      "description": "def mock_now(dt_value: datetime.datetime) -> Iterator[type]:",
      "context": [
        "",
        "@contextlib.contextmanager",
        "def mock_now(dt_value: datetime.datetime) -> Iterator[type]:",
        "    \"\"\"Context manager for mocking out datetime.now() in unit tests.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 74,
      "type": "Mock Method",
      "description": "def mock_now(dt_value: datetime.datetime) -> Iterator[type]:",
      "context": [
        "",
        "@contextlib.contextmanager",
        "def mock_now(dt_value: datetime.datetime) -> Iterator[type]:",
        "    \"\"\"Context manager for mocking out datetime.now() in unit tests.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 84,
      "type": "Mock Implementation",
      "description": "with mock_now(datetime.datetime(2011, 2, 3, 10, 11)):",
      "context": [
        "",
        "    Example:",
        "    with mock_now(datetime.datetime(2011, 2, 3, 10, 11)):",
        "        assert datetime.datetime.now() == datetime.datetime(2011, 2, 3, 10, 11)",
        "    \"\"\""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 88,
      "type": "Mock Class",
      "description": "class MockDateTime(datetime.datetime):",
      "context": [
        "    \"\"\"",
        "",
        "    class MockDateTime(datetime.datetime):",
        "        \"\"\"Mock datetime.datetime.now() with a fixed datetime.\"\"\"",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 93,
      "type": "Mock Method",
      "description": "def now(cls, tz: Union[datetime.tzinfo, None] = None) -> \"MockDateTime\":",
      "context": [
        "        @classmethod",
        "        @override",
        "        def now(cls, tz: Union[datetime.tzinfo, None] = None) -> \"MockDateTime\":",
        "            # Create a copy of dt_value.",
        "            return MockDateTime("
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/langchain_core/utils/utils.py",
      "line": 95,
      "type": "Mock Implementation",
      "description": "return MockDateTime(",
      "context": [
        "        def now(cls, tz: Union[datetime.tzinfo, None] = None) -> \"MockDateTime\":",
        "            # Create a copy of dt_value.",
        "            return MockDateTime(",
        "                dt_value.year,",
        "                dt_value.month,"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/alembic/runtime/migration.py",
      "line": 676,
      "type": "Mock Implementation",
      "description": "return MockEngineStrategy.MockConnection(self.dialect, dump)",
      "context": [
        "            self.impl._exec(construct)",
        "",
        "        return MockEngineStrategy.MockConnection(self.dialect, dump)",
        "",
        "    @property"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/alembic/testing/fixtures.py",
      "line": 13,
      "type": "Mock Implementation",
      "description": "from sqlalchemy import create_mock_engine",
      "context": [
        "",
        "from sqlalchemy import Column",
        "from sqlalchemy import create_mock_engine",
        "from sqlalchemy import inspect",
        "from sqlalchemy import MetaData"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/alembic/testing/fixtures.py",
      "line": 104,
      "type": "Mock Implementation",
      "description": "engine = create_mock_engine(dialect, dump)",
      "context": [
        "        buf.append(str(sql.compile(dialect=engine.dialect)))",
        "",
        "    engine = create_mock_engine(dialect, dump)",
        "    return engine, buf",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/alembic/testing/suite/test_autogen_computed.py",
      "line": 100,
      "type": "Mock Implementation",
      "description": "with mock.patch(\"alembic.util.warn\") as mock_warn:",
      "context": [
        "        )",
        "",
        "        with mock.patch(\"alembic.util.warn\") as mock_warn:",
        "            diffs = self._fixture(m1, m2)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/alembic/testing/suite/test_autogen_computed.py",
      "line": 104,
      "type": "Mock Implementation",
      "description": "mock_warn.mock_calls,",
      "context": [
        "",
        "        eq_(",
        "            mock_warn.mock_calls,",
        "            [mock.call(\"Computed default on user.foo cannot be modified\")],",
        "        )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/alembic/testing/suite/test_autogen_computed.py",
      "line": 140,
      "type": "Mock Implementation",
      "description": "with mock.patch(\"alembic.util.warn\") as mock_warn:",
      "context": [
        "        )",
        "",
        "        with mock.patch(\"alembic.util.warn\") as mock_warn:",
        "            diffs = self._fixture(m1, m2)",
        "        eq_(mock_warn.mock_calls, [])"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/alembic/testing/suite/test_autogen_computed.py",
      "line": 142,
      "type": "Mock Implementation",
      "description": "eq_(mock_warn.mock_calls, [])",
      "context": [
        "        with mock.patch(\"alembic.util.warn\") as mock_warn:",
        "            diffs = self._fixture(m1, m2)",
        "        eq_(mock_warn.mock_calls, [])",
        "",
        "        eq_(list(diffs), [])"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpx/_transports/mock.py",
      "line": 15,
      "type": "Mock Class",
      "description": "class MockTransport(AsyncBaseTransport, BaseTransport):",
      "context": [
        "",
        "",
        "class MockTransport(AsyncBaseTransport, BaseTransport):",
        "    def __init__(self, handler: SyncHandler | AsyncHandler) -> None:",
        "        self.handler = handler"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 16,
      "type": "Mock Class",
      "description": "class MockSSLObject:",
      "context": [
        "",
        "",
        "class MockSSLObject:",
        "    def __init__(self, http2: bool):",
        "        self._http2 = http2"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 24,
      "type": "Mock Class",
      "description": "class MockStream(NetworkStream):",
      "context": [
        "",
        "",
        "class MockStream(NetworkStream):",
        "    def __init__(self, buffer: list[bytes], http2: bool = False) -> None:",
        "        self._buffer = buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 52,
      "type": "Mock Implementation",
      "description": "return MockSSLObject(http2=self._http2) if info == \"ssl_object\" else None",
      "context": [
        "",
        "    def get_extra_info(self, info: str) -> typing.Any:",
        "        return MockSSLObject(http2=self._http2) if info == \"ssl_object\" else None",
        "",
        "    def __repr__(self) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 55,
      "type": "Mock Implementation",
      "description": "return \"<httpcore.MockStream>\"",
      "context": [
        "",
        "    def __repr__(self) -> str:",
        "        return \"<httpcore.MockStream>\"",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 58,
      "type": "Mock Class",
      "description": "class MockBackend(NetworkBackend):",
      "context": [
        "",
        "",
        "class MockBackend(NetworkBackend):",
        "    def __init__(self, buffer: list[bytes], http2: bool = False) -> None:",
        "        self._buffer = buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 71,
      "type": "Mock Implementation",
      "description": "return MockStream(list(self._buffer), http2=self._http2)",
      "context": [
        "        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,",
        "    ) -> NetworkStream:",
        "        return MockStream(list(self._buffer), http2=self._http2)",
        "",
        "    def connect_unix_socket("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 79,
      "type": "Mock Implementation",
      "description": "return MockStream(list(self._buffer), http2=self._http2)",
      "context": [
        "        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,",
        "    ) -> NetworkStream:",
        "        return MockStream(list(self._buffer), http2=self._http2)",
        "",
        "    def sleep(self, seconds: float) -> None:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 85,
      "type": "Mock Class",
      "description": "class AsyncMockStream(AsyncNetworkStream):",
      "context": [
        "",
        "",
        "class AsyncMockStream(AsyncNetworkStream):",
        "    def __init__(self, buffer: list[bytes], http2: bool = False) -> None:",
        "        self._buffer = buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 113,
      "type": "Mock Implementation",
      "description": "return MockSSLObject(http2=self._http2) if info == \"ssl_object\" else None",
      "context": [
        "",
        "    def get_extra_info(self, info: str) -> typing.Any:",
        "        return MockSSLObject(http2=self._http2) if info == \"ssl_object\" else None",
        "",
        "    def __repr__(self) -> str:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 116,
      "type": "Mock Implementation",
      "description": "return \"<httpcore.AsyncMockStream>\"",
      "context": [
        "",
        "    def __repr__(self) -> str:",
        "        return \"<httpcore.AsyncMockStream>\"",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 119,
      "type": "Mock Class",
      "description": "class AsyncMockBackend(AsyncNetworkBackend):",
      "context": [
        "",
        "",
        "class AsyncMockBackend(AsyncNetworkBackend):",
        "    def __init__(self, buffer: list[bytes], http2: bool = False) -> None:",
        "        self._buffer = buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 132,
      "type": "Mock Implementation",
      "description": "return AsyncMockStream(list(self._buffer), http2=self._http2)",
      "context": [
        "        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,",
        "    ) -> AsyncNetworkStream:",
        "        return AsyncMockStream(list(self._buffer), http2=self._http2)",
        "",
        "    async def connect_unix_socket("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/httpcore/_backends/mock.py",
      "line": 140,
      "type": "Mock Implementation",
      "description": "return AsyncMockStream(list(self._buffer), http2=self._http2)",
      "context": [
        "        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,",
        "    ) -> AsyncNetworkStream:",
        "        return AsyncMockStream(list(self._buffer), http2=self._http2)",
        "",
        "    async def sleep(self, seconds: float) -> None:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/plugins/attrs.py",
      "line": 850,
      "type": "Mock Class",
      "description": "\"\"\"Turn all the attributes into properties to simulate frozen classes.\"\"\"",
      "context": [
        "",
        "def _make_frozen(ctx: mypy.plugin.ClassDefContext, attributes: list[Attribute]) -> None:",
        "    \"\"\"Turn all the attributes into properties to simulate frozen classes.\"\"\"",
        "    for attribute in attributes:",
        "        if attribute.name in ctx.cls.info.names:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/test/teststubtest.py",
      "line": 563,
      "type": "Simulation",
      "description": "# Simulate \"<unrepresentable>\"",
      "context": [
        "        )",
        "",
        "        # Simulate \"<unrepresentable>\"",
        "        yield Case(",
        "            stub=\"def f11() -> None: ...\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/test/teststubtest.py",
      "line": 573,
      "type": "Simulation",
      "description": "# Simulate numpy ndarray.__bool__ that raises an error",
      "context": [
        "        )",
        "",
        "        # Simulate numpy ndarray.__bool__ that raises an error",
        "        yield Case(",
        "            stub=\"def f12(x=1): ...\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/test/testutil.py",
      "line": 14,
      "type": "Mock Implementation",
      "description": "mock_environ = os.environ.copy()",
      "context": [
        "        # when run using a pty, `os.get_terminal_size()` returns `0, 0`",
        "        ret = os.terminal_size((0, 0))",
        "        mock_environ = os.environ.copy()",
        "        mock_environ.pop(\"COLUMNS\", None)",
        "        with mock.patch.object(os, \"get_terminal_size\", return_value=ret):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/test/testutil.py",
      "line": 15,
      "type": "Mock Implementation",
      "description": "mock_environ.pop(\"COLUMNS\", None)",
      "context": [
        "        ret = os.terminal_size((0, 0))",
        "        mock_environ = os.environ.copy()",
        "        mock_environ.pop(\"COLUMNS\", None)",
        "        with mock.patch.object(os, \"get_terminal_size\", return_value=ret):",
        "            with mock.patch.dict(os.environ, values=mock_environ, clear=True):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/mypy/test/testutil.py",
      "line": 17,
      "type": "Mock Implementation",
      "description": "with mock.patch.dict(os.environ, values=mock_environ, clear=True):",
      "context": [
        "        mock_environ.pop(\"COLUMNS\", None)",
        "        with mock.patch.object(os, \"get_terminal_size\", return_value=ret):",
        "            with mock.patch.dict(os.environ, values=mock_environ, clear=True):",
        "                assert get_terminal_width() == 80",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 240,
      "type": "Simulation",
      "description": "assert False, \"simulated connect failure didn't work\"",
      "context": [
        "            # above, connection is closed",
        "            curs.execute(\"select 1\")",
        "            assert False, \"simulated connect failure didn't work\"",
        "        else:",
        "            self.connections.append(conn)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 387,
      "type": "Mock Method",
      "description": "def mock_engine(dialect_name=None):",
      "context": [
        "",
        "",
        "def mock_engine(dialect_name=None):",
        "    \"\"\"Provides a mocking engine based on the current testing.db.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 387,
      "type": "Mock Method",
      "description": "def mock_engine(dialect_name=None):",
      "context": [
        "",
        "",
        "def mock_engine(dialect_name=None):",
        "    \"\"\"Provides a mocking engine based on the current testing.db.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 399,
      "type": "Mock Implementation",
      "description": "from sqlalchemy import create_mock_engine",
      "context": [
        "    \"\"\"",
        "",
        "    from sqlalchemy import create_mock_engine",
        "",
        "    if not dialect_name:"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 415,
      "type": "Mock Implementation",
      "description": "return \"\\n\".join(str(s.compile(dialect=d)) for s in engine.mock)",
      "context": [
        "    def print_sql():",
        "        d = engine.dialect",
        "        return \"\\n\".join(str(s.compile(dialect=d)) for s in engine.mock)",
        "",
        "    engine = create_mock_engine(dialect_name + \"://\", executor)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/engines.py",
      "line": 417,
      "type": "Mock Implementation",
      "description": "engine = create_mock_engine(dialect_name + \"://\", executor)",
      "context": [
        "        return \"\\n\".join(str(s.compile(dialect=d)) for s in engine.mock)",
        "",
        "    engine = create_mock_engine(dialect_name + \"://\", executor)",
        "    assert not hasattr(engine, \"mock\")",
        "    engine.mock = buffer"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/config.py",
      "line": 63,
      "type": "Mock Implementation",
      "description": "return mock.Mock()",
      "context": [
        "        @property",
        "        def add_to_marker(self):",
        "            return mock.Mock()",
        "",
        "        def mark_base_test_class(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/requirements.py",
      "line": 1538,
      "type": "Mock Method",
      "description": "def threading_with_mock(self):",
      "context": [
        "",
        "    @property",
        "    def threading_with_mock(self):",
        "        \"\"\"Mark tests that use threading and mock at the same time - stability",
        "        issues have been observed with coverage"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/__init__.py",
      "line": 42,
      "type": "Mock Implementation",
      "description": "from .mock import create_mock_engine as create_mock_engine",
      "context": [
        "from .interfaces import ExecutionContext as ExecutionContext",
        "from .interfaces import TypeCompiler as TypeCompiler",
        "from .mock import create_mock_engine as create_mock_engine",
        "from .reflection import Inspector as Inspector",
        "from .reflection import ObjectKind as ObjectKind"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/url.py",
      "line": 858,
      "type": "Mock Implementation",
      "description": "name_or_url, \"_sqla_is_testing_if_this_is_a_mock_object\"",
      "context": [
        "        return _parse_url(name_or_url)",
        "    elif not isinstance(name_or_url, URL) and not hasattr(",
        "        name_or_url, \"_sqla_is_testing_if_this_is_a_mock_object\"",
        "    ):",
        "        raise exc.ArgumentError("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/strategies.py",
      "line": 15,
      "type": "Mock Class",
      "description": "class MockEngineStrategy:",
      "context": [
        "",
        "",
        "class MockEngineStrategy:",
        "    MockConnection = MockConnection",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py",
      "line": 25,
      "type": "Mock Implementation",
      "description": "from .mock import create_mock_engine",
      "context": [
        "from . import url as _url",
        "from .interfaces import DBAPIConnection",
        "from .mock import create_mock_engine",
        "from .. import event",
        "from .. import exc"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py",
      "line": 97,
      "type": "Mock Implementation",
      "description": "\":func:`.create_mock_engine` going forward.  For general \"",
      "context": [
        "        \"The :paramref:`_sa.create_engine.strategy` keyword is deprecated, \"",
        "        \"and the only argument accepted is 'mock'; please use \"",
        "        \":func:`.create_mock_engine` going forward.  For general \"",
        "        \"customization of create_engine which may have been accomplished \"",
        "        \"using strategies, see :class:`.CreateEnginePlugin`.\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py",
      "line": 557,
      "type": "Mock Implementation",
      "description": "return create_mock_engine(url, **kwargs)  # type: ignore",
      "context": [
        "        if strat == \"mock\":",
        "            # this case is deprecated",
        "            return create_mock_engine(url, **kwargs)  # type: ignore",
        "        else:",
        "            raise exc.ArgumentError(\"unknown strategy: %r\" % strat)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py",
      "line": 557,
      "type": "Mock Implementation",
      "description": "return create_mock_engine(url, **kwargs)  # type: ignore",
      "context": [
        "        if strat == \"mock\":",
        "            # this case is deprecated",
        "            return create_mock_engine(url, **kwargs)  # type: ignore",
        "        else:",
        "            raise exc.ArgumentError(\"unknown strategy: %r\" % strat)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 35,
      "type": "Mock Class",
      "description": "class MockConnection:",
      "context": [
        "",
        "",
        "class MockConnection:",
        "    def __init__(self, dialect: Dialect, execute: Callable[..., Any]):",
        "        self._dialect = dialect"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 44,
      "type": "Mock Method",
      "description": "def connect(self, **kwargs: Any) -> MockConnection:",
      "context": [
        "    name: str = cast(Any, property(lambda s: s._dialect.name))",
        "",
        "    def connect(self, **kwargs: Any) -> MockConnection:",
        "        return self",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 50,
      "type": "Mock Method",
      "description": "def execution_options(self, **kw: Any) -> MockConnection:",
      "context": [
        "        return obj.schema",
        "",
        "    def execution_options(self, **kw: Any) -> MockConnection:",
        "        return self",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 73,
      "type": "Mock Method",
      "description": "def create_mock_engine(",
      "context": [
        "",
        "",
        "def create_mock_engine(",
        "    url: Union[str, URL], executor: Any, **kw: Any",
        ") -> MockConnection:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 73,
      "type": "Mock Method",
      "description": "def create_mock_engine(",
      "context": [
        "",
        "",
        "def create_mock_engine(",
        "    url: Union[str, URL], executor: Any, **kw: Any",
        ") -> MockConnection:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 92,
      "type": "Mock Implementation",
      "description": "from sqlalchemy import create_mock_engine",
      "context": [
        "    E.g.::",
        "",
        "        from sqlalchemy import create_mock_engine",
        "",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 99,
      "type": "Mock Implementation",
      "description": "engine = create_mock_engine(\"postgresql+psycopg2://\", dump)",
      "context": [
        "",
        "",
        "        engine = create_mock_engine(\"postgresql+psycopg2://\", dump)",
        "        metadata.create_all(engine, checkfirst=False)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 110,
      "type": "Mock Implementation",
      "description": ".. versionadded:: 1.4 - the :func:`.create_mock_engine` function replaces",
      "context": [
        "     into a string using :meth:`.ExecutableDDLElement.compile`.",
        "",
        "    .. versionadded:: 1.4 - the :func:`.create_mock_engine` function replaces",
        "       the previous \"mock\" engine strategy used with",
        "       :func:`_sa.create_engine`."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/engine/mock.py",
      "line": 134,
      "type": "Mock Implementation",
      "description": "return MockConnection(dialect, executor)",
      "context": [
        "    dialect = dialect_cls(**dialect_args)",
        "",
        "    return MockConnection(dialect, executor)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_reflection.py",
      "line": 1011,
      "type": "Mock Method",
      "description": "name, auto=False, default=mock.ANY, comment=None, nullable=True",
      "context": [
        "    ):",
        "        def col(",
        "            name, auto=False, default=mock.ANY, comment=None, nullable=True",
        "        ):",
        "            res = {"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_reflection.py",
      "line": 1026,
      "type": "Mock Method",
      "description": "kw = {\"auto\": True, \"default\": mock.ANY, \"nullable\": False, **kw}",
      "context": [
        "",
        "        def pk(name, **kw):",
        "            kw = {\"auto\": True, \"default\": mock.ANY, \"nullable\": False, **kw}",
        "            return col(name, **kw)",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_reflection.py",
      "line": 1110,
      "type": "Mock Method",
      "description": "def pk(*cols, name=mock.ANY, comment=None):",
      "context": [
        "        filter_names=None,",
        "    ):",
        "        def pk(*cols, name=mock.ANY, comment=None):",
        "            return {",
        "                \"constrained_columns\": list(cols),"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_dialect.py",
      "line": 371,
      "type": "Mock Implementation",
      "description": "eq_(check_rollback.mock_calls, [mock.call()])",
      "context": [
        "            conn.close()",
        "        if autocommit_setting.false or not block_rollback:",
        "            eq_(check_rollback.mock_calls, [mock.call()])",
        "        else:",
        "            eq_(check_rollback.mock_calls, [])"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_dialect.py",
      "line": 373,
      "type": "Mock Implementation",
      "description": "eq_(check_rollback.mock_calls, [])",
      "context": [
        "            eq_(check_rollback.mock_calls, [mock.call()])",
        "        else:",
        "            eq_(check_rollback.mock_calls, [])",
        "",
        "    @testing.requires.independent_readonly_connections"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_types.py",
      "line": 1610,
      "type": "Mock Implementation",
      "description": "eq_(js.mock_calls, [mock.call(data_element)])",
      "context": [
        "",
        "            eq_(row, (data_element,))",
        "            eq_(js.mock_calls, [mock.call(data_element)])",
        "            if testing.requires.json_deserializer_binary.enabled:",
        "                eq_("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_types.py",
      "line": 1613,
      "type": "Mock Implementation",
      "description": "jd.mock_calls,",
      "context": [
        "            if testing.requires.json_deserializer_binary.enabled:",
        "                eq_(",
        "                    jd.mock_calls,",
        "                    [mock.call(json.dumps(data_element).encode())],",
        "                )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/sqlalchemy/testing/suite/test_types.py",
      "line": 1617,
      "type": "Mock Implementation",
      "description": "eq_(jd.mock_calls, [mock.call(json.dumps(data_element))])",
      "context": [
        "                )",
        "            else:",
        "                eq_(jd.mock_calls, [mock.call(json.dumps(data_element))])",
        "",
        "    @testing.combinations("
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/greenlet/tests/leakcheck.py",
      "line": 107,
      "type": "Mock Class",
      "description": "class _MockGC(object):",
      "context": [
        "    # trace *all* the objects, not just those that are tracked by the",
        "    # GC",
        "    class _MockGC(object):",
        "        def get_objects(self):",
        "            return sys.getobjects(0) # pylint:disable=no-member"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/_core/getlimits.py",
      "line": 35,
      "type": "Simulation",
      "description": "\"\"\" Object to simulate MachAr instance \"\"\"",
      "context": [
        "",
        "class MachArLike:",
        "    \"\"\" Object to simulate MachAr instance \"\"\"",
        "    def __init__(self, ftype, *, eps, epsneg, huge, tiny,",
        "                 ibeta, smallest_subnormal=None, **kwargs):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/lib/_npyio_impl.py",
      "line": 554,
      "type": "Simulation",
      "description": ">>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
      "context": [
        "    >>> np.save(outfile, x)",
        "",
        "    >>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
        "    >>> np.load(outfile)",
        "    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/lib/_npyio_impl.py",
      "line": 667,
      "type": "Simulation",
      "description": ">>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
      "context": [
        "",
        "    >>> np.savez(outfile, x, y)",
        "    >>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file",
        "    >>> npzfile = np.load(outfile)",
        "    >>> npzfile.files"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/tests/test_numpy_config.py",
      "line": 24,
      "type": "Mock Method",
      "description": "def test_pyyaml_not_found(self, mock_yaml_importer):",
      "context": [
        "",
        "    @patch(\"numpy.__config__._check_pyyaml\")",
        "    def test_pyyaml_not_found(self, mock_yaml_importer):",
        "        mock_yaml_importer.side_effect = ModuleNotFoundError()",
        "        with pytest.warns(UserWarning):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/tests/test_numpy_config.py",
      "line": 24,
      "type": "Mock Method",
      "description": "def test_pyyaml_not_found(self, mock_yaml_importer):",
      "context": [
        "",
        "    @patch(\"numpy.__config__._check_pyyaml\")",
        "    def test_pyyaml_not_found(self, mock_yaml_importer):",
        "        mock_yaml_importer.side_effect = ModuleNotFoundError()",
        "        with pytest.warns(UserWarning):"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/tests/test_numpy_config.py",
      "line": 25,
      "type": "Mock Implementation",
      "description": "mock_yaml_importer.side_effect = ModuleNotFoundError()",
      "context": [
        "    @patch(\"numpy.__config__._check_pyyaml\")",
        "    def test_pyyaml_not_found(self, mock_yaml_importer):",
        "        mock_yaml_importer.side_effect = ModuleNotFoundError()",
        "        with pytest.warns(UserWarning):",
        "            np.show_config()"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/random/tests/test_generator_mt19937.py",
      "line": 2759,
      "type": "Simulation",
      "description": "# Simulate unpickling an old pickle that only has the name",
      "context": [
        "    # Directly call reduce which is used in pickling",
        "    ctor, (bit_gen, ), _ = rg.__reduce__()",
        "    # Simulate unpickling an old pickle that only has the name",
        "    assert bit_gen.__class__.__name__ == \"PCG64DXSM\"",
        "    print(ctor)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/random/tests/test_randomstate.py",
      "line": 2060,
      "type": "Simulation",
      "description": "# Simulate unpickling an old pickle that only has the name",
      "context": [
        "    # Directly call reduce which is used in pickling",
        "    ctor, args, state_a = rs.__reduce__()",
        "    # Simulate unpickling an old pickle that only has the name",
        "    assert args[0].__class__.__name__ == \"MT19937\"",
        "    b = ctor(*(\"MT19937\",))"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/lib/tests/test__datasource.py",
      "line": 347,
      "type": "Simulation",
      "description": "# simulate failed __init__ by removing key attribute",
      "context": [
        "",
        "    ds = datasource.DataSource()",
        "    # simulate failed __init__ by removing key attribute",
        "    # produced within __init__ and expected by __del__",
        "    del ds._istmpdest"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/_core/tests/test_overrides.py",
      "line": 515,
      "type": "Mock Method",
      "description": "def test_sum_on_mock_array(self):",
      "context": [
        "        assert_equal(np.sum(MyArray()), 'yes')",
        "",
        "    def test_sum_on_mock_array(self):",
        "",
        "        # We need a proxy for mocks because __array_function__ is only looked"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/_core/tests/test_overrides.py",
      "line": 515,
      "type": "Mock Method",
      "description": "def test_sum_on_mock_array(self):",
      "context": [
        "        assert_equal(np.sum(MyArray()), 'yes')",
        "",
        "    def test_sum_on_mock_array(self):",
        "",
        "        # We need a proxy for mocks because __array_function__ is only looked"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/numpy/_core/tests/test_regression.py",
      "line": 1728,
      "type": "Simulation",
      "description": "# it is designed to simulate an old API",
      "context": [
        "            # squeeze to have an axis argument",
        "            # NOTE: this example is somewhat artificial;",
        "            # it is designed to simulate an old API",
        "            # expectation to guard against regression",
        "            def squeeze(self):"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pygments/lexers/_scilab_builtins.py",
      "line": 2773,
      "type": "Simulation",
      "description": "'scicos_simulate',",
      "context": [
        "    'sci_sparse',",
        "    'scicos_getvalue',",
        "    'scicos_simulate',",
        "    'scicos_workspace_init',",
        "    'scisptdemo',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pygments/lexers/_scilab_builtins.py",
      "line": 2953,
      "type": "Simulation",
      "description": "'xcos_simulate',",
      "context": [
        "    'xcos_debug_gui',",
        "    'xcos_run',",
        "    'xcos_simulate',",
        "    'xcov',",
        "    'xmltochm',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pygments/lexers/_scilab_builtins.py",
      "line": 3040,
      "type": "Simulation",
      "description": "'simulated_annealinglib',",
      "context": [
        "    'scinoteslib',",
        "    'signal_processinglib',",
        "    'simulated_annealinglib',",
        "    'soundlib',",
        "    'sparselib',"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pygments/lexers/_stata_builtins.py",
      "line": 245,
      "type": "Simulation",
      "description": "\"signtest\", \"simul\", \"simul_7\", \"simulate\", \"simulate_8\",",
      "context": [
        "    \"set_defaults\", \"sfrancia\", \"sh\", \"she\", \"shel\", \"shell\",",
        "    \"shewhart\", \"shewhart_7\", \"signestimationsample\", \"signrank\",",
        "    \"signtest\", \"simul\", \"simul_7\", \"simulate\", \"simulate_8\",",
        "    \"sktest\", \"sleep\", \"slogit\", \"slogit_d2\", \"slogit_p\", \"smooth\",",
        "    \"snapspan\", \"so\", \"sor\", \"sort\", \"spearman\", \"spikeplot\","
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/redis/asyncio/cluster.py",
      "line": 1208,
      "type": "Mock Method",
      "description": "async def _mock(self, error: RedisError):",
      "context": [
        "            self._free.append(conn)",
        "",
        "    async def _mock(self, error: RedisError):",
        "        \"\"\"",
        "        Dummy functions, needs to be passed as error callback to retry object."
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/redis/asyncio/connection.py",
      "line": 1253,
      "type": "Mock Method",
      "description": "async def _mock(self, error: RedisError):",
      "context": [
        "                conn.set_re_auth_token(token)",
        "",
        "    async def _mock(self, error: RedisError):",
        "        \"\"\"",
        "        Dummy functions, needs to be passed as error callback to retry object."
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/redis/commands/core.py",
      "line": 81,
      "type": "Simulation",
      "description": "Simulate the execution of a given command by a given ``username``.",
      "context": [
        "    def acl_dryrun(self, username, *args, **kwargs):",
        "        \"\"\"",
        "        Simulate the execution of a given command by a given ``username``.",
        "",
        "        For more information see https://redis.io/commands/acl-dryrun"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 26,
      "type": "Mock Class",
      "description": "from ._mock_val_ser import set_dataclass_mocks",
      "context": [
        "from ._generate_schema import GenerateSchema, InvalidSchemaError",
        "from ._generics import get_standard_typevars_map",
        "from ._mock_val_ser import set_dataclass_mocks",
        "from ._namespace_utils import NsResolver",
        "from ._signature import generate_pydantic_signature"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 26,
      "type": "Mock Class",
      "description": "from ._mock_val_ser import set_dataclass_mocks",
      "context": [
        "from ._generate_schema import GenerateSchema, InvalidSchemaError",
        "from ._generics import get_standard_typevars_map",
        "from ._mock_val_ser import set_dataclass_mocks",
        "from ._namespace_utils import NsResolver",
        "from ._signature import generate_pydantic_signature"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 133,
      "type": "Mock Class",
      "description": "set_dataclass_mocks(cls)",
      "context": [
        "",
        "    if not _force_build and config_wrapper.defer_build:",
        "        set_dataclass_mocks(cls)",
        "        return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 170,
      "type": "Mock Class",
      "description": "set_dataclass_mocks(cls, f'`{e.name}`')",
      "context": [
        "        if raise_errors:",
        "            raise",
        "        set_dataclass_mocks(cls, f'`{e.name}`')",
        "        return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_dataclasses.py",
      "line": 178,
      "type": "Mock Class",
      "description": "set_dataclass_mocks(cls)",
      "context": [
        "        schema = gen_schema.clean_schema(schema)",
        "    except InvalidSchemaError:",
        "        set_dataclass_mocks(cls)",
        "        return False",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_decorators.py",
      "line": 358,
      "type": "Mock Class",
      "description": "aiming to simulate calling the method on the actual class.",
      "context": [
        "def get_attribute_from_bases(tp: type[Any] | tuple[type[Any], ...], name: str) -> Any:",
        "    \"\"\"Get the attribute from the next class in the MRO that has it,",
        "    aiming to simulate calling the method on the actual class.",
        "",
        "    The reason for iterating over the mro instead of just getting"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_generate_schema.py",
      "line": 99,
      "type": "Mock Implementation",
      "description": "from ._mock_val_ser import MockCoreSchema",
      "context": [
        "from ._generics import get_standard_typevars_map, replace_types",
        "from ._import_utils import import_cached_base_model, import_cached_field_info",
        "from ._mock_val_ser import MockCoreSchema",
        "from ._namespace_utils import NamespacesTuple, NsResolver",
        "from ._schema_gather import MissingDefinitionError, gather_schemas_for_cleaning"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 21,
      "type": "Mock Class",
      "description": "class MockCoreSchema(Mapping[str, Any]):",
      "context": [
        "",
        "",
        "class MockCoreSchema(Mapping[str, Any]):",
        "    \"\"\"Mocker for `pydantic_core.CoreSchema` which optionally attempts to",
        "    rebuild the thing it's mocking when one of its methods is accessed and raises an error if that fails."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 71,
      "type": "Mock Class",
      "description": "class MockValSer(Generic[ValSer]):",
      "context": [
        "",
        "",
        "class MockValSer(Generic[ValSer]):",
        "    \"\"\"Mocker for `pydantic_core.SchemaValidator` or `pydantic_core.SchemaSerializer` which optionally attempts to",
        "    rebuild the thing it's mocking when one of its methods is accessed and raises an error if that fails."
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 112,
      "type": "Mock Method",
      "description": "def set_type_adapter_mocks(adapter: TypeAdapter) -> None:",
      "context": [
        "",
        "",
        "def set_type_adapter_mocks(adapter: TypeAdapter) -> None:",
        "    \"\"\"Set `core_schema`, `validator` and `serializer` to mock core types on a type adapter instance.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 151,
      "type": "Mock Method",
      "description": "def set_model_mocks(cls: type[BaseModel], undefined_name: str = 'all referenced types') -> None:",
      "context": [
        "",
        "",
        "def set_model_mocks(cls: type[BaseModel], undefined_name: str = 'all referenced types') -> None:",
        "    \"\"\"Set `__pydantic_core_schema__`, `__pydantic_validator__` and `__pydantic_serializer__` to mock core types on a model.",
        ""
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 155,
      "type": "Mock Class",
      "description": "cls: The model class to set the mocks on",
      "context": [
        "",
        "    Args:",
        "        cls: The model class to set the mocks on",
        "        undefined_name: Name of the undefined thing, used in error messages",
        "    \"\"\""
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 190,
      "type": "Mock Class",
      "description": "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
      "context": [
        "",
        "",
        "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
        "    \"\"\"Set `__pydantic_validator__` and `__pydantic_serializer__` to `MockValSer`s on a dataclass.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 190,
      "type": "Mock Class",
      "description": "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
      "context": [
        "",
        "",
        "def set_dataclass_mocks(cls: type[PydanticDataclass], undefined_name: str = 'all referenced types') -> None:",
        "    \"\"\"Set `__pydantic_validator__` and `__pydantic_serializer__` to `MockValSer`s on a dataclass.",
        ""
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_mock_val_ser.py",
      "line": 194,
      "type": "Mock Class",
      "description": "cls: The model class to set the mocks on",
      "context": [
        "",
        "    Args:",
        "        cls: The model class to set the mocks on",
        "        undefined_name: Name of the undefined thing, used in error messages",
        "    \"\"\""
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pydantic/_internal/_model_construction.py",
      "line": 29,
      "type": "Mock Implementation",
      "description": "from ._mock_val_ser import set_model_mocks",
      "context": [
        "from ._generics import PydanticGenericMetadata, get_model_typevars_map",
        "from ._import_utils import import_cached_base_model, import_cached_field_info",
        "from ._mock_val_ser import set_model_mocks",
        "from ._namespace_utils import NsResolver",
        "from ._signature import generate_pydantic_signature"
      ],
      "complexity": "High",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pip/_vendor/distlib/version.py",
      "line": 670,
      "type": "Simulation",
      "description": "# by zero-filling numeric values so simulate a numeric comparison",
      "context": [
        "            parts = s[1:].split('.')",
        "            # We can't compare ints and strings on Python 3, so fudge it",
        "            # by zero-filling numeric values so simulate a numeric comparison",
        "            result = tuple([p.zfill(8) if p.isdigit() else p for p in parts])",
        "        return result"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pip/_vendor/requests/cookies.py",
      "line": 23,
      "type": "Mock Class",
      "description": "class MockRequest:",
      "context": [
        "",
        "",
        "class MockRequest:",
        "    \"\"\"Wraps a `requests.Request` to mimic a `urllib2.Request`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pip/_vendor/requests/cookies.py",
      "line": 103,
      "type": "Mock Class",
      "description": "class MockResponse:",
      "context": [
        "",
        "",
        "class MockResponse:",
        "    \"\"\"Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pip/_vendor/requests/models.py",
      "line": 845,
      "type": "Simulation",
      "description": "# simulate reading small chunks of the content",
      "context": [
        "                f\"chunk_size must be an int, it is instead a {type(chunk_size)}.\"",
        "            )",
        "        # simulate reading small chunks of the content",
        "        reused_chunks = iter_slices(self._content, chunk_size)",
        ""
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pip/_internal/operations/check.py",
      "line": 118,
      "type": "Simulation",
      "description": "would_be_installed = _simulate_installation_of(to_install, package_set)",
      "context": [
        "    package_set, _ = create_package_set_from_installed()",
        "    # Install packages",
        "    would_be_installed = _simulate_installation_of(to_install, package_set)",
        "",
        "    # Only warn about directly-dependent packages; create a whitelist of them"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pip/_internal/operations/check.py",
      "line": 147,
      "type": "Mock Method",
      "description": "def _simulate_installation_of(",
      "context": [
        "",
        "",
        "def _simulate_installation_of(",
        "    to_install: List[InstallRequirement], package_set: PackageSet",
        ") -> Set[NormalizedName]:"
      ],
      "complexity": "Medium",
      "priority": 1
    },
    {
      "file": "shared/agent_zero_przestrzenie/pr-23050ab8/venv/lib/python3.13/site-packages/pip/_internal/utils/misc.py",
      "line": 394,
      "type": "Simulation",
      "description": "# Simulates an enum",
      "context": [
        "",
        "",
        "# Simulates an enum",
        "def enum(*sequential: Any, **named: Any) -> Type[Any]:",
        "    enums = dict(zip(sequential, range(len(sequential))), **named)"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "services/agent-orchestrator/src/main.py",
      "line": 370,
      "type": "Simulation",
      "description": "# Simulate execution - integrate with real agent_executor",
      "context": [
        "        orchestration = orchestrator.active_orchestrations[orchestration_id]",
        "        ",
        "        # Simulate execution - integrate with real agent_executor",
        "        await asyncio.sleep(5)",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "services/api-gateway/src/main.py",
      "line": 233,
      "type": "Mock Implementation",
      "description": "cost=0.001,  # Mock cost - integrate with real cost calculation",
      "context": [
        "            model_used=request.model_preference or \"llama3.2-3b\",",
        "            model_recommended=\"llama3.2-3b\",",
        "            cost=0.001,  # Mock cost - integrate with real cost calculation",
        "            latency=1000,  # Mock latency",
        "            context=request.context"
      ],
      "complexity": "Low",
      "priority": 5
    },
    {
      "file": "services/api-gateway/src/main.py",
      "line": 234,
      "type": "Mock Implementation",
      "description": "latency=1000,  # Mock latency",
      "context": [
        "            model_recommended=\"llama3.2-3b\",",
        "            cost=0.001,  # Mock cost - integrate with real cost calculation",
        "            latency=1000,  # Mock latency",
        "            context=request.context",
        "        )"
      ],
      "complexity": "Low",
      "priority": 1
    },
    {
      "file": "services/api-gateway/src/main.py",
      "line": 290,
      "type": "Simulation",
      "description": "# Simulate task processing - integrate with real agent_executor",
      "context": [
        "    \"\"\"",
        "    try:",
        "        # Simulate task processing - integrate with real agent_executor",
        "        await asyncio.sleep(2)",
        "        "
      ],
      "complexity": "Low",
      "priority": 1
    }
  ],
  "critical_mocks": [],
  "replacement_priority": []
}