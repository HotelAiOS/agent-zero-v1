services:
  # Existing infrastructure (unchanged)
  neo4j:
    image: neo4j:5.13
    container_name: agent-zero-neo4j
    environment:
      - NEO4J_AUTH=neo4j/agent-pass
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_PLUGINS=["apoc"]
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    networks:
      - agent-zero-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7474 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: agent-zero-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=SecureRabbitPass123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - agent-zero-network
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: agent-zero-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agent-zero-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NEW INTEGRATED APPLICATION SERVICES
  
  api-gateway:
    build: 
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: agent-zero-api-gateway
    environment:
      - LOG_LEVEL=INFO
      - TRACKER_DB_PATH=/app/data/agent_zero.db
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=agent-pass
    ports:
      - "8000:8000"
    volumes:
      - ./:/app/project  # Mount entire project for component imports
      - api_gateway_data:/app/data
    networks:
      - agent-zero-network
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  websocket-service:
    build:
      context: ./services/chat-service
      dockerfile: Dockerfile
    container_name: agent-zero-websocket
    environment:
      - LOG_LEVEL=INFO
      - TRACKER_DB_PATH=/app/data/agent_zero.db
    ports:
      - "8001:8080"
    volumes:
      - ./:/app/project  # Mount project for SimpleTracker access
      - websocket_data:/app/data
    networks:
      - agent-zero-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  agent-orchestrator:
    build:
      context: ./services/agent-orchestrator
      dockerfile: Dockerfile
    container_name: agent-zero-orchestrator
    environment:
      - LOG_LEVEL=INFO
      - TRACKER_DB_PATH=/app/data/agent_zero.db
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=agent-pass
    ports:
      - "8002:8002"
    volumes:
      - ./:/app/project  # Mount project for component imports
      - orchestrator_data:/app/data
    networks:
      - agent-zero-network
    depends_on:
      neo4j:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama service for LLM inference
#  ollama:
#    image: ollama/ollama:latest
#    container_name: agent-zero-ollama
#    ports:
#      - "11434:11434"
#    volumes:
#      - ollama_data:/root/.ollama
#    networks:
#      - agent-zero-network
#    environment:
#      - OLLAMA_HOST=0.0.0.0
#    healthcheck:
#      test: ["CMD-SHELL", "curl -f http://localhost:11434/api/tags || exit 1"]
#      interval: 60s
#      timeout: 30s
#      retries: 3
#
volumes:
  neo4j_data:
  rabbitmq_data:
  redis_data:
  api_gateway_data:
  websocket_data:
  orchestrator_data:
  ollama_data:

networks:
  agent-zero-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# Development override - for local testing
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up