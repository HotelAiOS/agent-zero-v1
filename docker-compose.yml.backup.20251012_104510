# Agent Zero V2.0 Production Enhancement Package
# Saturday, October 11, 2025 @ 09:20 CEST

# =============================================================================
# ENHANCED DOCKER COMPOSE - PRODUCTION V2.0 INTELLIGENCE LAYER
# =============================================================================

version: '3.8'

networks:
  agent-zero-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES - ENHANCED FOR V2.0
  # =============================================================================
  
  neo4j:
    image: neo4j:5.13
    container_name: agent-zero-neo4j-v2
    environment:
      - NEO4J_AUTH=neo4j/agent-pass
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      # V2.0 Intelligence Layer Configuration
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_tx__log_rotation_retention__policy=1 days
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data_v2:/data
      - neo4j_logs_v2:/logs
      - neo4j_import_v2:/var/lib/neo4j/import
      - neo4j_plugins_v2:/plugins
    networks:
      - agent-zero-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "agent-pass", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: agent-zero-redis-v2
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data_v2:/data
    networks:
      - agent-zero-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: agent-zero-rabbitmq-v2
    environment:
      - RABBITMQ_DEFAULT_USER=agent
      - RABBITMQ_DEFAULT_PASS=zero123
      - RABBITMQ_DEFAULT_VHOST=agent-zero
      # V2.0 Performance Tuning
      - RABBITMQ_VM_MEMORY_HIGH_WATERMARK=0.7
      - RABBITMQ_DISK_FREE_LIMIT=2GB
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data_v2:/var/lib/rabbitmq
    networks:
      - agent-zero-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3

  # =============================================================================
  # V2.0 INTELLIGENCE LAYER SERVICES - ENHANCED MICROSERVICES
  # =============================================================================

  ai-intelligence-layer:
    build:
      context: .
      dockerfile: Dockerfile.ai-intelligence
    container_name: agent-zero-ai-intelligence-v2
    environment:
      - LOG_LEVEL=INFO
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=agent-pass
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://agent:zero123@rabbitmq:5672/agent-zero
      - TRACKER_DB_PATH=/app/data/ai-intelligence.db
      # V2.0 AI Configuration
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - ENABLE_PATTERN_ANALYSIS=true
      - ENABLE_PREDICTIVE_ANALYTICS=true
      - MODEL_CACHE_SIZE=1000
      - LEARNING_RATE=0.001
    ports:
      - "8010:8010"  # AI Intelligence API
    volumes:
      - ./app:/app
      - ai_intelligence_data:/app/data
      - ai_models_cache:/app/models
    networks:
      - agent-zero-network
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: agent-zero-api-gateway-v2
    environment:
      - LOG_LEVEL=INFO
      - TRACKER_DB_PATH=/app/data/agent-zero.db
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=agent-pass
      # V2.0 Integration
      - AI_INTELLIGENCE_URL=http://ai-intelligence-layer:8010
      - ENABLE_AI_ROUTING=true
      - REQUEST_TIMEOUT=30
      - MAX_CONCURRENT_REQUESTS=100
    ports:
      - "8000:8080"
    volumes:
      - ./app:/app
      - api_gateway_data:/app/data
    networks:
      - agent-zero-network
    depends_on:
      ai-intelligence-layer:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  websocket-service:
    build:
      context: ./services/chat-service
      dockerfile: Dockerfile  
    container_name: agent-zero-websocket-v2
    environment:
      - LOG_LEVEL=INFO
      - TRACKER_DB_PATH=/app/data/agent-zero.db
      - REDIS_URL=redis://redis:6379
      # V2.0 Real-time AI Integration
      - AI_INTELLIGENCE_URL=http://ai-intelligence-layer:8010
      - ENABLE_REALTIME_AI=true
      - WEBSOCKET_MAX_CONNECTIONS=1000
      - HEARTBEAT_INTERVAL=30
    ports:
      - "8001:8080"
    volumes:
      - ./app:/app
      - websocket_data:/app/data
    networks:
      - agent-zero-network
    depends_on:
      ai-intelligence-layer:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  agent-orchestrator:
    build:
      context: ./services/agent-orchestrator
      dockerfile: Dockerfile
    container_name: agent-zero-orchestrator-v2
    environment:
      - LOG_LEVEL=INFO
      - TRACKER_DB_PATH=/app/data/agent-zero.db
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j  
      - NEO4J_PASSWORD=agent-pass
      - RABBITMQ_URL=amqp://agent:zero123@rabbitmq:5672/agent-zero
      # V2.0 AI-Enhanced Orchestration
      - AI_INTELLIGENCE_URL=http://ai-intelligence-layer:8010
      - ENABLE_INTELLIGENT_SCHEDULING=true
      - ENABLE_PREDICTIVE_SCALING=true
      - MAX_CONCURRENT_TASKS=50
      - TASK_TIMEOUT=300
    ports:
      - "8002:8080"
    volumes:
      - ./app:/app
      - orchestrator_data:/app/data
    networks:
      - agent-zero-network
    depends_on:
      ai-intelligence-layer:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # V2.0 MONITORING & ANALYTICS SERVICES
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: agent-zero-prometheus-v2
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - agent-zero-network

  grafana:
    image: grafana/grafana:latest
    container_name: agent-zero-grafana-v2
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=agent-zero-admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - agent-zero-network
    depends_on:
      - prometheus

  # =============================================================================
  # DEVELOPMENT & TESTING SERVICES
  # =============================================================================

  ai-testing-suite:
    build:
      context: .
      dockerfile: Dockerfile.testing
    container_name: agent-zero-testing-v2
    environment:
      - LOG_LEVEL=DEBUG
      - TEST_MODE=comprehensive
      - AI_INTELLIGENCE_URL=http://ai-intelligence-layer:8010
      - API_GATEWAY_URL=http://api-gateway:8080
      - WEBSOCKET_URL=ws://websocket-service:8080
      - ORCHESTRATOR_URL=http://agent-orchestrator:8080
    volumes:
      - ./app:/app
      - ./tests:/app/tests
      - test_results:/app/test-results
    networks:
      - agent-zero-network
    depends_on:
      - ai-intelligence-layer
      - api-gateway
      - websocket-service
      - agent-orchestrator
    profiles:
      - testing

volumes:
  # Infrastructure
  neo4j_data_v2:
  neo4j_logs_v2:
  neo4j_import_v2:
  neo4j_plugins_v2:
  redis_data_v2:
  rabbitmq_data_v2:
  
  # V2.0 AI Intelligence Layer
  ai_intelligence_data:
  ai_models_cache:
  
  # Application Services  
  api_gateway_data:
  websocket_data:
  orchestrator_data:
  
  # Monitoring & Analytics
  prometheus_data:
  grafana_data:
  
  # Testing
  test_results: