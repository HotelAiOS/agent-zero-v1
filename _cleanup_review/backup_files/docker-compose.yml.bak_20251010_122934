
services:
  # Infrastructure - UNCHANGED from your working config
  neo4j:
    image: neo4j:5.13
    container_name: agent-zero-neo4j
    environment:
      - NEO4J_AUTH=neo4j/password123  # FIXED: Changed from agent-pass
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_PLUGINS=["apoc"]
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    networks:
      - agent-zero-network
#    healthcheck:
#      test: ["CMD-SHELL", "cypher-shell -u neo4j -p password123 'RETURN 1;' || exit 1"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 60s
#
#  redis:
#    image: redis:7-alpine
#    container_name: agent-zero-redis
#    ports:
#      - "6379:6379"
#    volumes:
#      - redis_data:/data
#    networks:
#      - agent-zero-network
#    healthcheck:
#      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#
#  rabbitmq:
#    image: rabbitmq:3.12-management
#    container_name: agent-zero-rabbitmq
#    environment:
#      - RABBITMQ_DEFAULT_USER=admin
#      - RABBITMQ_DEFAULT_PASS=SecureRabbitPass123
#    ports:
#      - "5672:5672"
#      - "15672:15672"
#    volumes:
#      - rabbitmq_data:/var/lib/rabbitmq
#    networks:
#      - agent-zero-network
#    healthcheck:
#      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#
#  # Application Services - FIXED for YOUR CODE
#  api-gateway:
#    build: 
#      context: ./services/api-gateway
#      dockerfile: Dockerfile
#    container_name: agent-zero-api-gateway
#    environment:
#      - LOG_LEVEL=INFO
#      - TRACKER_DB_PATH=/app/data/agent_zero.db
#      - NEO4J_URI=bolt://neo4j:7687
#      - NEO4J_USER=neo4j
#      - NEO4J_PASSWORD=password123  # FIXED: Matches your main.py integration
#      - REDIS_URL=redis://redis:6379  # ADDED: For your system
#      - RABBITMQ_URL=amqp://admin:SecureRabbitPass123@rabbitmq:5672/  # ADDED
#    ports:
#      - "8000:8080"  # FIXED: External 8000 -> Internal 8080 (matches your Dockerfile)
#    volumes:
#      - ./:/app/project  # MAINTAINED: Your project mounting
#      - api_gateway_data:/app/data
#    networks:
#      - agent-zero-network
#    depends_on:
#      neo4j:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#      rabbitmq:
#        condition: service_healthy
#    healthcheck:
#      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]  # FIXED: Internal port
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 30s

  websocket-service:
    build:
      context: ./services/chat-service  # MAINTAINED: Your chat-service context
      dockerfile: Dockerfile
    container_name: agent-zero-websocket
    environment:
      - LOG_LEVEL=INFO
      - TRACKER_DB_PATH=/app/data/agent_zero.db
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password123  # ADDED: For your Neo4j integration
      - REDIS_URL=redis://redis:6379  # ADDED
      - RABBITMQ_URL=amqp://admin:SecureRabbitPass123@rabbitmq:5672/  # ADDED
    ports:
      - "8001:8080"  # FIXED: External 8001 -> Internal 8080 (matches your main.py)
    volumes:
      - ./:/app/project  # MAINTAINED: Your project mounting for SimpleTracker
      - websocket_data:/app/data
    networks:
      - agent-zero-network
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
#    healthcheck:
#      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 30s

  agent-orchestrator:
    build:
      context: ./services/agent-orchestrator
      dockerfile: Dockerfile
    container_name: agent-zero-orchestrator
    environment:
      - LOG_LEVEL=INFO
      - TRACKER_DB_PATH=/app/data/agent_zero.db
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password123  # FIXED: For your Neo4j integration
      - REDIS_URL=redis://redis:6379  # ADDED
      - RABBITMQ_URL=amqp://admin:SecureRabbitPass123@rabbitmq:5672/  # ADDED
    ports:
      - "8002:8080"  # FIXED: External 8002 -> Internal 8080 (matches Dockerfile pattern)
    volumes:
      - ./:/app/project  # MAINTAINED: Your project mounting
      - orchestrator_data:/app/data
    networks:
      - agent-zero-network
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
#    healthcheck:
#      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]  # FIXED: Internal port
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 30s

# MAINTAINED: Your existing volumes and network config
volumes:
  neo4j_data:
  rabbitmq_data:
  redis_data:
  api_gateway_data:
  websocket_data:
  orchestrator_data:
  ollama_data:  # MAINTAINED: Your ollama volume

networks:
  agent-zero-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# MAINTAINED: Your development override comment
# Development override - for local testing
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
