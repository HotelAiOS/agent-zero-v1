services:
  # Phase 4-5: Team Formation + Analytics
  team-formation:
    build:
      context: .
      dockerfile: Dockerfile.team
    container_name: agent-zero-team
    expose: ['8001']
    environment:
      - SERVICE_NAME=team-formation
      - DATABASE_URL=sqlite:///app/data/team_formation.db
    volumes: ['./data:/app/data']
    networks: ['agent-zero-network']
    restart: unless-stopped
    command: python agent_zero_phases_4_5_production.py
    
  analytics:
    build:
      context: .
      dockerfile: Dockerfile.analytics  
    container_name: agent-zero-analytics
    expose: ['8002']
    environment:
      - SERVICE_NAME=analytics
      - DATABASE_URL=sqlite:///app/data/analytics.db
    volumes: ['./data:/app/data']
    networks: ['agent-zero-network']
    restart: unless-stopped
    command: python agent_zero_phases_4_5_production.py

  # Phase 6-7: Collaboration + Predictive (Fixed websockets)
  collaboration:
    build:
      context: .
      dockerfile: Dockerfile.collaboration
    container_name: agent-zero-collaboration
    expose: ['8003']
    environment:
      - SERVICE_NAME=collaboration
      - DATABASE_URL=sqlite:///app/data/collaboration.db
    volumes: ['./data:/app/data']
    networks: ['agent-zero-network']
    restart: unless-stopped
    command: python agent_zero_phases_6_7_production.py
    
  predictive:
    build:
      context: .
      dockerfile: Dockerfile.predictive
    container_name: agent-zero-predictive
    expose: ['8004']
    environment:
      - SERVICE_NAME=predictive  
      - DATABASE_URL=sqlite:///app/data/predictive.db
    volumes: ['./data:/app/data']
    networks: ['agent-zero-network']
    restart: unless-stopped
    command: python agent_zero_phases_6_7_production.py

  # Phase 8-9: Adaptive Learning + Quantum
  adaptive-learning:
    build:
      context: .
      dockerfile: Dockerfile.adaptive
    container_name: agent-zero-adaptive
    expose: ['8005']
    environment:
      - SERVICE_NAME=adaptive-learning
      - DATABASE_URL=sqlite:///app/data/adaptive_learning.db
    volumes: ['./data:/app/data']
    networks: ['agent-zero-network']
    restart: unless-stopped
    command: python agent_zero_phases_8_9_complete_system.py
    
  quantum-intelligence:
    build:
      context: .
      dockerfile: Dockerfile.quantum
    container_name: agent-zero-quantum
    expose: ['8006']
    environment:
      - SERVICE_NAME=quantum-intelligence
      - DATABASE_URL=sqlite:///app/data/quantum_intelligence.db
    volumes: ['./data:/app/data']
    networks: ['agent-zero-network']
    restart: unless-stopped
    command: python agent_zero_phases_8_9_complete_system.py

  # Master System Integrator (depends on all services)
  master-integrator:
    build:
      context: .
      dockerfile: Dockerfile.master
    container_name: agent-zero-master
    ports: ['8000:8000']
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DATABASE_URL=sqlite:///app/data/master.db
    volumes:
      - './data:/app/data'
      - './logs:/app/logs'
    networks: ['agent-zero-network']
    restart: unless-stopped
    depends_on:
      - team-formation
      - analytics
      - collaboration  
      - predictive
      - adaptive-learning
      - quantum-intelligence
    command: python master_system_integrator_fixed.py

  # API Gateway (starts after master integrator)
  api-gateway:
    image: nginx:alpine
    container_name: agent-zero-gateway
    ports: ['80:80']
    volumes:
      - './nginx/nginx.conf:/etc/nginx/nginx.conf:ro'
    networks: ['agent-zero-network']
    depends_on:
      - master-integrator
    restart: unless-stopped

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: agent-zero-prometheus  
    ports: ['9090:9090']
    volumes:
      - './monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro'
      - 'prometheus-data:/prometheus'
    networks: ['agent-zero-network']
    restart: unless-stopped
    
  grafana:
    image: grafana/grafana:latest
    container_name: agent-zero-grafana
    ports: ['3000:3000'] 
    volumes:
      - 'grafana-data:/var/lib/grafana'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks: ['agent-zero-network']
    depends_on: ['prometheus']
    restart: unless-stopped

networks:
  agent-zero-network:
    driver: bridge
    name: agent-zero-production

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
